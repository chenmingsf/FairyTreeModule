// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: Msg.proto

#ifndef PROTOBUF_Msg_2eproto__INCLUDED
#define PROTOBUF_Msg_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3005000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3005001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)

namespace protobuf_Msg_2eproto {
// Internal implementation detail -- do not use these members.
struct TableStruct {
  static const ::google::protobuf::internal::ParseTableField entries[];
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[];
  static const ::google::protobuf::internal::ParseTable schema[62];
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static const ::google::protobuf::uint32 offsets[];
};
void AddDescriptors();
void InitDefaultsLoginRequestImpl();
void InitDefaultsLoginRequest();
void InitDefaultsLoginResponseImpl();
void InitDefaultsLoginResponse();
void InitDefaultsElfinRequestImpl();
void InitDefaultsElfinRequest();
void InitDefaultsElfinResponseImpl();
void InitDefaultsElfinResponse();
void InitDefaultsRollRequestImpl();
void InitDefaultsRollRequest();
void InitDefaultsRollResponseImpl();
void InitDefaultsRollResponse();
void InitDefaultsTreeRequestImpl();
void InitDefaultsTreeRequest();
void InitDefaultsTreeResponseImpl();
void InitDefaultsTreeResponse();
void InitDefaultsResourceRequestImpl();
void InitDefaultsResourceRequest();
void InitDefaultsResourceResponseImpl();
void InitDefaultsResourceResponse();
void InitDefaultsTasksRequestImpl();
void InitDefaultsTasksRequest();
void InitDefaultsTasksResponseImpl();
void InitDefaultsTasksResponse();
void InitDefaultsPrizeImpl();
void InitDefaultsPrize();
void InitDefaultsMailsRequestImpl();
void InitDefaultsMailsRequest();
void InitDefaultsMailsResponseImpl();
void InitDefaultsMailsResponse();
void InitDefaultsSunRequestImpl();
void InitDefaultsSunRequest();
void InitDefaultsSunResponseImpl();
void InitDefaultsSunResponse();
void InitDefaultsTreeEnchantmentRequestImpl();
void InitDefaultsTreeEnchantmentRequest();
void InitDefaultsTreeEnchantmentResponseImpl();
void InitDefaultsTreeEnchantmentResponse();
void InitDefaultsStoreAllRequestImpl();
void InitDefaultsStoreAllRequest();
void InitDefaultsStoreAllResponseImpl();
void InitDefaultsStoreAllResponse();
void InitDefaultsStoreEquRequestImpl();
void InitDefaultsStoreEquRequest();
void InitDefaultsStoreEquResponseImpl();
void InitDefaultsStoreEquResponse();
void InitDefaultsStoreWaterRequestImpl();
void InitDefaultsStoreWaterRequest();
void InitDefaultsStoreWaterResponseImpl();
void InitDefaultsStoreWaterResponse();
void InitDefaultsStoreSpePropsRequestImpl();
void InitDefaultsStoreSpePropsRequest();
void InitDefaultsStoreSpePropsResponseImpl();
void InitDefaultsStoreSpePropsResponse();
void InitDefaultsWarehouseRequestImpl();
void InitDefaultsWarehouseRequest();
void InitDefaultsWarehouseResponseImpl();
void InitDefaultsWarehouseResponse();
void InitDefaultsDelMailRequestImpl();
void InitDefaultsDelMailRequest();
void InitDefaultsDelMailResponseImpl();
void InitDefaultsDelMailResponse();
void InitDefaultsClaimedTaskRequestImpl();
void InitDefaultsClaimedTaskRequest();
void InitDefaultsClaimedTaskResponseImpl();
void InitDefaultsClaimedTaskResponse();
void InitDefaultsRecTaskAwardRequestImpl();
void InitDefaultsRecTaskAwardRequest();
void InitDefaultsRecTaskAwardResponseImpl();
void InitDefaultsRecTaskAwardResponse();
void InitDefaultsFriendsRequestImpl();
void InitDefaultsFriendsRequest();
void InitDefaultsFriendsResponseImpl();
void InitDefaultsFriendsResponse();
void InitDefaultsEnemiesRequestImpl();
void InitDefaultsEnemiesRequest();
void InitDefaultsEnemiesResponseImpl();
void InitDefaultsEnemiesResponse();
void InitDefaultsPlunderRequestImpl();
void InitDefaultsPlunderRequest();
void InitDefaultsPlunderResponseImpl();
void InitDefaultsPlunderResponse();
void InitDefaultsUseItemRequestImpl();
void InitDefaultsUseItemRequest();
void InitDefaultsUseItemResponseImpl();
void InitDefaultsUseItemResponse();
void InitDefaultsForgetSkillRequestImpl();
void InitDefaultsForgetSkillRequest();
void InitDefaultsForgetSkillResponseImpl();
void InitDefaultsForgetSkillResponse();
void InitDefaultsSettleAccountRequestImpl();
void InitDefaultsSettleAccountRequest();
void InitDefaultsSettleAccountResponseImpl();
void InitDefaultsSettleAccountResponse();
void InitDefaultsRankingRequestImpl();
void InitDefaultsRankingRequest();
void InitDefaultsRankingResponseImpl();
void InitDefaultsRankingResponse();
void InitDefaultsRegisterRequestImpl();
void InitDefaultsRegisterRequest();
void InitDefaultsRegisterResponseImpl();
void InitDefaultsRegisterResponse();
void InitDefaultsSolarUpgradeRequestImpl();
void InitDefaultsSolarUpgradeRequest();
void InitDefaultsSolarUpgradeResponseImpl();
void InitDefaultsSolarUpgradeResponse();
void InitDefaultsSkillUpgradeRequestImpl();
void InitDefaultsSkillUpgradeRequest();
void InitDefaultsSkillUpgradeResponseImpl();
void InitDefaultsSkillUpgradeResponse();
void InitDefaultsTreeUpgradeRequestImpl();
void InitDefaultsTreeUpgradeRequest();
void InitDefaultsTreeUpgradeResponseImpl();
void InitDefaultsTreeUpgradeResponse();
void InitDefaultsElfinUpgradeRequestImpl();
void InitDefaultsElfinUpgradeRequest();
void InitDefaultsElfinUpgradeResponseImpl();
void InitDefaultsElfinUpgradeResponse();
void InitDefaultsRequestImpl();
void InitDefaultsRequest();
void InitDefaultsResponseImpl();
void InitDefaultsResponse();
void InitDefaultsGameMessageImpl();
void InitDefaultsGameMessage();
inline void InitDefaults() {
  InitDefaultsLoginRequest();
  InitDefaultsLoginResponse();
  InitDefaultsElfinRequest();
  InitDefaultsElfinResponse();
  InitDefaultsRollRequest();
  InitDefaultsRollResponse();
  InitDefaultsTreeRequest();
  InitDefaultsTreeResponse();
  InitDefaultsResourceRequest();
  InitDefaultsResourceResponse();
  InitDefaultsTasksRequest();
  InitDefaultsTasksResponse();
  InitDefaultsPrize();
  InitDefaultsMailsRequest();
  InitDefaultsMailsResponse();
  InitDefaultsSunRequest();
  InitDefaultsSunResponse();
  InitDefaultsTreeEnchantmentRequest();
  InitDefaultsTreeEnchantmentResponse();
  InitDefaultsStoreAllRequest();
  InitDefaultsStoreAllResponse();
  InitDefaultsStoreEquRequest();
  InitDefaultsStoreEquResponse();
  InitDefaultsStoreWaterRequest();
  InitDefaultsStoreWaterResponse();
  InitDefaultsStoreSpePropsRequest();
  InitDefaultsStoreSpePropsResponse();
  InitDefaultsWarehouseRequest();
  InitDefaultsWarehouseResponse();
  InitDefaultsDelMailRequest();
  InitDefaultsDelMailResponse();
  InitDefaultsClaimedTaskRequest();
  InitDefaultsClaimedTaskResponse();
  InitDefaultsRecTaskAwardRequest();
  InitDefaultsRecTaskAwardResponse();
  InitDefaultsFriendsRequest();
  InitDefaultsFriendsResponse();
  InitDefaultsEnemiesRequest();
  InitDefaultsEnemiesResponse();
  InitDefaultsPlunderRequest();
  InitDefaultsPlunderResponse();
  InitDefaultsUseItemRequest();
  InitDefaultsUseItemResponse();
  InitDefaultsForgetSkillRequest();
  InitDefaultsForgetSkillResponse();
  InitDefaultsSettleAccountRequest();
  InitDefaultsSettleAccountResponse();
  InitDefaultsRankingRequest();
  InitDefaultsRankingResponse();
  InitDefaultsRegisterRequest();
  InitDefaultsRegisterResponse();
  InitDefaultsSolarUpgradeRequest();
  InitDefaultsSolarUpgradeResponse();
  InitDefaultsSkillUpgradeRequest();
  InitDefaultsSkillUpgradeResponse();
  InitDefaultsTreeUpgradeRequest();
  InitDefaultsTreeUpgradeResponse();
  InitDefaultsElfinUpgradeRequest();
  InitDefaultsElfinUpgradeResponse();
  InitDefaultsRequest();
  InitDefaultsResponse();
  InitDefaultsGameMessage();
}
}  // namespace protobuf_Msg_2eproto
class ClaimedTaskRequest;
class ClaimedTaskRequestDefaultTypeInternal;
extern ClaimedTaskRequestDefaultTypeInternal _ClaimedTaskRequest_default_instance_;
class ClaimedTaskResponse;
class ClaimedTaskResponseDefaultTypeInternal;
extern ClaimedTaskResponseDefaultTypeInternal _ClaimedTaskResponse_default_instance_;
class DelMailRequest;
class DelMailRequestDefaultTypeInternal;
extern DelMailRequestDefaultTypeInternal _DelMailRequest_default_instance_;
class DelMailResponse;
class DelMailResponseDefaultTypeInternal;
extern DelMailResponseDefaultTypeInternal _DelMailResponse_default_instance_;
class ElfinRequest;
class ElfinRequestDefaultTypeInternal;
extern ElfinRequestDefaultTypeInternal _ElfinRequest_default_instance_;
class ElfinResponse;
class ElfinResponseDefaultTypeInternal;
extern ElfinResponseDefaultTypeInternal _ElfinResponse_default_instance_;
class ElfinUpgradeRequest;
class ElfinUpgradeRequestDefaultTypeInternal;
extern ElfinUpgradeRequestDefaultTypeInternal _ElfinUpgradeRequest_default_instance_;
class ElfinUpgradeResponse;
class ElfinUpgradeResponseDefaultTypeInternal;
extern ElfinUpgradeResponseDefaultTypeInternal _ElfinUpgradeResponse_default_instance_;
class EnemiesRequest;
class EnemiesRequestDefaultTypeInternal;
extern EnemiesRequestDefaultTypeInternal _EnemiesRequest_default_instance_;
class EnemiesResponse;
class EnemiesResponseDefaultTypeInternal;
extern EnemiesResponseDefaultTypeInternal _EnemiesResponse_default_instance_;
class ForgetSkillRequest;
class ForgetSkillRequestDefaultTypeInternal;
extern ForgetSkillRequestDefaultTypeInternal _ForgetSkillRequest_default_instance_;
class ForgetSkillResponse;
class ForgetSkillResponseDefaultTypeInternal;
extern ForgetSkillResponseDefaultTypeInternal _ForgetSkillResponse_default_instance_;
class FriendsRequest;
class FriendsRequestDefaultTypeInternal;
extern FriendsRequestDefaultTypeInternal _FriendsRequest_default_instance_;
class FriendsResponse;
class FriendsResponseDefaultTypeInternal;
extern FriendsResponseDefaultTypeInternal _FriendsResponse_default_instance_;
class GameMessage;
class GameMessageDefaultTypeInternal;
extern GameMessageDefaultTypeInternal _GameMessage_default_instance_;
class LoginRequest;
class LoginRequestDefaultTypeInternal;
extern LoginRequestDefaultTypeInternal _LoginRequest_default_instance_;
class LoginResponse;
class LoginResponseDefaultTypeInternal;
extern LoginResponseDefaultTypeInternal _LoginResponse_default_instance_;
class MailsRequest;
class MailsRequestDefaultTypeInternal;
extern MailsRequestDefaultTypeInternal _MailsRequest_default_instance_;
class MailsResponse;
class MailsResponseDefaultTypeInternal;
extern MailsResponseDefaultTypeInternal _MailsResponse_default_instance_;
class PlunderRequest;
class PlunderRequestDefaultTypeInternal;
extern PlunderRequestDefaultTypeInternal _PlunderRequest_default_instance_;
class PlunderResponse;
class PlunderResponseDefaultTypeInternal;
extern PlunderResponseDefaultTypeInternal _PlunderResponse_default_instance_;
class Prize;
class PrizeDefaultTypeInternal;
extern PrizeDefaultTypeInternal _Prize_default_instance_;
class RankingRequest;
class RankingRequestDefaultTypeInternal;
extern RankingRequestDefaultTypeInternal _RankingRequest_default_instance_;
class RankingResponse;
class RankingResponseDefaultTypeInternal;
extern RankingResponseDefaultTypeInternal _RankingResponse_default_instance_;
class RecTaskAwardRequest;
class RecTaskAwardRequestDefaultTypeInternal;
extern RecTaskAwardRequestDefaultTypeInternal _RecTaskAwardRequest_default_instance_;
class RecTaskAwardResponse;
class RecTaskAwardResponseDefaultTypeInternal;
extern RecTaskAwardResponseDefaultTypeInternal _RecTaskAwardResponse_default_instance_;
class RegisterRequest;
class RegisterRequestDefaultTypeInternal;
extern RegisterRequestDefaultTypeInternal _RegisterRequest_default_instance_;
class RegisterResponse;
class RegisterResponseDefaultTypeInternal;
extern RegisterResponseDefaultTypeInternal _RegisterResponse_default_instance_;
class Request;
class RequestDefaultTypeInternal;
extern RequestDefaultTypeInternal _Request_default_instance_;
class ResourceRequest;
class ResourceRequestDefaultTypeInternal;
extern ResourceRequestDefaultTypeInternal _ResourceRequest_default_instance_;
class ResourceResponse;
class ResourceResponseDefaultTypeInternal;
extern ResourceResponseDefaultTypeInternal _ResourceResponse_default_instance_;
class Response;
class ResponseDefaultTypeInternal;
extern ResponseDefaultTypeInternal _Response_default_instance_;
class RollRequest;
class RollRequestDefaultTypeInternal;
extern RollRequestDefaultTypeInternal _RollRequest_default_instance_;
class RollResponse;
class RollResponseDefaultTypeInternal;
extern RollResponseDefaultTypeInternal _RollResponse_default_instance_;
class SettleAccountRequest;
class SettleAccountRequestDefaultTypeInternal;
extern SettleAccountRequestDefaultTypeInternal _SettleAccountRequest_default_instance_;
class SettleAccountResponse;
class SettleAccountResponseDefaultTypeInternal;
extern SettleAccountResponseDefaultTypeInternal _SettleAccountResponse_default_instance_;
class SkillUpgradeRequest;
class SkillUpgradeRequestDefaultTypeInternal;
extern SkillUpgradeRequestDefaultTypeInternal _SkillUpgradeRequest_default_instance_;
class SkillUpgradeResponse;
class SkillUpgradeResponseDefaultTypeInternal;
extern SkillUpgradeResponseDefaultTypeInternal _SkillUpgradeResponse_default_instance_;
class SolarUpgradeRequest;
class SolarUpgradeRequestDefaultTypeInternal;
extern SolarUpgradeRequestDefaultTypeInternal _SolarUpgradeRequest_default_instance_;
class SolarUpgradeResponse;
class SolarUpgradeResponseDefaultTypeInternal;
extern SolarUpgradeResponseDefaultTypeInternal _SolarUpgradeResponse_default_instance_;
class StoreAllRequest;
class StoreAllRequestDefaultTypeInternal;
extern StoreAllRequestDefaultTypeInternal _StoreAllRequest_default_instance_;
class StoreAllResponse;
class StoreAllResponseDefaultTypeInternal;
extern StoreAllResponseDefaultTypeInternal _StoreAllResponse_default_instance_;
class StoreEquRequest;
class StoreEquRequestDefaultTypeInternal;
extern StoreEquRequestDefaultTypeInternal _StoreEquRequest_default_instance_;
class StoreEquResponse;
class StoreEquResponseDefaultTypeInternal;
extern StoreEquResponseDefaultTypeInternal _StoreEquResponse_default_instance_;
class StoreSpePropsRequest;
class StoreSpePropsRequestDefaultTypeInternal;
extern StoreSpePropsRequestDefaultTypeInternal _StoreSpePropsRequest_default_instance_;
class StoreSpePropsResponse;
class StoreSpePropsResponseDefaultTypeInternal;
extern StoreSpePropsResponseDefaultTypeInternal _StoreSpePropsResponse_default_instance_;
class StoreWaterRequest;
class StoreWaterRequestDefaultTypeInternal;
extern StoreWaterRequestDefaultTypeInternal _StoreWaterRequest_default_instance_;
class StoreWaterResponse;
class StoreWaterResponseDefaultTypeInternal;
extern StoreWaterResponseDefaultTypeInternal _StoreWaterResponse_default_instance_;
class SunRequest;
class SunRequestDefaultTypeInternal;
extern SunRequestDefaultTypeInternal _SunRequest_default_instance_;
class SunResponse;
class SunResponseDefaultTypeInternal;
extern SunResponseDefaultTypeInternal _SunResponse_default_instance_;
class TasksRequest;
class TasksRequestDefaultTypeInternal;
extern TasksRequestDefaultTypeInternal _TasksRequest_default_instance_;
class TasksResponse;
class TasksResponseDefaultTypeInternal;
extern TasksResponseDefaultTypeInternal _TasksResponse_default_instance_;
class TreeEnchantmentRequest;
class TreeEnchantmentRequestDefaultTypeInternal;
extern TreeEnchantmentRequestDefaultTypeInternal _TreeEnchantmentRequest_default_instance_;
class TreeEnchantmentResponse;
class TreeEnchantmentResponseDefaultTypeInternal;
extern TreeEnchantmentResponseDefaultTypeInternal _TreeEnchantmentResponse_default_instance_;
class TreeRequest;
class TreeRequestDefaultTypeInternal;
extern TreeRequestDefaultTypeInternal _TreeRequest_default_instance_;
class TreeResponse;
class TreeResponseDefaultTypeInternal;
extern TreeResponseDefaultTypeInternal _TreeResponse_default_instance_;
class TreeUpgradeRequest;
class TreeUpgradeRequestDefaultTypeInternal;
extern TreeUpgradeRequestDefaultTypeInternal _TreeUpgradeRequest_default_instance_;
class TreeUpgradeResponse;
class TreeUpgradeResponseDefaultTypeInternal;
extern TreeUpgradeResponseDefaultTypeInternal _TreeUpgradeResponse_default_instance_;
class UseItemRequest;
class UseItemRequestDefaultTypeInternal;
extern UseItemRequestDefaultTypeInternal _UseItemRequest_default_instance_;
class UseItemResponse;
class UseItemResponseDefaultTypeInternal;
extern UseItemResponseDefaultTypeInternal _UseItemResponse_default_instance_;
class WarehouseRequest;
class WarehouseRequestDefaultTypeInternal;
extern WarehouseRequestDefaultTypeInternal _WarehouseRequest_default_instance_;
class WarehouseResponse;
class WarehouseResponseDefaultTypeInternal;
extern WarehouseResponseDefaultTypeInternal _WarehouseResponse_default_instance_;

enum LoginResponse_ResultType {
  LoginResponse_ResultType_Success = 0,
  LoginResponse_ResultType_PsswadError = 1,
  LoginResponse_ResultType_UnknownError = 2,
  LoginResponse_ResultType_LoginResponse_ResultType_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  LoginResponse_ResultType_LoginResponse_ResultType_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
bool LoginResponse_ResultType_IsValid(int value);
const LoginResponse_ResultType LoginResponse_ResultType_ResultType_MIN = LoginResponse_ResultType_Success;
const LoginResponse_ResultType LoginResponse_ResultType_ResultType_MAX = LoginResponse_ResultType_UnknownError;
const int LoginResponse_ResultType_ResultType_ARRAYSIZE = LoginResponse_ResultType_ResultType_MAX + 1;

const ::google::protobuf::EnumDescriptor* LoginResponse_ResultType_descriptor();
inline const ::std::string& LoginResponse_ResultType_Name(LoginResponse_ResultType value) {
  return ::google::protobuf::internal::NameOfEnum(
    LoginResponse_ResultType_descriptor(), value);
}
inline bool LoginResponse_ResultType_Parse(
    const ::std::string& name, LoginResponse_ResultType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<LoginResponse_ResultType>(
    LoginResponse_ResultType_descriptor(), name, value);
}
enum ElfinResponse_Elfintype {
  ElfinResponse_Elfintype_Jin = 0,
  ElfinResponse_Elfintype_Mu = 1,
  ElfinResponse_Elfintype_Shui = 2,
  ElfinResponse_Elfintype_Huo = 3,
  ElfinResponse_Elfintype_Tu = 4,
  ElfinResponse_Elfintype_Sum = 5,
  ElfinResponse_Elfintype_An = 6,
  ElfinResponse_Elfintype_ElfinResponse_Elfintype_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  ElfinResponse_Elfintype_ElfinResponse_Elfintype_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
bool ElfinResponse_Elfintype_IsValid(int value);
const ElfinResponse_Elfintype ElfinResponse_Elfintype_Elfintype_MIN = ElfinResponse_Elfintype_Jin;
const ElfinResponse_Elfintype ElfinResponse_Elfintype_Elfintype_MAX = ElfinResponse_Elfintype_An;
const int ElfinResponse_Elfintype_Elfintype_ARRAYSIZE = ElfinResponse_Elfintype_Elfintype_MAX + 1;

const ::google::protobuf::EnumDescriptor* ElfinResponse_Elfintype_descriptor();
inline const ::std::string& ElfinResponse_Elfintype_Name(ElfinResponse_Elfintype value) {
  return ::google::protobuf::internal::NameOfEnum(
    ElfinResponse_Elfintype_descriptor(), value);
}
inline bool ElfinResponse_Elfintype_Parse(
    const ::std::string& name, ElfinResponse_Elfintype* value) {
  return ::google::protobuf::internal::ParseNamedEnum<ElfinResponse_Elfintype>(
    ElfinResponse_Elfintype_descriptor(), name, value);
}
enum TasksResponse_TaskType {
  TasksResponse_TaskType_NotYet = 0,
  TasksResponse_TaskType_Already = 1,
  TasksResponse_TaskType_Done = 2,
  TasksResponse_TaskType_Received = 3,
  TasksResponse_TaskType_TasksResponse_TaskType_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  TasksResponse_TaskType_TasksResponse_TaskType_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
bool TasksResponse_TaskType_IsValid(int value);
const TasksResponse_TaskType TasksResponse_TaskType_TaskType_MIN = TasksResponse_TaskType_NotYet;
const TasksResponse_TaskType TasksResponse_TaskType_TaskType_MAX = TasksResponse_TaskType_Received;
const int TasksResponse_TaskType_TaskType_ARRAYSIZE = TasksResponse_TaskType_TaskType_MAX + 1;

const ::google::protobuf::EnumDescriptor* TasksResponse_TaskType_descriptor();
inline const ::std::string& TasksResponse_TaskType_Name(TasksResponse_TaskType value) {
  return ::google::protobuf::internal::NameOfEnum(
    TasksResponse_TaskType_descriptor(), value);
}
inline bool TasksResponse_TaskType_Parse(
    const ::std::string& name, TasksResponse_TaskType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<TasksResponse_TaskType>(
    TasksResponse_TaskType_descriptor(), name, value);
}
enum GameMsgCode {
  GameMsgCodeStart = 0,
  Login_Request = 3000,
  Login_Response = 3001,
  Elfin_Request = 3010,
  Elfin_Response = 3011,
  Roll_Request = 3020,
  Roll_Response = 3021,
  Tree_Request = 3030,
  Tree_Response = 3031,
  Resource_Request = 3040,
  Resource_Response = 3041,
  Tasks_Request = 3050,
  Tasks_Response = 3051,
  Mails_Request = 3060,
  Mails_Response = 3061,
  Sun_Request = 3070,
  Sun_Response = 3071,
  TreeEnchantment_Request = 3080,
  TreeEnchantment_Response = 3081,
  StoreAll_Request = 3090,
  StoreAll_Response = 3091,
  StoreEqu_Request = 3100,
  StoreEqu_Response = 3101,
  StoreWater_Request = 3110,
  StoreWater_Response = 3111,
  StoreSpeProps_Request = 3120,
  StoreSpeProps_Response = 3121,
  Warehouse_Request = 3130,
  Warehouse_Response = 3131,
  DelMail_Request = 3140,
  DelMail_Response = 3141,
  ClaimedTask_Request = 3150,
  ClaimedTask_Response = 3151,
  RecTaskAward_Request = 3160,
  RecTaskAward_Response = 3161,
  Friends_Request = 3170,
  Friends_Response = 3171,
  Enemies_Request = 3180,
  Enemies_Response = 3181,
  Plunder_Request = 3190,
  Plunder_Response = 3191,
  UseItem_Request = 3200,
  UseItem_Response = 3201,
  SettleAccount_Request = 3210,
  SettleAccount_Response = 3211,
  Ranking_Request = 3220,
  Ranking_Response = 3221,
  ForgetSkill_Request = 3230,
  ForgetSkill_Response = 3231,
  Register_Request = 3240,
  Register_Response = 3241,
  SolarUpgrade_Request = 3250,
  SolarUpgrade_Response = 3251,
  SkillUpgrade_Request = 3260,
  SkillUpgrade_Response = 3261,
  TreeUpgrade_Request = 3270,
  TreeUpgrade_Response = 3271,
  ElfinUpgrade_Request = 3280,
  ElfinUpgrade_Response = 3281,
  GameMsgCode_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  GameMsgCode_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
bool GameMsgCode_IsValid(int value);
const GameMsgCode GameMsgCode_MIN = GameMsgCodeStart;
const GameMsgCode GameMsgCode_MAX = ElfinUpgrade_Response;
const int GameMsgCode_ARRAYSIZE = GameMsgCode_MAX + 1;

const ::google::protobuf::EnumDescriptor* GameMsgCode_descriptor();
inline const ::std::string& GameMsgCode_Name(GameMsgCode value) {
  return ::google::protobuf::internal::NameOfEnum(
    GameMsgCode_descriptor(), value);
}
inline bool GameMsgCode_Parse(
    const ::std::string& name, GameMsgCode* value) {
  return ::google::protobuf::internal::ParseNamedEnum<GameMsgCode>(
    GameMsgCode_descriptor(), name, value);
}
enum StdMode {
  Res_Water = 0,
  Res_Equip = 1,
  Res_SpeProps = 2,
  StdMode_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  StdMode_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
bool StdMode_IsValid(int value);
const StdMode StdMode_MIN = Res_Water;
const StdMode StdMode_MAX = Res_SpeProps;
const int StdMode_ARRAYSIZE = StdMode_MAX + 1;

const ::google::protobuf::EnumDescriptor* StdMode_descriptor();
inline const ::std::string& StdMode_Name(StdMode value) {
  return ::google::protobuf::internal::NameOfEnum(
    StdMode_descriptor(), value);
}
inline bool StdMode_Parse(
    const ::std::string& name, StdMode* value) {
  return ::google::protobuf::internal::ParseNamedEnum<StdMode>(
    StdMode_descriptor(), name, value);
}
// ===================================================================

class LoginRequest : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:LoginRequest) */ {
 public:
  LoginRequest();
  virtual ~LoginRequest();

  LoginRequest(const LoginRequest& from);

  inline LoginRequest& operator=(const LoginRequest& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  LoginRequest(LoginRequest&& from) noexcept
    : LoginRequest() {
    *this = ::std::move(from);
  }

  inline LoginRequest& operator=(LoginRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const LoginRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const LoginRequest* internal_default_instance() {
    return reinterpret_cast<const LoginRequest*>(
               &_LoginRequest_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    0;

  void Swap(LoginRequest* other);
  friend void swap(LoginRequest& a, LoginRequest& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline LoginRequest* New() const PROTOBUF_FINAL { return New(NULL); }

  LoginRequest* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const LoginRequest& from);
  void MergeFrom(const LoginRequest& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(LoginRequest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string Account = 1;
  void clear_account();
  static const int kAccountFieldNumber = 1;
  const ::std::string& account() const;
  void set_account(const ::std::string& value);
  #if LANG_CXX11
  void set_account(::std::string&& value);
  #endif
  void set_account(const char* value);
  void set_account(const char* value, size_t size);
  ::std::string* mutable_account();
  ::std::string* release_account();
  void set_allocated_account(::std::string* account);

  // string Passwd = 2;
  void clear_passwd();
  static const int kPasswdFieldNumber = 2;
  const ::std::string& passwd() const;
  void set_passwd(const ::std::string& value);
  #if LANG_CXX11
  void set_passwd(::std::string&& value);
  #endif
  void set_passwd(const char* value);
  void set_passwd(const char* value, size_t size);
  ::std::string* mutable_passwd();
  ::std::string* release_passwd();
  void set_allocated_passwd(::std::string* passwd);

  // @@protoc_insertion_point(class_scope:LoginRequest)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr account_;
  ::google::protobuf::internal::ArenaStringPtr passwd_;
  mutable int _cached_size_;
  friend struct ::protobuf_Msg_2eproto::TableStruct;
  friend void ::protobuf_Msg_2eproto::InitDefaultsLoginRequestImpl();
};
// -------------------------------------------------------------------

class LoginResponse : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:LoginResponse) */ {
 public:
  LoginResponse();
  virtual ~LoginResponse();

  LoginResponse(const LoginResponse& from);

  inline LoginResponse& operator=(const LoginResponse& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  LoginResponse(LoginResponse&& from) noexcept
    : LoginResponse() {
    *this = ::std::move(from);
  }

  inline LoginResponse& operator=(LoginResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const LoginResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const LoginResponse* internal_default_instance() {
    return reinterpret_cast<const LoginResponse*>(
               &_LoginResponse_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    1;

  void Swap(LoginResponse* other);
  friend void swap(LoginResponse& a, LoginResponse& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline LoginResponse* New() const PROTOBUF_FINAL { return New(NULL); }

  LoginResponse* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const LoginResponse& from);
  void MergeFrom(const LoginResponse& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(LoginResponse* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  typedef LoginResponse_ResultType ResultType;
  static const ResultType Success =
    LoginResponse_ResultType_Success;
  static const ResultType PsswadError =
    LoginResponse_ResultType_PsswadError;
  static const ResultType UnknownError =
    LoginResponse_ResultType_UnknownError;
  static inline bool ResultType_IsValid(int value) {
    return LoginResponse_ResultType_IsValid(value);
  }
  static const ResultType ResultType_MIN =
    LoginResponse_ResultType_ResultType_MIN;
  static const ResultType ResultType_MAX =
    LoginResponse_ResultType_ResultType_MAX;
  static const int ResultType_ARRAYSIZE =
    LoginResponse_ResultType_ResultType_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ResultType_descriptor() {
    return LoginResponse_ResultType_descriptor();
  }
  static inline const ::std::string& ResultType_Name(ResultType value) {
    return LoginResponse_ResultType_Name(value);
  }
  static inline bool ResultType_Parse(const ::std::string& name,
      ResultType* value) {
    return LoginResponse_ResultType_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // .LoginResponse.ResultType result = 1;
  void clear_result();
  static const int kResultFieldNumber = 1;
  ::LoginResponse_ResultType result() const;
  void set_result(::LoginResponse_ResultType value);

  // @@protoc_insertion_point(class_scope:LoginResponse)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  int result_;
  mutable int _cached_size_;
  friend struct ::protobuf_Msg_2eproto::TableStruct;
  friend void ::protobuf_Msg_2eproto::InitDefaultsLoginResponseImpl();
};
// -------------------------------------------------------------------

class ElfinRequest : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:ElfinRequest) */ {
 public:
  ElfinRequest();
  virtual ~ElfinRequest();

  ElfinRequest(const ElfinRequest& from);

  inline ElfinRequest& operator=(const ElfinRequest& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ElfinRequest(ElfinRequest&& from) noexcept
    : ElfinRequest() {
    *this = ::std::move(from);
  }

  inline ElfinRequest& operator=(ElfinRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const ElfinRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ElfinRequest* internal_default_instance() {
    return reinterpret_cast<const ElfinRequest*>(
               &_ElfinRequest_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    2;

  void Swap(ElfinRequest* other);
  friend void swap(ElfinRequest& a, ElfinRequest& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ElfinRequest* New() const PROTOBUF_FINAL { return New(NULL); }

  ElfinRequest* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const ElfinRequest& from);
  void MergeFrom(const ElfinRequest& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(ElfinRequest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // bool Elfin = 1;
  void clear_elfin();
  static const int kElfinFieldNumber = 1;
  bool elfin() const;
  void set_elfin(bool value);

  // @@protoc_insertion_point(class_scope:ElfinRequest)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool elfin_;
  mutable int _cached_size_;
  friend struct ::protobuf_Msg_2eproto::TableStruct;
  friend void ::protobuf_Msg_2eproto::InitDefaultsElfinRequestImpl();
};
// -------------------------------------------------------------------

class ElfinResponse : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:ElfinResponse) */ {
 public:
  ElfinResponse();
  virtual ~ElfinResponse();

  ElfinResponse(const ElfinResponse& from);

  inline ElfinResponse& operator=(const ElfinResponse& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ElfinResponse(ElfinResponse&& from) noexcept
    : ElfinResponse() {
    *this = ::std::move(from);
  }

  inline ElfinResponse& operator=(ElfinResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const ElfinResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ElfinResponse* internal_default_instance() {
    return reinterpret_cast<const ElfinResponse*>(
               &_ElfinResponse_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    3;

  void Swap(ElfinResponse* other);
  friend void swap(ElfinResponse& a, ElfinResponse& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ElfinResponse* New() const PROTOBUF_FINAL { return New(NULL); }

  ElfinResponse* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const ElfinResponse& from);
  void MergeFrom(const ElfinResponse& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(ElfinResponse* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  typedef ElfinResponse_Elfintype Elfintype;
  static const Elfintype Jin =
    ElfinResponse_Elfintype_Jin;
  static const Elfintype Mu =
    ElfinResponse_Elfintype_Mu;
  static const Elfintype Shui =
    ElfinResponse_Elfintype_Shui;
  static const Elfintype Huo =
    ElfinResponse_Elfintype_Huo;
  static const Elfintype Tu =
    ElfinResponse_Elfintype_Tu;
  static const Elfintype Sum =
    ElfinResponse_Elfintype_Sum;
  static const Elfintype An =
    ElfinResponse_Elfintype_An;
  static inline bool Elfintype_IsValid(int value) {
    return ElfinResponse_Elfintype_IsValid(value);
  }
  static const Elfintype Elfintype_MIN =
    ElfinResponse_Elfintype_Elfintype_MIN;
  static const Elfintype Elfintype_MAX =
    ElfinResponse_Elfintype_Elfintype_MAX;
  static const int Elfintype_ARRAYSIZE =
    ElfinResponse_Elfintype_Elfintype_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  Elfintype_descriptor() {
    return ElfinResponse_Elfintype_descriptor();
  }
  static inline const ::std::string& Elfintype_Name(Elfintype value) {
    return ElfinResponse_Elfintype_Name(value);
  }
  static inline bool Elfintype_Parse(const ::std::string& name,
      Elfintype* value) {
    return ElfinResponse_Elfintype_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // uint32 Id = 1;
  void clear_id();
  static const int kIdFieldNumber = 1;
  ::google::protobuf::uint32 id() const;
  void set_id(::google::protobuf::uint32 value);

  // uint32 Level = 2;
  void clear_level();
  static const int kLevelFieldNumber = 2;
  ::google::protobuf::uint32 level() const;
  void set_level(::google::protobuf::uint32 value);

  // uint32 Power = 3;
  void clear_power();
  static const int kPowerFieldNumber = 3;
  ::google::protobuf::uint32 power() const;
  void set_power(::google::protobuf::uint32 value);

  // uint32 MaxPower = 4;
  void clear_maxpower();
  static const int kMaxPowerFieldNumber = 4;
  ::google::protobuf::uint32 maxpower() const;
  void set_maxpower(::google::protobuf::uint32 value);

  // .ElfinResponse.Elfintype Etype = 5;
  void clear_etype();
  static const int kEtypeFieldNumber = 5;
  ::ElfinResponse_Elfintype etype() const;
  void set_etype(::ElfinResponse_Elfintype value);

  // @@protoc_insertion_point(class_scope:ElfinResponse)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 id_;
  ::google::protobuf::uint32 level_;
  ::google::protobuf::uint32 power_;
  ::google::protobuf::uint32 maxpower_;
  int etype_;
  mutable int _cached_size_;
  friend struct ::protobuf_Msg_2eproto::TableStruct;
  friend void ::protobuf_Msg_2eproto::InitDefaultsElfinResponseImpl();
};
// -------------------------------------------------------------------

class RollRequest : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:RollRequest) */ {
 public:
  RollRequest();
  virtual ~RollRequest();

  RollRequest(const RollRequest& from);

  inline RollRequest& operator=(const RollRequest& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  RollRequest(RollRequest&& from) noexcept
    : RollRequest() {
    *this = ::std::move(from);
  }

  inline RollRequest& operator=(RollRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const RollRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const RollRequest* internal_default_instance() {
    return reinterpret_cast<const RollRequest*>(
               &_RollRequest_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    4;

  void Swap(RollRequest* other);
  friend void swap(RollRequest& a, RollRequest& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline RollRequest* New() const PROTOBUF_FINAL { return New(NULL); }

  RollRequest* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const RollRequest& from);
  void MergeFrom(const RollRequest& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(RollRequest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // bool Roll = 1;
  void clear_roll();
  static const int kRollFieldNumber = 1;
  bool roll() const;
  void set_roll(bool value);

  // @@protoc_insertion_point(class_scope:RollRequest)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool roll_;
  mutable int _cached_size_;
  friend struct ::protobuf_Msg_2eproto::TableStruct;
  friend void ::protobuf_Msg_2eproto::InitDefaultsRollRequestImpl();
};
// -------------------------------------------------------------------

class RollResponse : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:RollResponse) */ {
 public:
  RollResponse();
  virtual ~RollResponse();

  RollResponse(const RollResponse& from);

  inline RollResponse& operator=(const RollResponse& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  RollResponse(RollResponse&& from) noexcept
    : RollResponse() {
    *this = ::std::move(from);
  }

  inline RollResponse& operator=(RollResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const RollResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const RollResponse* internal_default_instance() {
    return reinterpret_cast<const RollResponse*>(
               &_RollResponse_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    5;

  void Swap(RollResponse* other);
  friend void swap(RollResponse& a, RollResponse& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline RollResponse* New() const PROTOBUF_FINAL { return New(NULL); }

  RollResponse* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const RollResponse& from);
  void MergeFrom(const RollResponse& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(RollResponse* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string Name = 2;
  void clear_name();
  static const int kNameFieldNumber = 2;
  const ::std::string& name() const;
  void set_name(const ::std::string& value);
  #if LANG_CXX11
  void set_name(::std::string&& value);
  #endif
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  ::std::string* mutable_name();
  ::std::string* release_name();
  void set_allocated_name(::std::string* name);

  // uint32 Id = 1;
  void clear_id();
  static const int kIdFieldNumber = 1;
  ::google::protobuf::uint32 id() const;
  void set_id(::google::protobuf::uint32 value);

  // uint32 GrowthValue = 3;
  void clear_growthvalue();
  static const int kGrowthValueFieldNumber = 3;
  ::google::protobuf::uint32 growthvalue() const;
  void set_growthvalue(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:RollResponse)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr name_;
  ::google::protobuf::uint32 id_;
  ::google::protobuf::uint32 growthvalue_;
  mutable int _cached_size_;
  friend struct ::protobuf_Msg_2eproto::TableStruct;
  friend void ::protobuf_Msg_2eproto::InitDefaultsRollResponseImpl();
};
// -------------------------------------------------------------------

class TreeRequest : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:TreeRequest) */ {
 public:
  TreeRequest();
  virtual ~TreeRequest();

  TreeRequest(const TreeRequest& from);

  inline TreeRequest& operator=(const TreeRequest& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  TreeRequest(TreeRequest&& from) noexcept
    : TreeRequest() {
    *this = ::std::move(from);
  }

  inline TreeRequest& operator=(TreeRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const TreeRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const TreeRequest* internal_default_instance() {
    return reinterpret_cast<const TreeRequest*>(
               &_TreeRequest_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    6;

  void Swap(TreeRequest* other);
  friend void swap(TreeRequest& a, TreeRequest& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline TreeRequest* New() const PROTOBUF_FINAL { return New(NULL); }

  TreeRequest* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const TreeRequest& from);
  void MergeFrom(const TreeRequest& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(TreeRequest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // bool Tree = 1;
  void clear_tree();
  static const int kTreeFieldNumber = 1;
  bool tree() const;
  void set_tree(bool value);

  // @@protoc_insertion_point(class_scope:TreeRequest)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool tree_;
  mutable int _cached_size_;
  friend struct ::protobuf_Msg_2eproto::TableStruct;
  friend void ::protobuf_Msg_2eproto::InitDefaultsTreeRequestImpl();
};
// -------------------------------------------------------------------

class TreeResponse : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:TreeResponse) */ {
 public:
  TreeResponse();
  virtual ~TreeResponse();

  TreeResponse(const TreeResponse& from);

  inline TreeResponse& operator=(const TreeResponse& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  TreeResponse(TreeResponse&& from) noexcept
    : TreeResponse() {
    *this = ::std::move(from);
  }

  inline TreeResponse& operator=(TreeResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const TreeResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const TreeResponse* internal_default_instance() {
    return reinterpret_cast<const TreeResponse*>(
               &_TreeResponse_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    7;

  void Swap(TreeResponse* other);
  friend void swap(TreeResponse& a, TreeResponse& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline TreeResponse* New() const PROTOBUF_FINAL { return New(NULL); }

  TreeResponse* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const TreeResponse& from);
  void MergeFrom(const TreeResponse& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(TreeResponse* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // uint32 Level = 1;
  void clear_level();
  static const int kLevelFieldNumber = 1;
  ::google::protobuf::uint32 level() const;
  void set_level(::google::protobuf::uint32 value);

  // uint32 Hight = 2;
  void clear_hight();
  static const int kHightFieldNumber = 2;
  ::google::protobuf::uint32 hight() const;
  void set_hight(::google::protobuf::uint32 value);

  // uint32 ProdGold = 4;
  void clear_prodgold();
  static const int kProdGoldFieldNumber = 4;
  ::google::protobuf::uint32 prodgold() const;
  void set_prodgold(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:TreeResponse)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 level_;
  ::google::protobuf::uint32 hight_;
  ::google::protobuf::uint32 prodgold_;
  mutable int _cached_size_;
  friend struct ::protobuf_Msg_2eproto::TableStruct;
  friend void ::protobuf_Msg_2eproto::InitDefaultsTreeResponseImpl();
};
// -------------------------------------------------------------------

class ResourceRequest : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:ResourceRequest) */ {
 public:
  ResourceRequest();
  virtual ~ResourceRequest();

  ResourceRequest(const ResourceRequest& from);

  inline ResourceRequest& operator=(const ResourceRequest& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ResourceRequest(ResourceRequest&& from) noexcept
    : ResourceRequest() {
    *this = ::std::move(from);
  }

  inline ResourceRequest& operator=(ResourceRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const ResourceRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ResourceRequest* internal_default_instance() {
    return reinterpret_cast<const ResourceRequest*>(
               &_ResourceRequest_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    8;

  void Swap(ResourceRequest* other);
  friend void swap(ResourceRequest& a, ResourceRequest& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ResourceRequest* New() const PROTOBUF_FINAL { return New(NULL); }

  ResourceRequest* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const ResourceRequest& from);
  void MergeFrom(const ResourceRequest& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(ResourceRequest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // bool resource = 1;
  void clear_resource();
  static const int kResourceFieldNumber = 1;
  bool resource() const;
  void set_resource(bool value);

  // @@protoc_insertion_point(class_scope:ResourceRequest)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool resource_;
  mutable int _cached_size_;
  friend struct ::protobuf_Msg_2eproto::TableStruct;
  friend void ::protobuf_Msg_2eproto::InitDefaultsResourceRequestImpl();
};
// -------------------------------------------------------------------

class ResourceResponse : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:ResourceResponse) */ {
 public:
  ResourceResponse();
  virtual ~ResourceResponse();

  ResourceResponse(const ResourceResponse& from);

  inline ResourceResponse& operator=(const ResourceResponse& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ResourceResponse(ResourceResponse&& from) noexcept
    : ResourceResponse() {
    *this = ::std::move(from);
  }

  inline ResourceResponse& operator=(ResourceResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const ResourceResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ResourceResponse* internal_default_instance() {
    return reinterpret_cast<const ResourceResponse*>(
               &_ResourceResponse_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    9;

  void Swap(ResourceResponse* other);
  friend void swap(ResourceResponse& a, ResourceResponse& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ResourceResponse* New() const PROTOBUF_FINAL { return New(NULL); }

  ResourceResponse* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const ResourceResponse& from);
  void MergeFrom(const ResourceResponse& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(ResourceResponse* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // uint32 Gold = 1;
  void clear_gold();
  static const int kGoldFieldNumber = 1;
  ::google::protobuf::uint32 gold() const;
  void set_gold(::google::protobuf::uint32 value);

  // uint32 Water = 2;
  void clear_water();
  static const int kWaterFieldNumber = 2;
  ::google::protobuf::uint32 water() const;
  void set_water(::google::protobuf::uint32 value);

  // uint32 SunShine = 3;
  void clear_sunshine();
  static const int kSunShineFieldNumber = 3;
  ::google::protobuf::uint32 sunshine() const;
  void set_sunshine(::google::protobuf::uint32 value);

  // uint32 Diamond = 4;
  void clear_diamond();
  static const int kDiamondFieldNumber = 4;
  ::google::protobuf::uint32 diamond() const;
  void set_diamond(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:ResourceResponse)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 gold_;
  ::google::protobuf::uint32 water_;
  ::google::protobuf::uint32 sunshine_;
  ::google::protobuf::uint32 diamond_;
  mutable int _cached_size_;
  friend struct ::protobuf_Msg_2eproto::TableStruct;
  friend void ::protobuf_Msg_2eproto::InitDefaultsResourceResponseImpl();
};
// -------------------------------------------------------------------

class TasksRequest : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:TasksRequest) */ {
 public:
  TasksRequest();
  virtual ~TasksRequest();

  TasksRequest(const TasksRequest& from);

  inline TasksRequest& operator=(const TasksRequest& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  TasksRequest(TasksRequest&& from) noexcept
    : TasksRequest() {
    *this = ::std::move(from);
  }

  inline TasksRequest& operator=(TasksRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const TasksRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const TasksRequest* internal_default_instance() {
    return reinterpret_cast<const TasksRequest*>(
               &_TasksRequest_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    10;

  void Swap(TasksRequest* other);
  friend void swap(TasksRequest& a, TasksRequest& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline TasksRequest* New() const PROTOBUF_FINAL { return New(NULL); }

  TasksRequest* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const TasksRequest& from);
  void MergeFrom(const TasksRequest& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(TasksRequest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // bool Tasks = 1;
  void clear_tasks();
  static const int kTasksFieldNumber = 1;
  bool tasks() const;
  void set_tasks(bool value);

  // @@protoc_insertion_point(class_scope:TasksRequest)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool tasks_;
  mutable int _cached_size_;
  friend struct ::protobuf_Msg_2eproto::TableStruct;
  friend void ::protobuf_Msg_2eproto::InitDefaultsTasksRequestImpl();
};
// -------------------------------------------------------------------

class TasksResponse : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:TasksResponse) */ {
 public:
  TasksResponse();
  virtual ~TasksResponse();

  TasksResponse(const TasksResponse& from);

  inline TasksResponse& operator=(const TasksResponse& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  TasksResponse(TasksResponse&& from) noexcept
    : TasksResponse() {
    *this = ::std::move(from);
  }

  inline TasksResponse& operator=(TasksResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const TasksResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const TasksResponse* internal_default_instance() {
    return reinterpret_cast<const TasksResponse*>(
               &_TasksResponse_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    11;

  void Swap(TasksResponse* other);
  friend void swap(TasksResponse& a, TasksResponse& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline TasksResponse* New() const PROTOBUF_FINAL { return New(NULL); }

  TasksResponse* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const TasksResponse& from);
  void MergeFrom(const TasksResponse& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(TasksResponse* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  typedef TasksResponse_TaskType TaskType;
  static const TaskType NotYet =
    TasksResponse_TaskType_NotYet;
  static const TaskType Already =
    TasksResponse_TaskType_Already;
  static const TaskType Done =
    TasksResponse_TaskType_Done;
  static const TaskType Received =
    TasksResponse_TaskType_Received;
  static inline bool TaskType_IsValid(int value) {
    return TasksResponse_TaskType_IsValid(value);
  }
  static const TaskType TaskType_MIN =
    TasksResponse_TaskType_TaskType_MIN;
  static const TaskType TaskType_MAX =
    TasksResponse_TaskType_TaskType_MAX;
  static const int TaskType_ARRAYSIZE =
    TasksResponse_TaskType_TaskType_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  TaskType_descriptor() {
    return TasksResponse_TaskType_descriptor();
  }
  static inline const ::std::string& TaskType_Name(TaskType value) {
    return TasksResponse_TaskType_Name(value);
  }
  static inline bool TaskType_Parse(const ::std::string& name,
      TaskType* value) {
    return TasksResponse_TaskType_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // string Title = 2;
  void clear_title();
  static const int kTitleFieldNumber = 2;
  const ::std::string& title() const;
  void set_title(const ::std::string& value);
  #if LANG_CXX11
  void set_title(::std::string&& value);
  #endif
  void set_title(const char* value);
  void set_title(const char* value, size_t size);
  ::std::string* mutable_title();
  ::std::string* release_title();
  void set_allocated_title(::std::string* title);

  // string Details = 3;
  void clear_details();
  static const int kDetailsFieldNumber = 3;
  const ::std::string& details() const;
  void set_details(const ::std::string& value);
  #if LANG_CXX11
  void set_details(::std::string&& value);
  #endif
  void set_details(const char* value);
  void set_details(const char* value, size_t size);
  ::std::string* mutable_details();
  ::std::string* release_details();
  void set_allocated_details(::std::string* details);

  // .Prize Prize1 = 5;
  bool has_prize1() const;
  void clear_prize1();
  static const int kPrize1FieldNumber = 5;
  const ::Prize& prize1() const;
  ::Prize* release_prize1();
  ::Prize* mutable_prize1();
  void set_allocated_prize1(::Prize* prize1);

  // .Prize Prize2 = 6;
  bool has_prize2() const;
  void clear_prize2();
  static const int kPrize2FieldNumber = 6;
  const ::Prize& prize2() const;
  ::Prize* release_prize2();
  ::Prize* mutable_prize2();
  void set_allocated_prize2(::Prize* prize2);

  // .Prize Prize3 = 7;
  bool has_prize3() const;
  void clear_prize3();
  static const int kPrize3FieldNumber = 7;
  const ::Prize& prize3() const;
  ::Prize* release_prize3();
  ::Prize* mutable_prize3();
  void set_allocated_prize3(::Prize* prize3);

  // uint32 Id = 1;
  void clear_id();
  static const int kIdFieldNumber = 1;
  ::google::protobuf::uint32 id() const;
  void set_id(::google::protobuf::uint32 value);

  // .TasksResponse.TaskType Type = 4;
  void clear_type();
  static const int kTypeFieldNumber = 4;
  ::TasksResponse_TaskType type() const;
  void set_type(::TasksResponse_TaskType value);

  // @@protoc_insertion_point(class_scope:TasksResponse)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr title_;
  ::google::protobuf::internal::ArenaStringPtr details_;
  ::Prize* prize1_;
  ::Prize* prize2_;
  ::Prize* prize3_;
  ::google::protobuf::uint32 id_;
  int type_;
  mutable int _cached_size_;
  friend struct ::protobuf_Msg_2eproto::TableStruct;
  friend void ::protobuf_Msg_2eproto::InitDefaultsTasksResponseImpl();
};
// -------------------------------------------------------------------

class Prize : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:Prize) */ {
 public:
  Prize();
  virtual ~Prize();

  Prize(const Prize& from);

  inline Prize& operator=(const Prize& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Prize(Prize&& from) noexcept
    : Prize() {
    *this = ::std::move(from);
  }

  inline Prize& operator=(Prize&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const Prize& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Prize* internal_default_instance() {
    return reinterpret_cast<const Prize*>(
               &_Prize_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    12;

  void Swap(Prize* other);
  friend void swap(Prize& a, Prize& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Prize* New() const PROTOBUF_FINAL { return New(NULL); }

  Prize* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const Prize& from);
  void MergeFrom(const Prize& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(Prize* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // uint32 Id = 1;
  void clear_id();
  static const int kIdFieldNumber = 1;
  ::google::protobuf::uint32 id() const;
  void set_id(::google::protobuf::uint32 value);

  // uint32 Number = 2;
  void clear_number();
  static const int kNumberFieldNumber = 2;
  ::google::protobuf::uint32 number() const;
  void set_number(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:Prize)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 id_;
  ::google::protobuf::uint32 number_;
  mutable int _cached_size_;
  friend struct ::protobuf_Msg_2eproto::TableStruct;
  friend void ::protobuf_Msg_2eproto::InitDefaultsPrizeImpl();
};
// -------------------------------------------------------------------

class MailsRequest : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:MailsRequest) */ {
 public:
  MailsRequest();
  virtual ~MailsRequest();

  MailsRequest(const MailsRequest& from);

  inline MailsRequest& operator=(const MailsRequest& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  MailsRequest(MailsRequest&& from) noexcept
    : MailsRequest() {
    *this = ::std::move(from);
  }

  inline MailsRequest& operator=(MailsRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const MailsRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const MailsRequest* internal_default_instance() {
    return reinterpret_cast<const MailsRequest*>(
               &_MailsRequest_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    13;

  void Swap(MailsRequest* other);
  friend void swap(MailsRequest& a, MailsRequest& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline MailsRequest* New() const PROTOBUF_FINAL { return New(NULL); }

  MailsRequest* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const MailsRequest& from);
  void MergeFrom(const MailsRequest& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(MailsRequest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // bool Mails = 1;
  void clear_mails();
  static const int kMailsFieldNumber = 1;
  bool mails() const;
  void set_mails(bool value);

  // @@protoc_insertion_point(class_scope:MailsRequest)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool mails_;
  mutable int _cached_size_;
  friend struct ::protobuf_Msg_2eproto::TableStruct;
  friend void ::protobuf_Msg_2eproto::InitDefaultsMailsRequestImpl();
};
// -------------------------------------------------------------------

class MailsResponse : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:MailsResponse) */ {
 public:
  MailsResponse();
  virtual ~MailsResponse();

  MailsResponse(const MailsResponse& from);

  inline MailsResponse& operator=(const MailsResponse& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  MailsResponse(MailsResponse&& from) noexcept
    : MailsResponse() {
    *this = ::std::move(from);
  }

  inline MailsResponse& operator=(MailsResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const MailsResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const MailsResponse* internal_default_instance() {
    return reinterpret_cast<const MailsResponse*>(
               &_MailsResponse_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    14;

  void Swap(MailsResponse* other);
  friend void swap(MailsResponse& a, MailsResponse& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline MailsResponse* New() const PROTOBUF_FINAL { return New(NULL); }

  MailsResponse* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const MailsResponse& from);
  void MergeFrom(const MailsResponse& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(MailsResponse* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string Title = 2;
  void clear_title();
  static const int kTitleFieldNumber = 2;
  const ::std::string& title() const;
  void set_title(const ::std::string& value);
  #if LANG_CXX11
  void set_title(::std::string&& value);
  #endif
  void set_title(const char* value);
  void set_title(const char* value, size_t size);
  ::std::string* mutable_title();
  ::std::string* release_title();
  void set_allocated_title(::std::string* title);

  // string Details = 3;
  void clear_details();
  static const int kDetailsFieldNumber = 3;
  const ::std::string& details() const;
  void set_details(const ::std::string& value);
  #if LANG_CXX11
  void set_details(::std::string&& value);
  #endif
  void set_details(const char* value);
  void set_details(const char* value, size_t size);
  ::std::string* mutable_details();
  ::std::string* release_details();
  void set_allocated_details(::std::string* details);

  // .Prize Prize1 = 5;
  bool has_prize1() const;
  void clear_prize1();
  static const int kPrize1FieldNumber = 5;
  const ::Prize& prize1() const;
  ::Prize* release_prize1();
  ::Prize* mutable_prize1();
  void set_allocated_prize1(::Prize* prize1);

  // .Prize Prize2 = 6;
  bool has_prize2() const;
  void clear_prize2();
  static const int kPrize2FieldNumber = 6;
  const ::Prize& prize2() const;
  ::Prize* release_prize2();
  ::Prize* mutable_prize2();
  void set_allocated_prize2(::Prize* prize2);

  // .Prize Prize3 = 7;
  bool has_prize3() const;
  void clear_prize3();
  static const int kPrize3FieldNumber = 7;
  const ::Prize& prize3() const;
  ::Prize* release_prize3();
  ::Prize* mutable_prize3();
  void set_allocated_prize3(::Prize* prize3);

  // uint32 Id = 1;
  void clear_id();
  static const int kIdFieldNumber = 1;
  ::google::protobuf::uint32 id() const;
  void set_id(::google::protobuf::uint32 value);

  // bool Received = 4;
  void clear_received();
  static const int kReceivedFieldNumber = 4;
  bool received() const;
  void set_received(bool value);

  // @@protoc_insertion_point(class_scope:MailsResponse)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr title_;
  ::google::protobuf::internal::ArenaStringPtr details_;
  ::Prize* prize1_;
  ::Prize* prize2_;
  ::Prize* prize3_;
  ::google::protobuf::uint32 id_;
  bool received_;
  mutable int _cached_size_;
  friend struct ::protobuf_Msg_2eproto::TableStruct;
  friend void ::protobuf_Msg_2eproto::InitDefaultsMailsResponseImpl();
};
// -------------------------------------------------------------------

class SunRequest : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:SunRequest) */ {
 public:
  SunRequest();
  virtual ~SunRequest();

  SunRequest(const SunRequest& from);

  inline SunRequest& operator=(const SunRequest& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  SunRequest(SunRequest&& from) noexcept
    : SunRequest() {
    *this = ::std::move(from);
  }

  inline SunRequest& operator=(SunRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const SunRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SunRequest* internal_default_instance() {
    return reinterpret_cast<const SunRequest*>(
               &_SunRequest_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    15;

  void Swap(SunRequest* other);
  friend void swap(SunRequest& a, SunRequest& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline SunRequest* New() const PROTOBUF_FINAL { return New(NULL); }

  SunRequest* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const SunRequest& from);
  void MergeFrom(const SunRequest& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(SunRequest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // bool Sun = 1;
  void clear_sun();
  static const int kSunFieldNumber = 1;
  bool sun() const;
  void set_sun(bool value);

  // @@protoc_insertion_point(class_scope:SunRequest)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool sun_;
  mutable int _cached_size_;
  friend struct ::protobuf_Msg_2eproto::TableStruct;
  friend void ::protobuf_Msg_2eproto::InitDefaultsSunRequestImpl();
};
// -------------------------------------------------------------------

class SunResponse : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:SunResponse) */ {
 public:
  SunResponse();
  virtual ~SunResponse();

  SunResponse(const SunResponse& from);

  inline SunResponse& operator=(const SunResponse& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  SunResponse(SunResponse&& from) noexcept
    : SunResponse() {
    *this = ::std::move(from);
  }

  inline SunResponse& operator=(SunResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const SunResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SunResponse* internal_default_instance() {
    return reinterpret_cast<const SunResponse*>(
               &_SunResponse_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    16;

  void Swap(SunResponse* other);
  friend void swap(SunResponse& a, SunResponse& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline SunResponse* New() const PROTOBUF_FINAL { return New(NULL); }

  SunResponse* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const SunResponse& from);
  void MergeFrom(const SunResponse& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(SunResponse* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // uint32 Level = 1;
  void clear_level();
  static const int kLevelFieldNumber = 1;
  ::google::protobuf::uint32 level() const;
  void set_level(::google::protobuf::uint32 value);

  // uint32 SunShine = 2;
  void clear_sunshine();
  static const int kSunShineFieldNumber = 2;
  ::google::protobuf::uint32 sunshine() const;
  void set_sunshine(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:SunResponse)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 level_;
  ::google::protobuf::uint32 sunshine_;
  mutable int _cached_size_;
  friend struct ::protobuf_Msg_2eproto::TableStruct;
  friend void ::protobuf_Msg_2eproto::InitDefaultsSunResponseImpl();
};
// -------------------------------------------------------------------

class TreeEnchantmentRequest : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:TreeEnchantmentRequest) */ {
 public:
  TreeEnchantmentRequest();
  virtual ~TreeEnchantmentRequest();

  TreeEnchantmentRequest(const TreeEnchantmentRequest& from);

  inline TreeEnchantmentRequest& operator=(const TreeEnchantmentRequest& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  TreeEnchantmentRequest(TreeEnchantmentRequest&& from) noexcept
    : TreeEnchantmentRequest() {
    *this = ::std::move(from);
  }

  inline TreeEnchantmentRequest& operator=(TreeEnchantmentRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const TreeEnchantmentRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const TreeEnchantmentRequest* internal_default_instance() {
    return reinterpret_cast<const TreeEnchantmentRequest*>(
               &_TreeEnchantmentRequest_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    17;

  void Swap(TreeEnchantmentRequest* other);
  friend void swap(TreeEnchantmentRequest& a, TreeEnchantmentRequest& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline TreeEnchantmentRequest* New() const PROTOBUF_FINAL { return New(NULL); }

  TreeEnchantmentRequest* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const TreeEnchantmentRequest& from);
  void MergeFrom(const TreeEnchantmentRequest& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(TreeEnchantmentRequest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // bool Well = 1;
  void clear_well();
  static const int kWellFieldNumber = 1;
  bool well() const;
  void set_well(bool value);

  // @@protoc_insertion_point(class_scope:TreeEnchantmentRequest)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool well_;
  mutable int _cached_size_;
  friend struct ::protobuf_Msg_2eproto::TableStruct;
  friend void ::protobuf_Msg_2eproto::InitDefaultsTreeEnchantmentRequestImpl();
};
// -------------------------------------------------------------------

class TreeEnchantmentResponse : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:TreeEnchantmentResponse) */ {
 public:
  TreeEnchantmentResponse();
  virtual ~TreeEnchantmentResponse();

  TreeEnchantmentResponse(const TreeEnchantmentResponse& from);

  inline TreeEnchantmentResponse& operator=(const TreeEnchantmentResponse& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  TreeEnchantmentResponse(TreeEnchantmentResponse&& from) noexcept
    : TreeEnchantmentResponse() {
    *this = ::std::move(from);
  }

  inline TreeEnchantmentResponse& operator=(TreeEnchantmentResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const TreeEnchantmentResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const TreeEnchantmentResponse* internal_default_instance() {
    return reinterpret_cast<const TreeEnchantmentResponse*>(
               &_TreeEnchantmentResponse_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    18;

  void Swap(TreeEnchantmentResponse* other);
  friend void swap(TreeEnchantmentResponse& a, TreeEnchantmentResponse& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline TreeEnchantmentResponse* New() const PROTOBUF_FINAL { return New(NULL); }

  TreeEnchantmentResponse* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const TreeEnchantmentResponse& from);
  void MergeFrom(const TreeEnchantmentResponse& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(TreeEnchantmentResponse* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // uint32 Level = 1;
  void clear_level();
  static const int kLevelFieldNumber = 1;
  ::google::protobuf::uint32 level() const;
  void set_level(::google::protobuf::uint32 value);

  // uint32 DefenseLevel = 2;
  void clear_defenselevel();
  static const int kDefenseLevelFieldNumber = 2;
  ::google::protobuf::uint32 defenselevel() const;
  void set_defenselevel(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:TreeEnchantmentResponse)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 level_;
  ::google::protobuf::uint32 defenselevel_;
  mutable int _cached_size_;
  friend struct ::protobuf_Msg_2eproto::TableStruct;
  friend void ::protobuf_Msg_2eproto::InitDefaultsTreeEnchantmentResponseImpl();
};
// -------------------------------------------------------------------

class StoreAllRequest : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:StoreAllRequest) */ {
 public:
  StoreAllRequest();
  virtual ~StoreAllRequest();

  StoreAllRequest(const StoreAllRequest& from);

  inline StoreAllRequest& operator=(const StoreAllRequest& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  StoreAllRequest(StoreAllRequest&& from) noexcept
    : StoreAllRequest() {
    *this = ::std::move(from);
  }

  inline StoreAllRequest& operator=(StoreAllRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const StoreAllRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const StoreAllRequest* internal_default_instance() {
    return reinterpret_cast<const StoreAllRequest*>(
               &_StoreAllRequest_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    19;

  void Swap(StoreAllRequest* other);
  friend void swap(StoreAllRequest& a, StoreAllRequest& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline StoreAllRequest* New() const PROTOBUF_FINAL { return New(NULL); }

  StoreAllRequest* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const StoreAllRequest& from);
  void MergeFrom(const StoreAllRequest& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(StoreAllRequest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // bool StoreAll = 1;
  void clear_storeall();
  static const int kStoreAllFieldNumber = 1;
  bool storeall() const;
  void set_storeall(bool value);

  // @@protoc_insertion_point(class_scope:StoreAllRequest)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool storeall_;
  mutable int _cached_size_;
  friend struct ::protobuf_Msg_2eproto::TableStruct;
  friend void ::protobuf_Msg_2eproto::InitDefaultsStoreAllRequestImpl();
};
// -------------------------------------------------------------------

class StoreAllResponse : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:StoreAllResponse) */ {
 public:
  StoreAllResponse();
  virtual ~StoreAllResponse();

  StoreAllResponse(const StoreAllResponse& from);

  inline StoreAllResponse& operator=(const StoreAllResponse& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  StoreAllResponse(StoreAllResponse&& from) noexcept
    : StoreAllResponse() {
    *this = ::std::move(from);
  }

  inline StoreAllResponse& operator=(StoreAllResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const StoreAllResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const StoreAllResponse* internal_default_instance() {
    return reinterpret_cast<const StoreAllResponse*>(
               &_StoreAllResponse_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    20;

  void Swap(StoreAllResponse* other);
  friend void swap(StoreAllResponse& a, StoreAllResponse& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline StoreAllResponse* New() const PROTOBUF_FINAL { return New(NULL); }

  StoreAllResponse* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const StoreAllResponse& from);
  void MergeFrom(const StoreAllResponse& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(StoreAllResponse* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string Describe = 6;
  void clear_describe();
  static const int kDescribeFieldNumber = 6;
  const ::std::string& describe() const;
  void set_describe(const ::std::string& value);
  #if LANG_CXX11
  void set_describe(::std::string&& value);
  #endif
  void set_describe(const char* value);
  void set_describe(const char* value, size_t size);
  ::std::string* mutable_describe();
  ::std::string* release_describe();
  void set_allocated_describe(::std::string* describe);

  // string Name = 7;
  void clear_name();
  static const int kNameFieldNumber = 7;
  const ::std::string& name() const;
  void set_name(const ::std::string& value);
  #if LANG_CXX11
  void set_name(::std::string&& value);
  #endif
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  ::std::string* mutable_name();
  ::std::string* release_name();
  void set_allocated_name(::std::string* name);

  // uint32 Id = 1;
  void clear_id();
  static const int kIdFieldNumber = 1;
  ::google::protobuf::uint32 id() const;
  void set_id(::google::protobuf::uint32 value);

  // uint32 GoldPrice = 2;
  void clear_goldprice();
  static const int kGoldPriceFieldNumber = 2;
  ::google::protobuf::uint32 goldprice() const;
  void set_goldprice(::google::protobuf::uint32 value);

  // uint32 DiaPrice = 3;
  void clear_diaprice();
  static const int kDiaPriceFieldNumber = 3;
  ::google::protobuf::uint32 diaprice() const;
  void set_diaprice(::google::protobuf::uint32 value);

  // uint32 Discount = 4;
  void clear_discount();
  static const int kDiscountFieldNumber = 4;
  ::google::protobuf::uint32 discount() const;
  void set_discount(::google::protobuf::uint32 value);

  // .StdMode Type = 5;
  void clear_type();
  static const int kTypeFieldNumber = 5;
  ::StdMode type() const;
  void set_type(::StdMode value);

  // @@protoc_insertion_point(class_scope:StoreAllResponse)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr describe_;
  ::google::protobuf::internal::ArenaStringPtr name_;
  ::google::protobuf::uint32 id_;
  ::google::protobuf::uint32 goldprice_;
  ::google::protobuf::uint32 diaprice_;
  ::google::protobuf::uint32 discount_;
  int type_;
  mutable int _cached_size_;
  friend struct ::protobuf_Msg_2eproto::TableStruct;
  friend void ::protobuf_Msg_2eproto::InitDefaultsStoreAllResponseImpl();
};
// -------------------------------------------------------------------

class StoreEquRequest : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:StoreEquRequest) */ {
 public:
  StoreEquRequest();
  virtual ~StoreEquRequest();

  StoreEquRequest(const StoreEquRequest& from);

  inline StoreEquRequest& operator=(const StoreEquRequest& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  StoreEquRequest(StoreEquRequest&& from) noexcept
    : StoreEquRequest() {
    *this = ::std::move(from);
  }

  inline StoreEquRequest& operator=(StoreEquRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const StoreEquRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const StoreEquRequest* internal_default_instance() {
    return reinterpret_cast<const StoreEquRequest*>(
               &_StoreEquRequest_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    21;

  void Swap(StoreEquRequest* other);
  friend void swap(StoreEquRequest& a, StoreEquRequest& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline StoreEquRequest* New() const PROTOBUF_FINAL { return New(NULL); }

  StoreEquRequest* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const StoreEquRequest& from);
  void MergeFrom(const StoreEquRequest& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(StoreEquRequest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // bool StoreEqu = 1;
  void clear_storeequ();
  static const int kStoreEquFieldNumber = 1;
  bool storeequ() const;
  void set_storeequ(bool value);

  // @@protoc_insertion_point(class_scope:StoreEquRequest)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool storeequ_;
  mutable int _cached_size_;
  friend struct ::protobuf_Msg_2eproto::TableStruct;
  friend void ::protobuf_Msg_2eproto::InitDefaultsStoreEquRequestImpl();
};
// -------------------------------------------------------------------

class StoreEquResponse : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:StoreEquResponse) */ {
 public:
  StoreEquResponse();
  virtual ~StoreEquResponse();

  StoreEquResponse(const StoreEquResponse& from);

  inline StoreEquResponse& operator=(const StoreEquResponse& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  StoreEquResponse(StoreEquResponse&& from) noexcept
    : StoreEquResponse() {
    *this = ::std::move(from);
  }

  inline StoreEquResponse& operator=(StoreEquResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const StoreEquResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const StoreEquResponse* internal_default_instance() {
    return reinterpret_cast<const StoreEquResponse*>(
               &_StoreEquResponse_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    22;

  void Swap(StoreEquResponse* other);
  friend void swap(StoreEquResponse& a, StoreEquResponse& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline StoreEquResponse* New() const PROTOBUF_FINAL { return New(NULL); }

  StoreEquResponse* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const StoreEquResponse& from);
  void MergeFrom(const StoreEquResponse& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(StoreEquResponse* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string Describe = 6;
  void clear_describe();
  static const int kDescribeFieldNumber = 6;
  const ::std::string& describe() const;
  void set_describe(const ::std::string& value);
  #if LANG_CXX11
  void set_describe(::std::string&& value);
  #endif
  void set_describe(const char* value);
  void set_describe(const char* value, size_t size);
  ::std::string* mutable_describe();
  ::std::string* release_describe();
  void set_allocated_describe(::std::string* describe);

  // string Name = 7;
  void clear_name();
  static const int kNameFieldNumber = 7;
  const ::std::string& name() const;
  void set_name(const ::std::string& value);
  #if LANG_CXX11
  void set_name(::std::string&& value);
  #endif
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  ::std::string* mutable_name();
  ::std::string* release_name();
  void set_allocated_name(::std::string* name);

  // uint32 Id = 1;
  void clear_id();
  static const int kIdFieldNumber = 1;
  ::google::protobuf::uint32 id() const;
  void set_id(::google::protobuf::uint32 value);

  // uint32 GoldPrice = 2;
  void clear_goldprice();
  static const int kGoldPriceFieldNumber = 2;
  ::google::protobuf::uint32 goldprice() const;
  void set_goldprice(::google::protobuf::uint32 value);

  // uint32 DiaPrice = 3;
  void clear_diaprice();
  static const int kDiaPriceFieldNumber = 3;
  ::google::protobuf::uint32 diaprice() const;
  void set_diaprice(::google::protobuf::uint32 value);

  // uint32 Discount = 4;
  void clear_discount();
  static const int kDiscountFieldNumber = 4;
  ::google::protobuf::uint32 discount() const;
  void set_discount(::google::protobuf::uint32 value);

  // .StdMode Type = 5;
  void clear_type();
  static const int kTypeFieldNumber = 5;
  ::StdMode type() const;
  void set_type(::StdMode value);

  // @@protoc_insertion_point(class_scope:StoreEquResponse)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr describe_;
  ::google::protobuf::internal::ArenaStringPtr name_;
  ::google::protobuf::uint32 id_;
  ::google::protobuf::uint32 goldprice_;
  ::google::protobuf::uint32 diaprice_;
  ::google::protobuf::uint32 discount_;
  int type_;
  mutable int _cached_size_;
  friend struct ::protobuf_Msg_2eproto::TableStruct;
  friend void ::protobuf_Msg_2eproto::InitDefaultsStoreEquResponseImpl();
};
// -------------------------------------------------------------------

class StoreWaterRequest : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:StoreWaterRequest) */ {
 public:
  StoreWaterRequest();
  virtual ~StoreWaterRequest();

  StoreWaterRequest(const StoreWaterRequest& from);

  inline StoreWaterRequest& operator=(const StoreWaterRequest& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  StoreWaterRequest(StoreWaterRequest&& from) noexcept
    : StoreWaterRequest() {
    *this = ::std::move(from);
  }

  inline StoreWaterRequest& operator=(StoreWaterRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const StoreWaterRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const StoreWaterRequest* internal_default_instance() {
    return reinterpret_cast<const StoreWaterRequest*>(
               &_StoreWaterRequest_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    23;

  void Swap(StoreWaterRequest* other);
  friend void swap(StoreWaterRequest& a, StoreWaterRequest& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline StoreWaterRequest* New() const PROTOBUF_FINAL { return New(NULL); }

  StoreWaterRequest* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const StoreWaterRequest& from);
  void MergeFrom(const StoreWaterRequest& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(StoreWaterRequest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // bool StoreWater = 1;
  void clear_storewater();
  static const int kStoreWaterFieldNumber = 1;
  bool storewater() const;
  void set_storewater(bool value);

  // @@protoc_insertion_point(class_scope:StoreWaterRequest)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool storewater_;
  mutable int _cached_size_;
  friend struct ::protobuf_Msg_2eproto::TableStruct;
  friend void ::protobuf_Msg_2eproto::InitDefaultsStoreWaterRequestImpl();
};
// -------------------------------------------------------------------

class StoreWaterResponse : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:StoreWaterResponse) */ {
 public:
  StoreWaterResponse();
  virtual ~StoreWaterResponse();

  StoreWaterResponse(const StoreWaterResponse& from);

  inline StoreWaterResponse& operator=(const StoreWaterResponse& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  StoreWaterResponse(StoreWaterResponse&& from) noexcept
    : StoreWaterResponse() {
    *this = ::std::move(from);
  }

  inline StoreWaterResponse& operator=(StoreWaterResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const StoreWaterResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const StoreWaterResponse* internal_default_instance() {
    return reinterpret_cast<const StoreWaterResponse*>(
               &_StoreWaterResponse_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    24;

  void Swap(StoreWaterResponse* other);
  friend void swap(StoreWaterResponse& a, StoreWaterResponse& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline StoreWaterResponse* New() const PROTOBUF_FINAL { return New(NULL); }

  StoreWaterResponse* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const StoreWaterResponse& from);
  void MergeFrom(const StoreWaterResponse& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(StoreWaterResponse* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string Describe = 6;
  void clear_describe();
  static const int kDescribeFieldNumber = 6;
  const ::std::string& describe() const;
  void set_describe(const ::std::string& value);
  #if LANG_CXX11
  void set_describe(::std::string&& value);
  #endif
  void set_describe(const char* value);
  void set_describe(const char* value, size_t size);
  ::std::string* mutable_describe();
  ::std::string* release_describe();
  void set_allocated_describe(::std::string* describe);

  // string Name = 7;
  void clear_name();
  static const int kNameFieldNumber = 7;
  const ::std::string& name() const;
  void set_name(const ::std::string& value);
  #if LANG_CXX11
  void set_name(::std::string&& value);
  #endif
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  ::std::string* mutable_name();
  ::std::string* release_name();
  void set_allocated_name(::std::string* name);

  // uint32 Id = 1;
  void clear_id();
  static const int kIdFieldNumber = 1;
  ::google::protobuf::uint32 id() const;
  void set_id(::google::protobuf::uint32 value);

  // uint32 GoldPrice = 2;
  void clear_goldprice();
  static const int kGoldPriceFieldNumber = 2;
  ::google::protobuf::uint32 goldprice() const;
  void set_goldprice(::google::protobuf::uint32 value);

  // uint32 DiaPrice = 3;
  void clear_diaprice();
  static const int kDiaPriceFieldNumber = 3;
  ::google::protobuf::uint32 diaprice() const;
  void set_diaprice(::google::protobuf::uint32 value);

  // uint32 Discount = 4;
  void clear_discount();
  static const int kDiscountFieldNumber = 4;
  ::google::protobuf::uint32 discount() const;
  void set_discount(::google::protobuf::uint32 value);

  // .StdMode Type = 5;
  void clear_type();
  static const int kTypeFieldNumber = 5;
  ::StdMode type() const;
  void set_type(::StdMode value);

  // @@protoc_insertion_point(class_scope:StoreWaterResponse)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr describe_;
  ::google::protobuf::internal::ArenaStringPtr name_;
  ::google::protobuf::uint32 id_;
  ::google::protobuf::uint32 goldprice_;
  ::google::protobuf::uint32 diaprice_;
  ::google::protobuf::uint32 discount_;
  int type_;
  mutable int _cached_size_;
  friend struct ::protobuf_Msg_2eproto::TableStruct;
  friend void ::protobuf_Msg_2eproto::InitDefaultsStoreWaterResponseImpl();
};
// -------------------------------------------------------------------

class StoreSpePropsRequest : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:StoreSpePropsRequest) */ {
 public:
  StoreSpePropsRequest();
  virtual ~StoreSpePropsRequest();

  StoreSpePropsRequest(const StoreSpePropsRequest& from);

  inline StoreSpePropsRequest& operator=(const StoreSpePropsRequest& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  StoreSpePropsRequest(StoreSpePropsRequest&& from) noexcept
    : StoreSpePropsRequest() {
    *this = ::std::move(from);
  }

  inline StoreSpePropsRequest& operator=(StoreSpePropsRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const StoreSpePropsRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const StoreSpePropsRequest* internal_default_instance() {
    return reinterpret_cast<const StoreSpePropsRequest*>(
               &_StoreSpePropsRequest_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    25;

  void Swap(StoreSpePropsRequest* other);
  friend void swap(StoreSpePropsRequest& a, StoreSpePropsRequest& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline StoreSpePropsRequest* New() const PROTOBUF_FINAL { return New(NULL); }

  StoreSpePropsRequest* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const StoreSpePropsRequest& from);
  void MergeFrom(const StoreSpePropsRequest& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(StoreSpePropsRequest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // bool StoreSpeprops = 1;
  void clear_storespeprops();
  static const int kStoreSpepropsFieldNumber = 1;
  bool storespeprops() const;
  void set_storespeprops(bool value);

  // @@protoc_insertion_point(class_scope:StoreSpePropsRequest)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool storespeprops_;
  mutable int _cached_size_;
  friend struct ::protobuf_Msg_2eproto::TableStruct;
  friend void ::protobuf_Msg_2eproto::InitDefaultsStoreSpePropsRequestImpl();
};
// -------------------------------------------------------------------

class StoreSpePropsResponse : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:StoreSpePropsResponse) */ {
 public:
  StoreSpePropsResponse();
  virtual ~StoreSpePropsResponse();

  StoreSpePropsResponse(const StoreSpePropsResponse& from);

  inline StoreSpePropsResponse& operator=(const StoreSpePropsResponse& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  StoreSpePropsResponse(StoreSpePropsResponse&& from) noexcept
    : StoreSpePropsResponse() {
    *this = ::std::move(from);
  }

  inline StoreSpePropsResponse& operator=(StoreSpePropsResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const StoreSpePropsResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const StoreSpePropsResponse* internal_default_instance() {
    return reinterpret_cast<const StoreSpePropsResponse*>(
               &_StoreSpePropsResponse_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    26;

  void Swap(StoreSpePropsResponse* other);
  friend void swap(StoreSpePropsResponse& a, StoreSpePropsResponse& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline StoreSpePropsResponse* New() const PROTOBUF_FINAL { return New(NULL); }

  StoreSpePropsResponse* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const StoreSpePropsResponse& from);
  void MergeFrom(const StoreSpePropsResponse& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(StoreSpePropsResponse* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string Describe = 6;
  void clear_describe();
  static const int kDescribeFieldNumber = 6;
  const ::std::string& describe() const;
  void set_describe(const ::std::string& value);
  #if LANG_CXX11
  void set_describe(::std::string&& value);
  #endif
  void set_describe(const char* value);
  void set_describe(const char* value, size_t size);
  ::std::string* mutable_describe();
  ::std::string* release_describe();
  void set_allocated_describe(::std::string* describe);

  // string Name = 7;
  void clear_name();
  static const int kNameFieldNumber = 7;
  const ::std::string& name() const;
  void set_name(const ::std::string& value);
  #if LANG_CXX11
  void set_name(::std::string&& value);
  #endif
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  ::std::string* mutable_name();
  ::std::string* release_name();
  void set_allocated_name(::std::string* name);

  // uint32 Id = 1;
  void clear_id();
  static const int kIdFieldNumber = 1;
  ::google::protobuf::uint32 id() const;
  void set_id(::google::protobuf::uint32 value);

  // uint32 GoldPrice = 2;
  void clear_goldprice();
  static const int kGoldPriceFieldNumber = 2;
  ::google::protobuf::uint32 goldprice() const;
  void set_goldprice(::google::protobuf::uint32 value);

  // uint32 DiaPrice = 3;
  void clear_diaprice();
  static const int kDiaPriceFieldNumber = 3;
  ::google::protobuf::uint32 diaprice() const;
  void set_diaprice(::google::protobuf::uint32 value);

  // uint32 Discount = 4;
  void clear_discount();
  static const int kDiscountFieldNumber = 4;
  ::google::protobuf::uint32 discount() const;
  void set_discount(::google::protobuf::uint32 value);

  // .StdMode Type = 5;
  void clear_type();
  static const int kTypeFieldNumber = 5;
  ::StdMode type() const;
  void set_type(::StdMode value);

  // @@protoc_insertion_point(class_scope:StoreSpePropsResponse)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr describe_;
  ::google::protobuf::internal::ArenaStringPtr name_;
  ::google::protobuf::uint32 id_;
  ::google::protobuf::uint32 goldprice_;
  ::google::protobuf::uint32 diaprice_;
  ::google::protobuf::uint32 discount_;
  int type_;
  mutable int _cached_size_;
  friend struct ::protobuf_Msg_2eproto::TableStruct;
  friend void ::protobuf_Msg_2eproto::InitDefaultsStoreSpePropsResponseImpl();
};
// -------------------------------------------------------------------

class WarehouseRequest : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:WarehouseRequest) */ {
 public:
  WarehouseRequest();
  virtual ~WarehouseRequest();

  WarehouseRequest(const WarehouseRequest& from);

  inline WarehouseRequest& operator=(const WarehouseRequest& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  WarehouseRequest(WarehouseRequest&& from) noexcept
    : WarehouseRequest() {
    *this = ::std::move(from);
  }

  inline WarehouseRequest& operator=(WarehouseRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const WarehouseRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const WarehouseRequest* internal_default_instance() {
    return reinterpret_cast<const WarehouseRequest*>(
               &_WarehouseRequest_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    27;

  void Swap(WarehouseRequest* other);
  friend void swap(WarehouseRequest& a, WarehouseRequest& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline WarehouseRequest* New() const PROTOBUF_FINAL { return New(NULL); }

  WarehouseRequest* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const WarehouseRequest& from);
  void MergeFrom(const WarehouseRequest& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(WarehouseRequest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // bool Warehouse = 1;
  void clear_warehouse();
  static const int kWarehouseFieldNumber = 1;
  bool warehouse() const;
  void set_warehouse(bool value);

  // @@protoc_insertion_point(class_scope:WarehouseRequest)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool warehouse_;
  mutable int _cached_size_;
  friend struct ::protobuf_Msg_2eproto::TableStruct;
  friend void ::protobuf_Msg_2eproto::InitDefaultsWarehouseRequestImpl();
};
// -------------------------------------------------------------------

class WarehouseResponse : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:WarehouseResponse) */ {
 public:
  WarehouseResponse();
  virtual ~WarehouseResponse();

  WarehouseResponse(const WarehouseResponse& from);

  inline WarehouseResponse& operator=(const WarehouseResponse& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  WarehouseResponse(WarehouseResponse&& from) noexcept
    : WarehouseResponse() {
    *this = ::std::move(from);
  }

  inline WarehouseResponse& operator=(WarehouseResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const WarehouseResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const WarehouseResponse* internal_default_instance() {
    return reinterpret_cast<const WarehouseResponse*>(
               &_WarehouseResponse_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    28;

  void Swap(WarehouseResponse* other);
  friend void swap(WarehouseResponse& a, WarehouseResponse& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline WarehouseResponse* New() const PROTOBUF_FINAL { return New(NULL); }

  WarehouseResponse* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const WarehouseResponse& from);
  void MergeFrom(const WarehouseResponse& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(WarehouseResponse* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // uint32 Id = 1;
  void clear_id();
  static const int kIdFieldNumber = 1;
  ::google::protobuf::uint32 id() const;
  void set_id(::google::protobuf::uint32 value);

  // uint32 Number = 2;
  void clear_number();
  static const int kNumberFieldNumber = 2;
  ::google::protobuf::uint32 number() const;
  void set_number(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:WarehouseResponse)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 id_;
  ::google::protobuf::uint32 number_;
  mutable int _cached_size_;
  friend struct ::protobuf_Msg_2eproto::TableStruct;
  friend void ::protobuf_Msg_2eproto::InitDefaultsWarehouseResponseImpl();
};
// -------------------------------------------------------------------

class DelMailRequest : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:DelMailRequest) */ {
 public:
  DelMailRequest();
  virtual ~DelMailRequest();

  DelMailRequest(const DelMailRequest& from);

  inline DelMailRequest& operator=(const DelMailRequest& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  DelMailRequest(DelMailRequest&& from) noexcept
    : DelMailRequest() {
    *this = ::std::move(from);
  }

  inline DelMailRequest& operator=(DelMailRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const DelMailRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const DelMailRequest* internal_default_instance() {
    return reinterpret_cast<const DelMailRequest*>(
               &_DelMailRequest_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    29;

  void Swap(DelMailRequest* other);
  friend void swap(DelMailRequest& a, DelMailRequest& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline DelMailRequest* New() const PROTOBUF_FINAL { return New(NULL); }

  DelMailRequest* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const DelMailRequest& from);
  void MergeFrom(const DelMailRequest& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(DelMailRequest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // uint32 Id = 1;
  void clear_id();
  static const int kIdFieldNumber = 1;
  ::google::protobuf::uint32 id() const;
  void set_id(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:DelMailRequest)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 id_;
  mutable int _cached_size_;
  friend struct ::protobuf_Msg_2eproto::TableStruct;
  friend void ::protobuf_Msg_2eproto::InitDefaultsDelMailRequestImpl();
};
// -------------------------------------------------------------------

class DelMailResponse : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:DelMailResponse) */ {
 public:
  DelMailResponse();
  virtual ~DelMailResponse();

  DelMailResponse(const DelMailResponse& from);

  inline DelMailResponse& operator=(const DelMailResponse& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  DelMailResponse(DelMailResponse&& from) noexcept
    : DelMailResponse() {
    *this = ::std::move(from);
  }

  inline DelMailResponse& operator=(DelMailResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const DelMailResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const DelMailResponse* internal_default_instance() {
    return reinterpret_cast<const DelMailResponse*>(
               &_DelMailResponse_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    30;

  void Swap(DelMailResponse* other);
  friend void swap(DelMailResponse& a, DelMailResponse& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline DelMailResponse* New() const PROTOBUF_FINAL { return New(NULL); }

  DelMailResponse* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const DelMailResponse& from);
  void MergeFrom(const DelMailResponse& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(DelMailResponse* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // bool Success = 1;
  void clear_success();
  static const int kSuccessFieldNumber = 1;
  bool success() const;
  void set_success(bool value);

  // uint32 Id = 2;
  void clear_id();
  static const int kIdFieldNumber = 2;
  ::google::protobuf::uint32 id() const;
  void set_id(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:DelMailResponse)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool success_;
  ::google::protobuf::uint32 id_;
  mutable int _cached_size_;
  friend struct ::protobuf_Msg_2eproto::TableStruct;
  friend void ::protobuf_Msg_2eproto::InitDefaultsDelMailResponseImpl();
};
// -------------------------------------------------------------------

class ClaimedTaskRequest : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:ClaimedTaskRequest) */ {
 public:
  ClaimedTaskRequest();
  virtual ~ClaimedTaskRequest();

  ClaimedTaskRequest(const ClaimedTaskRequest& from);

  inline ClaimedTaskRequest& operator=(const ClaimedTaskRequest& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ClaimedTaskRequest(ClaimedTaskRequest&& from) noexcept
    : ClaimedTaskRequest() {
    *this = ::std::move(from);
  }

  inline ClaimedTaskRequest& operator=(ClaimedTaskRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const ClaimedTaskRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ClaimedTaskRequest* internal_default_instance() {
    return reinterpret_cast<const ClaimedTaskRequest*>(
               &_ClaimedTaskRequest_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    31;

  void Swap(ClaimedTaskRequest* other);
  friend void swap(ClaimedTaskRequest& a, ClaimedTaskRequest& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ClaimedTaskRequest* New() const PROTOBUF_FINAL { return New(NULL); }

  ClaimedTaskRequest* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const ClaimedTaskRequest& from);
  void MergeFrom(const ClaimedTaskRequest& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(ClaimedTaskRequest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // uint32 Id = 1;
  void clear_id();
  static const int kIdFieldNumber = 1;
  ::google::protobuf::uint32 id() const;
  void set_id(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:ClaimedTaskRequest)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 id_;
  mutable int _cached_size_;
  friend struct ::protobuf_Msg_2eproto::TableStruct;
  friend void ::protobuf_Msg_2eproto::InitDefaultsClaimedTaskRequestImpl();
};
// -------------------------------------------------------------------

class ClaimedTaskResponse : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:ClaimedTaskResponse) */ {
 public:
  ClaimedTaskResponse();
  virtual ~ClaimedTaskResponse();

  ClaimedTaskResponse(const ClaimedTaskResponse& from);

  inline ClaimedTaskResponse& operator=(const ClaimedTaskResponse& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ClaimedTaskResponse(ClaimedTaskResponse&& from) noexcept
    : ClaimedTaskResponse() {
    *this = ::std::move(from);
  }

  inline ClaimedTaskResponse& operator=(ClaimedTaskResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const ClaimedTaskResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ClaimedTaskResponse* internal_default_instance() {
    return reinterpret_cast<const ClaimedTaskResponse*>(
               &_ClaimedTaskResponse_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    32;

  void Swap(ClaimedTaskResponse* other);
  friend void swap(ClaimedTaskResponse& a, ClaimedTaskResponse& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ClaimedTaskResponse* New() const PROTOBUF_FINAL { return New(NULL); }

  ClaimedTaskResponse* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const ClaimedTaskResponse& from);
  void MergeFrom(const ClaimedTaskResponse& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(ClaimedTaskResponse* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // bool Success = 1;
  void clear_success();
  static const int kSuccessFieldNumber = 1;
  bool success() const;
  void set_success(bool value);

  // uint32 Id = 2;
  void clear_id();
  static const int kIdFieldNumber = 2;
  ::google::protobuf::uint32 id() const;
  void set_id(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:ClaimedTaskResponse)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool success_;
  ::google::protobuf::uint32 id_;
  mutable int _cached_size_;
  friend struct ::protobuf_Msg_2eproto::TableStruct;
  friend void ::protobuf_Msg_2eproto::InitDefaultsClaimedTaskResponseImpl();
};
// -------------------------------------------------------------------

class RecTaskAwardRequest : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:RecTaskAwardRequest) */ {
 public:
  RecTaskAwardRequest();
  virtual ~RecTaskAwardRequest();

  RecTaskAwardRequest(const RecTaskAwardRequest& from);

  inline RecTaskAwardRequest& operator=(const RecTaskAwardRequest& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  RecTaskAwardRequest(RecTaskAwardRequest&& from) noexcept
    : RecTaskAwardRequest() {
    *this = ::std::move(from);
  }

  inline RecTaskAwardRequest& operator=(RecTaskAwardRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const RecTaskAwardRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const RecTaskAwardRequest* internal_default_instance() {
    return reinterpret_cast<const RecTaskAwardRequest*>(
               &_RecTaskAwardRequest_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    33;

  void Swap(RecTaskAwardRequest* other);
  friend void swap(RecTaskAwardRequest& a, RecTaskAwardRequest& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline RecTaskAwardRequest* New() const PROTOBUF_FINAL { return New(NULL); }

  RecTaskAwardRequest* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const RecTaskAwardRequest& from);
  void MergeFrom(const RecTaskAwardRequest& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(RecTaskAwardRequest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // uint32 Id = 1;
  void clear_id();
  static const int kIdFieldNumber = 1;
  ::google::protobuf::uint32 id() const;
  void set_id(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:RecTaskAwardRequest)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 id_;
  mutable int _cached_size_;
  friend struct ::protobuf_Msg_2eproto::TableStruct;
  friend void ::protobuf_Msg_2eproto::InitDefaultsRecTaskAwardRequestImpl();
};
// -------------------------------------------------------------------

class RecTaskAwardResponse : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:RecTaskAwardResponse) */ {
 public:
  RecTaskAwardResponse();
  virtual ~RecTaskAwardResponse();

  RecTaskAwardResponse(const RecTaskAwardResponse& from);

  inline RecTaskAwardResponse& operator=(const RecTaskAwardResponse& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  RecTaskAwardResponse(RecTaskAwardResponse&& from) noexcept
    : RecTaskAwardResponse() {
    *this = ::std::move(from);
  }

  inline RecTaskAwardResponse& operator=(RecTaskAwardResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const RecTaskAwardResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const RecTaskAwardResponse* internal_default_instance() {
    return reinterpret_cast<const RecTaskAwardResponse*>(
               &_RecTaskAwardResponse_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    34;

  void Swap(RecTaskAwardResponse* other);
  friend void swap(RecTaskAwardResponse& a, RecTaskAwardResponse& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline RecTaskAwardResponse* New() const PROTOBUF_FINAL { return New(NULL); }

  RecTaskAwardResponse* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const RecTaskAwardResponse& from);
  void MergeFrom(const RecTaskAwardResponse& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(RecTaskAwardResponse* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .Prize prize1 = 1;
  bool has_prize1() const;
  void clear_prize1();
  static const int kPrize1FieldNumber = 1;
  const ::Prize& prize1() const;
  ::Prize* release_prize1();
  ::Prize* mutable_prize1();
  void set_allocated_prize1(::Prize* prize1);

  // .Prize prize2 = 2;
  bool has_prize2() const;
  void clear_prize2();
  static const int kPrize2FieldNumber = 2;
  const ::Prize& prize2() const;
  ::Prize* release_prize2();
  ::Prize* mutable_prize2();
  void set_allocated_prize2(::Prize* prize2);

  // .Prize prize3 = 3;
  bool has_prize3() const;
  void clear_prize3();
  static const int kPrize3FieldNumber = 3;
  const ::Prize& prize3() const;
  ::Prize* release_prize3();
  ::Prize* mutable_prize3();
  void set_allocated_prize3(::Prize* prize3);

  // @@protoc_insertion_point(class_scope:RecTaskAwardResponse)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::Prize* prize1_;
  ::Prize* prize2_;
  ::Prize* prize3_;
  mutable int _cached_size_;
  friend struct ::protobuf_Msg_2eproto::TableStruct;
  friend void ::protobuf_Msg_2eproto::InitDefaultsRecTaskAwardResponseImpl();
};
// -------------------------------------------------------------------

class FriendsRequest : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:FriendsRequest) */ {
 public:
  FriendsRequest();
  virtual ~FriendsRequest();

  FriendsRequest(const FriendsRequest& from);

  inline FriendsRequest& operator=(const FriendsRequest& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  FriendsRequest(FriendsRequest&& from) noexcept
    : FriendsRequest() {
    *this = ::std::move(from);
  }

  inline FriendsRequest& operator=(FriendsRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const FriendsRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const FriendsRequest* internal_default_instance() {
    return reinterpret_cast<const FriendsRequest*>(
               &_FriendsRequest_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    35;

  void Swap(FriendsRequest* other);
  friend void swap(FriendsRequest& a, FriendsRequest& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline FriendsRequest* New() const PROTOBUF_FINAL { return New(NULL); }

  FriendsRequest* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const FriendsRequest& from);
  void MergeFrom(const FriendsRequest& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(FriendsRequest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // bool Friends = 1;
  void clear_friends();
  static const int kFriendsFieldNumber = 1;
  bool friends() const;
  void set_friends(bool value);

  // @@protoc_insertion_point(class_scope:FriendsRequest)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool friends_;
  mutable int _cached_size_;
  friend struct ::protobuf_Msg_2eproto::TableStruct;
  friend void ::protobuf_Msg_2eproto::InitDefaultsFriendsRequestImpl();
};
// -------------------------------------------------------------------

class FriendsResponse : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:FriendsResponse) */ {
 public:
  FriendsResponse();
  virtual ~FriendsResponse();

  FriendsResponse(const FriendsResponse& from);

  inline FriendsResponse& operator=(const FriendsResponse& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  FriendsResponse(FriendsResponse&& from) noexcept
    : FriendsResponse() {
    *this = ::std::move(from);
  }

  inline FriendsResponse& operator=(FriendsResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const FriendsResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const FriendsResponse* internal_default_instance() {
    return reinterpret_cast<const FriendsResponse*>(
               &_FriendsResponse_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    36;

  void Swap(FriendsResponse* other);
  friend void swap(FriendsResponse& a, FriendsResponse& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline FriendsResponse* New() const PROTOBUF_FINAL { return New(NULL); }

  FriendsResponse* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const FriendsResponse& from);
  void MergeFrom(const FriendsResponse& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(FriendsResponse* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string Name = 2;
  void clear_name();
  static const int kNameFieldNumber = 2;
  const ::std::string& name() const;
  void set_name(const ::std::string& value);
  #if LANG_CXX11
  void set_name(::std::string&& value);
  #endif
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  ::std::string* mutable_name();
  ::std::string* release_name();
  void set_allocated_name(::std::string* name);

  // uint32 Id = 1;
  void clear_id();
  static const int kIdFieldNumber = 1;
  ::google::protobuf::uint32 id() const;
  void set_id(::google::protobuf::uint32 value);

  // uint32 Level = 3;
  void clear_level();
  static const int kLevelFieldNumber = 3;
  ::google::protobuf::uint32 level() const;
  void set_level(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:FriendsResponse)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr name_;
  ::google::protobuf::uint32 id_;
  ::google::protobuf::uint32 level_;
  mutable int _cached_size_;
  friend struct ::protobuf_Msg_2eproto::TableStruct;
  friend void ::protobuf_Msg_2eproto::InitDefaultsFriendsResponseImpl();
};
// -------------------------------------------------------------------

class EnemiesRequest : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:EnemiesRequest) */ {
 public:
  EnemiesRequest();
  virtual ~EnemiesRequest();

  EnemiesRequest(const EnemiesRequest& from);

  inline EnemiesRequest& operator=(const EnemiesRequest& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  EnemiesRequest(EnemiesRequest&& from) noexcept
    : EnemiesRequest() {
    *this = ::std::move(from);
  }

  inline EnemiesRequest& operator=(EnemiesRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const EnemiesRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const EnemiesRequest* internal_default_instance() {
    return reinterpret_cast<const EnemiesRequest*>(
               &_EnemiesRequest_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    37;

  void Swap(EnemiesRequest* other);
  friend void swap(EnemiesRequest& a, EnemiesRequest& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline EnemiesRequest* New() const PROTOBUF_FINAL { return New(NULL); }

  EnemiesRequest* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const EnemiesRequest& from);
  void MergeFrom(const EnemiesRequest& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(EnemiesRequest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // bool Enemies = 1;
  void clear_enemies();
  static const int kEnemiesFieldNumber = 1;
  bool enemies() const;
  void set_enemies(bool value);

  // @@protoc_insertion_point(class_scope:EnemiesRequest)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool enemies_;
  mutable int _cached_size_;
  friend struct ::protobuf_Msg_2eproto::TableStruct;
  friend void ::protobuf_Msg_2eproto::InitDefaultsEnemiesRequestImpl();
};
// -------------------------------------------------------------------

class EnemiesResponse : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:EnemiesResponse) */ {
 public:
  EnemiesResponse();
  virtual ~EnemiesResponse();

  EnemiesResponse(const EnemiesResponse& from);

  inline EnemiesResponse& operator=(const EnemiesResponse& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  EnemiesResponse(EnemiesResponse&& from) noexcept
    : EnemiesResponse() {
    *this = ::std::move(from);
  }

  inline EnemiesResponse& operator=(EnemiesResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const EnemiesResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const EnemiesResponse* internal_default_instance() {
    return reinterpret_cast<const EnemiesResponse*>(
               &_EnemiesResponse_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    38;

  void Swap(EnemiesResponse* other);
  friend void swap(EnemiesResponse& a, EnemiesResponse& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline EnemiesResponse* New() const PROTOBUF_FINAL { return New(NULL); }

  EnemiesResponse* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const EnemiesResponse& from);
  void MergeFrom(const EnemiesResponse& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(EnemiesResponse* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string Name = 2;
  void clear_name();
  static const int kNameFieldNumber = 2;
  const ::std::string& name() const;
  void set_name(const ::std::string& value);
  #if LANG_CXX11
  void set_name(::std::string&& value);
  #endif
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  ::std::string* mutable_name();
  ::std::string* release_name();
  void set_allocated_name(::std::string* name);

  // uint32 Id = 1;
  void clear_id();
  static const int kIdFieldNumber = 1;
  ::google::protobuf::uint32 id() const;
  void set_id(::google::protobuf::uint32 value);

  // uint32 Level = 3;
  void clear_level();
  static const int kLevelFieldNumber = 3;
  ::google::protobuf::uint32 level() const;
  void set_level(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:EnemiesResponse)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr name_;
  ::google::protobuf::uint32 id_;
  ::google::protobuf::uint32 level_;
  mutable int _cached_size_;
  friend struct ::protobuf_Msg_2eproto::TableStruct;
  friend void ::protobuf_Msg_2eproto::InitDefaultsEnemiesResponseImpl();
};
// -------------------------------------------------------------------

class PlunderRequest : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:PlunderRequest) */ {
 public:
  PlunderRequest();
  virtual ~PlunderRequest();

  PlunderRequest(const PlunderRequest& from);

  inline PlunderRequest& operator=(const PlunderRequest& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  PlunderRequest(PlunderRequest&& from) noexcept
    : PlunderRequest() {
    *this = ::std::move(from);
  }

  inline PlunderRequest& operator=(PlunderRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const PlunderRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const PlunderRequest* internal_default_instance() {
    return reinterpret_cast<const PlunderRequest*>(
               &_PlunderRequest_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    39;

  void Swap(PlunderRequest* other);
  friend void swap(PlunderRequest& a, PlunderRequest& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline PlunderRequest* New() const PROTOBUF_FINAL { return New(NULL); }

  PlunderRequest* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const PlunderRequest& from);
  void MergeFrom(const PlunderRequest& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(PlunderRequest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // bool Plunder = 1;
  void clear_plunder();
  static const int kPlunderFieldNumber = 1;
  bool plunder() const;
  void set_plunder(bool value);

  // @@protoc_insertion_point(class_scope:PlunderRequest)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool plunder_;
  mutable int _cached_size_;
  friend struct ::protobuf_Msg_2eproto::TableStruct;
  friend void ::protobuf_Msg_2eproto::InitDefaultsPlunderRequestImpl();
};
// -------------------------------------------------------------------

class PlunderResponse : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:PlunderResponse) */ {
 public:
  PlunderResponse();
  virtual ~PlunderResponse();

  PlunderResponse(const PlunderResponse& from);

  inline PlunderResponse& operator=(const PlunderResponse& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  PlunderResponse(PlunderResponse&& from) noexcept
    : PlunderResponse() {
    *this = ::std::move(from);
  }

  inline PlunderResponse& operator=(PlunderResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const PlunderResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const PlunderResponse* internal_default_instance() {
    return reinterpret_cast<const PlunderResponse*>(
               &_PlunderResponse_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    40;

  void Swap(PlunderResponse* other);
  friend void swap(PlunderResponse& a, PlunderResponse& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline PlunderResponse* New() const PROTOBUF_FINAL { return New(NULL); }

  PlunderResponse* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const PlunderResponse& from);
  void MergeFrom(const PlunderResponse& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(PlunderResponse* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // bool Success = 1;
  void clear_success();
  static const int kSuccessFieldNumber = 1;
  bool success() const;
  void set_success(bool value);

  // uint32 Id = 2;
  void clear_id();
  static const int kIdFieldNumber = 2;
  ::google::protobuf::uint32 id() const;
  void set_id(::google::protobuf::uint32 value);

  // uint32 GoldNum = 3;
  void clear_goldnum();
  static const int kGoldNumFieldNumber = 3;
  ::google::protobuf::uint32 goldnum() const;
  void set_goldnum(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:PlunderResponse)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool success_;
  ::google::protobuf::uint32 id_;
  ::google::protobuf::uint32 goldnum_;
  mutable int _cached_size_;
  friend struct ::protobuf_Msg_2eproto::TableStruct;
  friend void ::protobuf_Msg_2eproto::InitDefaultsPlunderResponseImpl();
};
// -------------------------------------------------------------------

class UseItemRequest : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:UseItemRequest) */ {
 public:
  UseItemRequest();
  virtual ~UseItemRequest();

  UseItemRequest(const UseItemRequest& from);

  inline UseItemRequest& operator=(const UseItemRequest& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  UseItemRequest(UseItemRequest&& from) noexcept
    : UseItemRequest() {
    *this = ::std::move(from);
  }

  inline UseItemRequest& operator=(UseItemRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const UseItemRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const UseItemRequest* internal_default_instance() {
    return reinterpret_cast<const UseItemRequest*>(
               &_UseItemRequest_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    41;

  void Swap(UseItemRequest* other);
  friend void swap(UseItemRequest& a, UseItemRequest& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline UseItemRequest* New() const PROTOBUF_FINAL { return New(NULL); }

  UseItemRequest* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const UseItemRequest& from);
  void MergeFrom(const UseItemRequest& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(UseItemRequest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // uint32 Id = 1;
  void clear_id();
  static const int kIdFieldNumber = 1;
  ::google::protobuf::uint32 id() const;
  void set_id(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:UseItemRequest)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 id_;
  mutable int _cached_size_;
  friend struct ::protobuf_Msg_2eproto::TableStruct;
  friend void ::protobuf_Msg_2eproto::InitDefaultsUseItemRequestImpl();
};
// -------------------------------------------------------------------

class UseItemResponse : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:UseItemResponse) */ {
 public:
  UseItemResponse();
  virtual ~UseItemResponse();

  UseItemResponse(const UseItemResponse& from);

  inline UseItemResponse& operator=(const UseItemResponse& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  UseItemResponse(UseItemResponse&& from) noexcept
    : UseItemResponse() {
    *this = ::std::move(from);
  }

  inline UseItemResponse& operator=(UseItemResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const UseItemResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const UseItemResponse* internal_default_instance() {
    return reinterpret_cast<const UseItemResponse*>(
               &_UseItemResponse_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    42;

  void Swap(UseItemResponse* other);
  friend void swap(UseItemResponse& a, UseItemResponse& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline UseItemResponse* New() const PROTOBUF_FINAL { return New(NULL); }

  UseItemResponse* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const UseItemResponse& from);
  void MergeFrom(const UseItemResponse& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(UseItemResponse* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // bool Success = 1;
  void clear_success();
  static const int kSuccessFieldNumber = 1;
  bool success() const;
  void set_success(bool value);

  // uint32 Id = 2;
  void clear_id();
  static const int kIdFieldNumber = 2;
  ::google::protobuf::uint32 id() const;
  void set_id(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:UseItemResponse)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool success_;
  ::google::protobuf::uint32 id_;
  mutable int _cached_size_;
  friend struct ::protobuf_Msg_2eproto::TableStruct;
  friend void ::protobuf_Msg_2eproto::InitDefaultsUseItemResponseImpl();
};
// -------------------------------------------------------------------

class ForgetSkillRequest : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:ForgetSkillRequest) */ {
 public:
  ForgetSkillRequest();
  virtual ~ForgetSkillRequest();

  ForgetSkillRequest(const ForgetSkillRequest& from);

  inline ForgetSkillRequest& operator=(const ForgetSkillRequest& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ForgetSkillRequest(ForgetSkillRequest&& from) noexcept
    : ForgetSkillRequest() {
    *this = ::std::move(from);
  }

  inline ForgetSkillRequest& operator=(ForgetSkillRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const ForgetSkillRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ForgetSkillRequest* internal_default_instance() {
    return reinterpret_cast<const ForgetSkillRequest*>(
               &_ForgetSkillRequest_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    43;

  void Swap(ForgetSkillRequest* other);
  friend void swap(ForgetSkillRequest& a, ForgetSkillRequest& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ForgetSkillRequest* New() const PROTOBUF_FINAL { return New(NULL); }

  ForgetSkillRequest* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const ForgetSkillRequest& from);
  void MergeFrom(const ForgetSkillRequest& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(ForgetSkillRequest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // uint32 skillId = 1;
  void clear_skillid();
  static const int kSkillIdFieldNumber = 1;
  ::google::protobuf::uint32 skillid() const;
  void set_skillid(::google::protobuf::uint32 value);

  // uint32 elfinId = 2;
  void clear_elfinid();
  static const int kElfinIdFieldNumber = 2;
  ::google::protobuf::uint32 elfinid() const;
  void set_elfinid(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:ForgetSkillRequest)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 skillid_;
  ::google::protobuf::uint32 elfinid_;
  mutable int _cached_size_;
  friend struct ::protobuf_Msg_2eproto::TableStruct;
  friend void ::protobuf_Msg_2eproto::InitDefaultsForgetSkillRequestImpl();
};
// -------------------------------------------------------------------

class ForgetSkillResponse : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:ForgetSkillResponse) */ {
 public:
  ForgetSkillResponse();
  virtual ~ForgetSkillResponse();

  ForgetSkillResponse(const ForgetSkillResponse& from);

  inline ForgetSkillResponse& operator=(const ForgetSkillResponse& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ForgetSkillResponse(ForgetSkillResponse&& from) noexcept
    : ForgetSkillResponse() {
    *this = ::std::move(from);
  }

  inline ForgetSkillResponse& operator=(ForgetSkillResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const ForgetSkillResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ForgetSkillResponse* internal_default_instance() {
    return reinterpret_cast<const ForgetSkillResponse*>(
               &_ForgetSkillResponse_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    44;

  void Swap(ForgetSkillResponse* other);
  friend void swap(ForgetSkillResponse& a, ForgetSkillResponse& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ForgetSkillResponse* New() const PROTOBUF_FINAL { return New(NULL); }

  ForgetSkillResponse* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const ForgetSkillResponse& from);
  void MergeFrom(const ForgetSkillResponse& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(ForgetSkillResponse* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // bool Success = 1;
  void clear_success();
  static const int kSuccessFieldNumber = 1;
  bool success() const;
  void set_success(bool value);

  // uint32 skillId = 2;
  void clear_skillid();
  static const int kSkillIdFieldNumber = 2;
  ::google::protobuf::uint32 skillid() const;
  void set_skillid(::google::protobuf::uint32 value);

  // uint32 elfinId = 3;
  void clear_elfinid();
  static const int kElfinIdFieldNumber = 3;
  ::google::protobuf::uint32 elfinid() const;
  void set_elfinid(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:ForgetSkillResponse)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool success_;
  ::google::protobuf::uint32 skillid_;
  ::google::protobuf::uint32 elfinid_;
  mutable int _cached_size_;
  friend struct ::protobuf_Msg_2eproto::TableStruct;
  friend void ::protobuf_Msg_2eproto::InitDefaultsForgetSkillResponseImpl();
};
// -------------------------------------------------------------------

class SettleAccountRequest : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:SettleAccountRequest) */ {
 public:
  SettleAccountRequest();
  virtual ~SettleAccountRequest();

  SettleAccountRequest(const SettleAccountRequest& from);

  inline SettleAccountRequest& operator=(const SettleAccountRequest& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  SettleAccountRequest(SettleAccountRequest&& from) noexcept
    : SettleAccountRequest() {
    *this = ::std::move(from);
  }

  inline SettleAccountRequest& operator=(SettleAccountRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const SettleAccountRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SettleAccountRequest* internal_default_instance() {
    return reinterpret_cast<const SettleAccountRequest*>(
               &_SettleAccountRequest_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    45;

  void Swap(SettleAccountRequest* other);
  friend void swap(SettleAccountRequest& a, SettleAccountRequest& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline SettleAccountRequest* New() const PROTOBUF_FINAL { return New(NULL); }

  SettleAccountRequest* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const SettleAccountRequest& from);
  void MergeFrom(const SettleAccountRequest& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(SettleAccountRequest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // uint32 ItemNum = 1;
  void clear_itemnum();
  static const int kItemNumFieldNumber = 1;
  ::google::protobuf::uint32 itemnum() const;
  void set_itemnum(::google::protobuf::uint32 value);

  // uint32 Number = 2;
  void clear_number();
  static const int kNumberFieldNumber = 2;
  ::google::protobuf::uint32 number() const;
  void set_number(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:SettleAccountRequest)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 itemnum_;
  ::google::protobuf::uint32 number_;
  mutable int _cached_size_;
  friend struct ::protobuf_Msg_2eproto::TableStruct;
  friend void ::protobuf_Msg_2eproto::InitDefaultsSettleAccountRequestImpl();
};
// -------------------------------------------------------------------

class SettleAccountResponse : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:SettleAccountResponse) */ {
 public:
  SettleAccountResponse();
  virtual ~SettleAccountResponse();

  SettleAccountResponse(const SettleAccountResponse& from);

  inline SettleAccountResponse& operator=(const SettleAccountResponse& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  SettleAccountResponse(SettleAccountResponse&& from) noexcept
    : SettleAccountResponse() {
    *this = ::std::move(from);
  }

  inline SettleAccountResponse& operator=(SettleAccountResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const SettleAccountResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SettleAccountResponse* internal_default_instance() {
    return reinterpret_cast<const SettleAccountResponse*>(
               &_SettleAccountResponse_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    46;

  void Swap(SettleAccountResponse* other);
  friend void swap(SettleAccountResponse& a, SettleAccountResponse& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline SettleAccountResponse* New() const PROTOBUF_FINAL { return New(NULL); }

  SettleAccountResponse* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const SettleAccountResponse& from);
  void MergeFrom(const SettleAccountResponse& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(SettleAccountResponse* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // bool success = 1;
  void clear_success();
  static const int kSuccessFieldNumber = 1;
  bool success() const;
  void set_success(bool value);

  // uint32 Id = 2;
  void clear_id();
  static const int kIdFieldNumber = 2;
  ::google::protobuf::uint32 id() const;
  void set_id(::google::protobuf::uint32 value);

  // uint32 Number = 3;
  void clear_number();
  static const int kNumberFieldNumber = 3;
  ::google::protobuf::uint32 number() const;
  void set_number(::google::protobuf::uint32 value);

  // uint32 price = 4;
  void clear_price();
  static const int kPriceFieldNumber = 4;
  ::google::protobuf::uint32 price() const;
  void set_price(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:SettleAccountResponse)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool success_;
  ::google::protobuf::uint32 id_;
  ::google::protobuf::uint32 number_;
  ::google::protobuf::uint32 price_;
  mutable int _cached_size_;
  friend struct ::protobuf_Msg_2eproto::TableStruct;
  friend void ::protobuf_Msg_2eproto::InitDefaultsSettleAccountResponseImpl();
};
// -------------------------------------------------------------------

class RankingRequest : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:RankingRequest) */ {
 public:
  RankingRequest();
  virtual ~RankingRequest();

  RankingRequest(const RankingRequest& from);

  inline RankingRequest& operator=(const RankingRequest& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  RankingRequest(RankingRequest&& from) noexcept
    : RankingRequest() {
    *this = ::std::move(from);
  }

  inline RankingRequest& operator=(RankingRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const RankingRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const RankingRequest* internal_default_instance() {
    return reinterpret_cast<const RankingRequest*>(
               &_RankingRequest_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    47;

  void Swap(RankingRequest* other);
  friend void swap(RankingRequest& a, RankingRequest& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline RankingRequest* New() const PROTOBUF_FINAL { return New(NULL); }

  RankingRequest* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const RankingRequest& from);
  void MergeFrom(const RankingRequest& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(RankingRequest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // bool Ranking = 1;
  void clear_ranking();
  static const int kRankingFieldNumber = 1;
  bool ranking() const;
  void set_ranking(bool value);

  // @@protoc_insertion_point(class_scope:RankingRequest)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool ranking_;
  mutable int _cached_size_;
  friend struct ::protobuf_Msg_2eproto::TableStruct;
  friend void ::protobuf_Msg_2eproto::InitDefaultsRankingRequestImpl();
};
// -------------------------------------------------------------------

class RankingResponse : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:RankingResponse) */ {
 public:
  RankingResponse();
  virtual ~RankingResponse();

  RankingResponse(const RankingResponse& from);

  inline RankingResponse& operator=(const RankingResponse& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  RankingResponse(RankingResponse&& from) noexcept
    : RankingResponse() {
    *this = ::std::move(from);
  }

  inline RankingResponse& operator=(RankingResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const RankingResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const RankingResponse* internal_default_instance() {
    return reinterpret_cast<const RankingResponse*>(
               &_RankingResponse_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    48;

  void Swap(RankingResponse* other);
  friend void swap(RankingResponse& a, RankingResponse& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline RankingResponse* New() const PROTOBUF_FINAL { return New(NULL); }

  RankingResponse* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const RankingResponse& from);
  void MergeFrom(const RankingResponse& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(RankingResponse* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string Name = 2;
  void clear_name();
  static const int kNameFieldNumber = 2;
  const ::std::string& name() const;
  void set_name(const ::std::string& value);
  #if LANG_CXX11
  void set_name(::std::string&& value);
  #endif
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  ::std::string* mutable_name();
  ::std::string* release_name();
  void set_allocated_name(::std::string* name);

  // uint32 Id = 1;
  void clear_id();
  static const int kIdFieldNumber = 1;
  ::google::protobuf::uint32 id() const;
  void set_id(::google::protobuf::uint32 value);

  // uint32 Level = 3;
  void clear_level();
  static const int kLevelFieldNumber = 3;
  ::google::protobuf::uint32 level() const;
  void set_level(::google::protobuf::uint32 value);

  // uint32 Ranking = 4;
  void clear_ranking();
  static const int kRankingFieldNumber = 4;
  ::google::protobuf::uint32 ranking() const;
  void set_ranking(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:RankingResponse)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr name_;
  ::google::protobuf::uint32 id_;
  ::google::protobuf::uint32 level_;
  ::google::protobuf::uint32 ranking_;
  mutable int _cached_size_;
  friend struct ::protobuf_Msg_2eproto::TableStruct;
  friend void ::protobuf_Msg_2eproto::InitDefaultsRankingResponseImpl();
};
// -------------------------------------------------------------------

class RegisterRequest : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:RegisterRequest) */ {
 public:
  RegisterRequest();
  virtual ~RegisterRequest();

  RegisterRequest(const RegisterRequest& from);

  inline RegisterRequest& operator=(const RegisterRequest& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  RegisterRequest(RegisterRequest&& from) noexcept
    : RegisterRequest() {
    *this = ::std::move(from);
  }

  inline RegisterRequest& operator=(RegisterRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const RegisterRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const RegisterRequest* internal_default_instance() {
    return reinterpret_cast<const RegisterRequest*>(
               &_RegisterRequest_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    49;

  void Swap(RegisterRequest* other);
  friend void swap(RegisterRequest& a, RegisterRequest& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline RegisterRequest* New() const PROTOBUF_FINAL { return New(NULL); }

  RegisterRequest* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const RegisterRequest& from);
  void MergeFrom(const RegisterRequest& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(RegisterRequest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string Account = 1;
  void clear_account();
  static const int kAccountFieldNumber = 1;
  const ::std::string& account() const;
  void set_account(const ::std::string& value);
  #if LANG_CXX11
  void set_account(::std::string&& value);
  #endif
  void set_account(const char* value);
  void set_account(const char* value, size_t size);
  ::std::string* mutable_account();
  ::std::string* release_account();
  void set_allocated_account(::std::string* account);

  // string Passwd = 2;
  void clear_passwd();
  static const int kPasswdFieldNumber = 2;
  const ::std::string& passwd() const;
  void set_passwd(const ::std::string& value);
  #if LANG_CXX11
  void set_passwd(::std::string&& value);
  #endif
  void set_passwd(const char* value);
  void set_passwd(const char* value, size_t size);
  ::std::string* mutable_passwd();
  ::std::string* release_passwd();
  void set_allocated_passwd(::std::string* passwd);

  // string Name = 3;
  void clear_name();
  static const int kNameFieldNumber = 3;
  const ::std::string& name() const;
  void set_name(const ::std::string& value);
  #if LANG_CXX11
  void set_name(::std::string&& value);
  #endif
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  ::std::string* mutable_name();
  ::std::string* release_name();
  void set_allocated_name(::std::string* name);

  // @@protoc_insertion_point(class_scope:RegisterRequest)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr account_;
  ::google::protobuf::internal::ArenaStringPtr passwd_;
  ::google::protobuf::internal::ArenaStringPtr name_;
  mutable int _cached_size_;
  friend struct ::protobuf_Msg_2eproto::TableStruct;
  friend void ::protobuf_Msg_2eproto::InitDefaultsRegisterRequestImpl();
};
// -------------------------------------------------------------------

class RegisterResponse : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:RegisterResponse) */ {
 public:
  RegisterResponse();
  virtual ~RegisterResponse();

  RegisterResponse(const RegisterResponse& from);

  inline RegisterResponse& operator=(const RegisterResponse& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  RegisterResponse(RegisterResponse&& from) noexcept
    : RegisterResponse() {
    *this = ::std::move(from);
  }

  inline RegisterResponse& operator=(RegisterResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const RegisterResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const RegisterResponse* internal_default_instance() {
    return reinterpret_cast<const RegisterResponse*>(
               &_RegisterResponse_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    50;

  void Swap(RegisterResponse* other);
  friend void swap(RegisterResponse& a, RegisterResponse& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline RegisterResponse* New() const PROTOBUF_FINAL { return New(NULL); }

  RegisterResponse* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const RegisterResponse& from);
  void MergeFrom(const RegisterResponse& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(RegisterResponse* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // bool Success = 1;
  void clear_success();
  static const int kSuccessFieldNumber = 1;
  bool success() const;
  void set_success(bool value);

  // @@protoc_insertion_point(class_scope:RegisterResponse)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool success_;
  mutable int _cached_size_;
  friend struct ::protobuf_Msg_2eproto::TableStruct;
  friend void ::protobuf_Msg_2eproto::InitDefaultsRegisterResponseImpl();
};
// -------------------------------------------------------------------

class SolarUpgradeRequest : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:SolarUpgradeRequest) */ {
 public:
  SolarUpgradeRequest();
  virtual ~SolarUpgradeRequest();

  SolarUpgradeRequest(const SolarUpgradeRequest& from);

  inline SolarUpgradeRequest& operator=(const SolarUpgradeRequest& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  SolarUpgradeRequest(SolarUpgradeRequest&& from) noexcept
    : SolarUpgradeRequest() {
    *this = ::std::move(from);
  }

  inline SolarUpgradeRequest& operator=(SolarUpgradeRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const SolarUpgradeRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SolarUpgradeRequest* internal_default_instance() {
    return reinterpret_cast<const SolarUpgradeRequest*>(
               &_SolarUpgradeRequest_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    51;

  void Swap(SolarUpgradeRequest* other);
  friend void swap(SolarUpgradeRequest& a, SolarUpgradeRequest& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline SolarUpgradeRequest* New() const PROTOBUF_FINAL { return New(NULL); }

  SolarUpgradeRequest* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const SolarUpgradeRequest& from);
  void MergeFrom(const SolarUpgradeRequest& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(SolarUpgradeRequest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // bool Solar = 1;
  void clear_solar();
  static const int kSolarFieldNumber = 1;
  bool solar() const;
  void set_solar(bool value);

  // @@protoc_insertion_point(class_scope:SolarUpgradeRequest)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool solar_;
  mutable int _cached_size_;
  friend struct ::protobuf_Msg_2eproto::TableStruct;
  friend void ::protobuf_Msg_2eproto::InitDefaultsSolarUpgradeRequestImpl();
};
// -------------------------------------------------------------------

class SolarUpgradeResponse : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:SolarUpgradeResponse) */ {
 public:
  SolarUpgradeResponse();
  virtual ~SolarUpgradeResponse();

  SolarUpgradeResponse(const SolarUpgradeResponse& from);

  inline SolarUpgradeResponse& operator=(const SolarUpgradeResponse& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  SolarUpgradeResponse(SolarUpgradeResponse&& from) noexcept
    : SolarUpgradeResponse() {
    *this = ::std::move(from);
  }

  inline SolarUpgradeResponse& operator=(SolarUpgradeResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const SolarUpgradeResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SolarUpgradeResponse* internal_default_instance() {
    return reinterpret_cast<const SolarUpgradeResponse*>(
               &_SolarUpgradeResponse_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    52;

  void Swap(SolarUpgradeResponse* other);
  friend void swap(SolarUpgradeResponse& a, SolarUpgradeResponse& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline SolarUpgradeResponse* New() const PROTOBUF_FINAL { return New(NULL); }

  SolarUpgradeResponse* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const SolarUpgradeResponse& from);
  void MergeFrom(const SolarUpgradeResponse& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(SolarUpgradeResponse* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // bool Solar = 1;
  void clear_solar();
  static const int kSolarFieldNumber = 1;
  bool solar() const;
  void set_solar(bool value);

  // @@protoc_insertion_point(class_scope:SolarUpgradeResponse)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool solar_;
  mutable int _cached_size_;
  friend struct ::protobuf_Msg_2eproto::TableStruct;
  friend void ::protobuf_Msg_2eproto::InitDefaultsSolarUpgradeResponseImpl();
};
// -------------------------------------------------------------------

class SkillUpgradeRequest : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:SkillUpgradeRequest) */ {
 public:
  SkillUpgradeRequest();
  virtual ~SkillUpgradeRequest();

  SkillUpgradeRequest(const SkillUpgradeRequest& from);

  inline SkillUpgradeRequest& operator=(const SkillUpgradeRequest& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  SkillUpgradeRequest(SkillUpgradeRequest&& from) noexcept
    : SkillUpgradeRequest() {
    *this = ::std::move(from);
  }

  inline SkillUpgradeRequest& operator=(SkillUpgradeRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const SkillUpgradeRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SkillUpgradeRequest* internal_default_instance() {
    return reinterpret_cast<const SkillUpgradeRequest*>(
               &_SkillUpgradeRequest_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    53;

  void Swap(SkillUpgradeRequest* other);
  friend void swap(SkillUpgradeRequest& a, SkillUpgradeRequest& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline SkillUpgradeRequest* New() const PROTOBUF_FINAL { return New(NULL); }

  SkillUpgradeRequest* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const SkillUpgradeRequest& from);
  void MergeFrom(const SkillUpgradeRequest& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(SkillUpgradeRequest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // uint32 ElfinID = 1;
  void clear_elfinid();
  static const int kElfinIDFieldNumber = 1;
  ::google::protobuf::uint32 elfinid() const;
  void set_elfinid(::google::protobuf::uint32 value);

  // uint32 SkillID = 2;
  void clear_skillid();
  static const int kSkillIDFieldNumber = 2;
  ::google::protobuf::uint32 skillid() const;
  void set_skillid(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:SkillUpgradeRequest)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 elfinid_;
  ::google::protobuf::uint32 skillid_;
  mutable int _cached_size_;
  friend struct ::protobuf_Msg_2eproto::TableStruct;
  friend void ::protobuf_Msg_2eproto::InitDefaultsSkillUpgradeRequestImpl();
};
// -------------------------------------------------------------------

class SkillUpgradeResponse : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:SkillUpgradeResponse) */ {
 public:
  SkillUpgradeResponse();
  virtual ~SkillUpgradeResponse();

  SkillUpgradeResponse(const SkillUpgradeResponse& from);

  inline SkillUpgradeResponse& operator=(const SkillUpgradeResponse& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  SkillUpgradeResponse(SkillUpgradeResponse&& from) noexcept
    : SkillUpgradeResponse() {
    *this = ::std::move(from);
  }

  inline SkillUpgradeResponse& operator=(SkillUpgradeResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const SkillUpgradeResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SkillUpgradeResponse* internal_default_instance() {
    return reinterpret_cast<const SkillUpgradeResponse*>(
               &_SkillUpgradeResponse_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    54;

  void Swap(SkillUpgradeResponse* other);
  friend void swap(SkillUpgradeResponse& a, SkillUpgradeResponse& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline SkillUpgradeResponse* New() const PROTOBUF_FINAL { return New(NULL); }

  SkillUpgradeResponse* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const SkillUpgradeResponse& from);
  void MergeFrom(const SkillUpgradeResponse& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(SkillUpgradeResponse* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // bool Success = 1;
  void clear_success();
  static const int kSuccessFieldNumber = 1;
  bool success() const;
  void set_success(bool value);

  // uint32 ElfinID = 2;
  void clear_elfinid();
  static const int kElfinIDFieldNumber = 2;
  ::google::protobuf::uint32 elfinid() const;
  void set_elfinid(::google::protobuf::uint32 value);

  // uint32 SkillID = 3;
  void clear_skillid();
  static const int kSkillIDFieldNumber = 3;
  ::google::protobuf::uint32 skillid() const;
  void set_skillid(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:SkillUpgradeResponse)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool success_;
  ::google::protobuf::uint32 elfinid_;
  ::google::protobuf::uint32 skillid_;
  mutable int _cached_size_;
  friend struct ::protobuf_Msg_2eproto::TableStruct;
  friend void ::protobuf_Msg_2eproto::InitDefaultsSkillUpgradeResponseImpl();
};
// -------------------------------------------------------------------

class TreeUpgradeRequest : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:TreeUpgradeRequest) */ {
 public:
  TreeUpgradeRequest();
  virtual ~TreeUpgradeRequest();

  TreeUpgradeRequest(const TreeUpgradeRequest& from);

  inline TreeUpgradeRequest& operator=(const TreeUpgradeRequest& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  TreeUpgradeRequest(TreeUpgradeRequest&& from) noexcept
    : TreeUpgradeRequest() {
    *this = ::std::move(from);
  }

  inline TreeUpgradeRequest& operator=(TreeUpgradeRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const TreeUpgradeRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const TreeUpgradeRequest* internal_default_instance() {
    return reinterpret_cast<const TreeUpgradeRequest*>(
               &_TreeUpgradeRequest_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    55;

  void Swap(TreeUpgradeRequest* other);
  friend void swap(TreeUpgradeRequest& a, TreeUpgradeRequest& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline TreeUpgradeRequest* New() const PROTOBUF_FINAL { return New(NULL); }

  TreeUpgradeRequest* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const TreeUpgradeRequest& from);
  void MergeFrom(const TreeUpgradeRequest& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(TreeUpgradeRequest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // bool Tree = 1;
  void clear_tree();
  static const int kTreeFieldNumber = 1;
  bool tree() const;
  void set_tree(bool value);

  // @@protoc_insertion_point(class_scope:TreeUpgradeRequest)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool tree_;
  mutable int _cached_size_;
  friend struct ::protobuf_Msg_2eproto::TableStruct;
  friend void ::protobuf_Msg_2eproto::InitDefaultsTreeUpgradeRequestImpl();
};
// -------------------------------------------------------------------

class TreeUpgradeResponse : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:TreeUpgradeResponse) */ {
 public:
  TreeUpgradeResponse();
  virtual ~TreeUpgradeResponse();

  TreeUpgradeResponse(const TreeUpgradeResponse& from);

  inline TreeUpgradeResponse& operator=(const TreeUpgradeResponse& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  TreeUpgradeResponse(TreeUpgradeResponse&& from) noexcept
    : TreeUpgradeResponse() {
    *this = ::std::move(from);
  }

  inline TreeUpgradeResponse& operator=(TreeUpgradeResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const TreeUpgradeResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const TreeUpgradeResponse* internal_default_instance() {
    return reinterpret_cast<const TreeUpgradeResponse*>(
               &_TreeUpgradeResponse_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    56;

  void Swap(TreeUpgradeResponse* other);
  friend void swap(TreeUpgradeResponse& a, TreeUpgradeResponse& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline TreeUpgradeResponse* New() const PROTOBUF_FINAL { return New(NULL); }

  TreeUpgradeResponse* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const TreeUpgradeResponse& from);
  void MergeFrom(const TreeUpgradeResponse& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(TreeUpgradeResponse* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // bool Success = 1;
  void clear_success();
  static const int kSuccessFieldNumber = 1;
  bool success() const;
  void set_success(bool value);

  // @@protoc_insertion_point(class_scope:TreeUpgradeResponse)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool success_;
  mutable int _cached_size_;
  friend struct ::protobuf_Msg_2eproto::TableStruct;
  friend void ::protobuf_Msg_2eproto::InitDefaultsTreeUpgradeResponseImpl();
};
// -------------------------------------------------------------------

class ElfinUpgradeRequest : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:ElfinUpgradeRequest) */ {
 public:
  ElfinUpgradeRequest();
  virtual ~ElfinUpgradeRequest();

  ElfinUpgradeRequest(const ElfinUpgradeRequest& from);

  inline ElfinUpgradeRequest& operator=(const ElfinUpgradeRequest& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ElfinUpgradeRequest(ElfinUpgradeRequest&& from) noexcept
    : ElfinUpgradeRequest() {
    *this = ::std::move(from);
  }

  inline ElfinUpgradeRequest& operator=(ElfinUpgradeRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const ElfinUpgradeRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ElfinUpgradeRequest* internal_default_instance() {
    return reinterpret_cast<const ElfinUpgradeRequest*>(
               &_ElfinUpgradeRequest_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    57;

  void Swap(ElfinUpgradeRequest* other);
  friend void swap(ElfinUpgradeRequest& a, ElfinUpgradeRequest& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ElfinUpgradeRequest* New() const PROTOBUF_FINAL { return New(NULL); }

  ElfinUpgradeRequest* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const ElfinUpgradeRequest& from);
  void MergeFrom(const ElfinUpgradeRequest& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(ElfinUpgradeRequest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // uint32 ElfinID = 1;
  void clear_elfinid();
  static const int kElfinIDFieldNumber = 1;
  ::google::protobuf::uint32 elfinid() const;
  void set_elfinid(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:ElfinUpgradeRequest)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 elfinid_;
  mutable int _cached_size_;
  friend struct ::protobuf_Msg_2eproto::TableStruct;
  friend void ::protobuf_Msg_2eproto::InitDefaultsElfinUpgradeRequestImpl();
};
// -------------------------------------------------------------------

class ElfinUpgradeResponse : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:ElfinUpgradeResponse) */ {
 public:
  ElfinUpgradeResponse();
  virtual ~ElfinUpgradeResponse();

  ElfinUpgradeResponse(const ElfinUpgradeResponse& from);

  inline ElfinUpgradeResponse& operator=(const ElfinUpgradeResponse& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ElfinUpgradeResponse(ElfinUpgradeResponse&& from) noexcept
    : ElfinUpgradeResponse() {
    *this = ::std::move(from);
  }

  inline ElfinUpgradeResponse& operator=(ElfinUpgradeResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const ElfinUpgradeResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ElfinUpgradeResponse* internal_default_instance() {
    return reinterpret_cast<const ElfinUpgradeResponse*>(
               &_ElfinUpgradeResponse_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    58;

  void Swap(ElfinUpgradeResponse* other);
  friend void swap(ElfinUpgradeResponse& a, ElfinUpgradeResponse& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ElfinUpgradeResponse* New() const PROTOBUF_FINAL { return New(NULL); }

  ElfinUpgradeResponse* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const ElfinUpgradeResponse& from);
  void MergeFrom(const ElfinUpgradeResponse& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(ElfinUpgradeResponse* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // bool Success = 1;
  void clear_success();
  static const int kSuccessFieldNumber = 1;
  bool success() const;
  void set_success(bool value);

  // uint32 ElfinID = 2;
  void clear_elfinid();
  static const int kElfinIDFieldNumber = 2;
  ::google::protobuf::uint32 elfinid() const;
  void set_elfinid(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:ElfinUpgradeResponse)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool success_;
  ::google::protobuf::uint32 elfinid_;
  mutable int _cached_size_;
  friend struct ::protobuf_Msg_2eproto::TableStruct;
  friend void ::protobuf_Msg_2eproto::InitDefaultsElfinUpgradeResponseImpl();
};
// -------------------------------------------------------------------

class Request : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:Request) */ {
 public:
  Request();
  virtual ~Request();

  Request(const Request& from);

  inline Request& operator=(const Request& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Request(Request&& from) noexcept
    : Request() {
    *this = ::std::move(from);
  }

  inline Request& operator=(Request&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const Request& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Request* internal_default_instance() {
    return reinterpret_cast<const Request*>(
               &_Request_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    59;

  void Swap(Request* other);
  friend void swap(Request& a, Request& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Request* New() const PROTOBUF_FINAL { return New(NULL); }

  Request* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const Request& from);
  void MergeFrom(const Request& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(Request* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .LoginRequest Login = 1;
  bool has_login() const;
  void clear_login();
  static const int kLoginFieldNumber = 1;
  const ::LoginRequest& login() const;
  ::LoginRequest* release_login();
  ::LoginRequest* mutable_login();
  void set_allocated_login(::LoginRequest* login);

  // .ElfinRequest Elfin = 2;
  bool has_elfin() const;
  void clear_elfin();
  static const int kElfinFieldNumber = 2;
  const ::ElfinRequest& elfin() const;
  ::ElfinRequest* release_elfin();
  ::ElfinRequest* mutable_elfin();
  void set_allocated_elfin(::ElfinRequest* elfin);

  // .RollRequest Roll = 3;
  bool has_roll() const;
  void clear_roll();
  static const int kRollFieldNumber = 3;
  const ::RollRequest& roll() const;
  ::RollRequest* release_roll();
  ::RollRequest* mutable_roll();
  void set_allocated_roll(::RollRequest* roll);

  // .TreeRequest Tree = 4;
  bool has_tree() const;
  void clear_tree();
  static const int kTreeFieldNumber = 4;
  const ::TreeRequest& tree() const;
  ::TreeRequest* release_tree();
  ::TreeRequest* mutable_tree();
  void set_allocated_tree(::TreeRequest* tree);

  // .ResourceRequest Resource = 5;
  bool has_resource() const;
  void clear_resource();
  static const int kResourceFieldNumber = 5;
  const ::ResourceRequest& resource() const;
  ::ResourceRequest* release_resource();
  ::ResourceRequest* mutable_resource();
  void set_allocated_resource(::ResourceRequest* resource);

  // .TasksRequest Tasks = 6;
  bool has_tasks() const;
  void clear_tasks();
  static const int kTasksFieldNumber = 6;
  const ::TasksRequest& tasks() const;
  ::TasksRequest* release_tasks();
  ::TasksRequest* mutable_tasks();
  void set_allocated_tasks(::TasksRequest* tasks);

  // .MailsRequest Mails = 7;
  bool has_mails() const;
  void clear_mails();
  static const int kMailsFieldNumber = 7;
  const ::MailsRequest& mails() const;
  ::MailsRequest* release_mails();
  ::MailsRequest* mutable_mails();
  void set_allocated_mails(::MailsRequest* mails);

  // .SunRequest Sun = 8;
  bool has_sun() const;
  void clear_sun();
  static const int kSunFieldNumber = 8;
  const ::SunRequest& sun() const;
  ::SunRequest* release_sun();
  ::SunRequest* mutable_sun();
  void set_allocated_sun(::SunRequest* sun);

  // .TreeEnchantmentRequest TreeEnchantment = 9;
  bool has_treeenchantment() const;
  void clear_treeenchantment();
  static const int kTreeEnchantmentFieldNumber = 9;
  const ::TreeEnchantmentRequest& treeenchantment() const;
  ::TreeEnchantmentRequest* release_treeenchantment();
  ::TreeEnchantmentRequest* mutable_treeenchantment();
  void set_allocated_treeenchantment(::TreeEnchantmentRequest* treeenchantment);

  // .StoreAllRequest StoreAll = 10;
  bool has_storeall() const;
  void clear_storeall();
  static const int kStoreAllFieldNumber = 10;
  const ::StoreAllRequest& storeall() const;
  ::StoreAllRequest* release_storeall();
  ::StoreAllRequest* mutable_storeall();
  void set_allocated_storeall(::StoreAllRequest* storeall);

  // .StoreEquRequest StoreEqu = 11;
  bool has_storeequ() const;
  void clear_storeequ();
  static const int kStoreEquFieldNumber = 11;
  const ::StoreEquRequest& storeequ() const;
  ::StoreEquRequest* release_storeequ();
  ::StoreEquRequest* mutable_storeequ();
  void set_allocated_storeequ(::StoreEquRequest* storeequ);

  // .StoreWaterRequest StoreWater = 12;
  bool has_storewater() const;
  void clear_storewater();
  static const int kStoreWaterFieldNumber = 12;
  const ::StoreWaterRequest& storewater() const;
  ::StoreWaterRequest* release_storewater();
  ::StoreWaterRequest* mutable_storewater();
  void set_allocated_storewater(::StoreWaterRequest* storewater);

  // .StoreSpePropsRequest StoreSpeProps = 13;
  bool has_storespeprops() const;
  void clear_storespeprops();
  static const int kStoreSpePropsFieldNumber = 13;
  const ::StoreSpePropsRequest& storespeprops() const;
  ::StoreSpePropsRequest* release_storespeprops();
  ::StoreSpePropsRequest* mutable_storespeprops();
  void set_allocated_storespeprops(::StoreSpePropsRequest* storespeprops);

  // .WarehouseRequest Warehouse = 14;
  bool has_warehouse() const;
  void clear_warehouse();
  static const int kWarehouseFieldNumber = 14;
  const ::WarehouseRequest& warehouse() const;
  ::WarehouseRequest* release_warehouse();
  ::WarehouseRequest* mutable_warehouse();
  void set_allocated_warehouse(::WarehouseRequest* warehouse);

  // .DelMailRequest DelMail = 15;
  bool has_delmail() const;
  void clear_delmail();
  static const int kDelMailFieldNumber = 15;
  const ::DelMailRequest& delmail() const;
  ::DelMailRequest* release_delmail();
  ::DelMailRequest* mutable_delmail();
  void set_allocated_delmail(::DelMailRequest* delmail);

  // .ClaimedTaskRequest ClaimedTask = 16;
  bool has_claimedtask() const;
  void clear_claimedtask();
  static const int kClaimedTaskFieldNumber = 16;
  const ::ClaimedTaskRequest& claimedtask() const;
  ::ClaimedTaskRequest* release_claimedtask();
  ::ClaimedTaskRequest* mutable_claimedtask();
  void set_allocated_claimedtask(::ClaimedTaskRequest* claimedtask);

  // .RecTaskAwardRequest RecTaskAward = 17;
  bool has_rectaskaward() const;
  void clear_rectaskaward();
  static const int kRecTaskAwardFieldNumber = 17;
  const ::RecTaskAwardRequest& rectaskaward() const;
  ::RecTaskAwardRequest* release_rectaskaward();
  ::RecTaskAwardRequest* mutable_rectaskaward();
  void set_allocated_rectaskaward(::RecTaskAwardRequest* rectaskaward);

  // .FriendsRequest Friends = 18;
  bool has_friends() const;
  void clear_friends();
  static const int kFriendsFieldNumber = 18;
  const ::FriendsRequest& friends() const;
  ::FriendsRequest* release_friends();
  ::FriendsRequest* mutable_friends();
  void set_allocated_friends(::FriendsRequest* friends);

  // .EnemiesRequest Enemies = 19;
  bool has_enemies() const;
  void clear_enemies();
  static const int kEnemiesFieldNumber = 19;
  const ::EnemiesRequest& enemies() const;
  ::EnemiesRequest* release_enemies();
  ::EnemiesRequest* mutable_enemies();
  void set_allocated_enemies(::EnemiesRequest* enemies);

  // .PlunderRequest Plunder = 20;
  bool has_plunder() const;
  void clear_plunder();
  static const int kPlunderFieldNumber = 20;
  const ::PlunderRequest& plunder() const;
  ::PlunderRequest* release_plunder();
  ::PlunderRequest* mutable_plunder();
  void set_allocated_plunder(::PlunderRequest* plunder);

  // .UseItemRequest UseItem = 21;
  bool has_useitem() const;
  void clear_useitem();
  static const int kUseItemFieldNumber = 21;
  const ::UseItemRequest& useitem() const;
  ::UseItemRequest* release_useitem();
  ::UseItemRequest* mutable_useitem();
  void set_allocated_useitem(::UseItemRequest* useitem);

  // .SettleAccountRequest SettleAccount = 22;
  bool has_settleaccount() const;
  void clear_settleaccount();
  static const int kSettleAccountFieldNumber = 22;
  const ::SettleAccountRequest& settleaccount() const;
  ::SettleAccountRequest* release_settleaccount();
  ::SettleAccountRequest* mutable_settleaccount();
  void set_allocated_settleaccount(::SettleAccountRequest* settleaccount);

  // .RankingRequest Ranking = 23;
  bool has_ranking() const;
  void clear_ranking();
  static const int kRankingFieldNumber = 23;
  const ::RankingRequest& ranking() const;
  ::RankingRequest* release_ranking();
  ::RankingRequest* mutable_ranking();
  void set_allocated_ranking(::RankingRequest* ranking);

  // .ForgetSkillRequest ForgetSkill = 24;
  bool has_forgetskill() const;
  void clear_forgetskill();
  static const int kForgetSkillFieldNumber = 24;
  const ::ForgetSkillRequest& forgetskill() const;
  ::ForgetSkillRequest* release_forgetskill();
  ::ForgetSkillRequest* mutable_forgetskill();
  void set_allocated_forgetskill(::ForgetSkillRequest* forgetskill);

  // .RegisterRequest Register = 25;
  bool has_register_() const;
  void clear_register_();
  static const int kRegisterFieldNumber = 25;
  const ::RegisterRequest& register_() const;
  ::RegisterRequest* release_register_();
  ::RegisterRequest* mutable_register_();
  void set_allocated_register_(::RegisterRequest* register_);

  // .SolarUpgradeRequest SolarUpgrade = 26;
  bool has_solarupgrade() const;
  void clear_solarupgrade();
  static const int kSolarUpgradeFieldNumber = 26;
  const ::SolarUpgradeRequest& solarupgrade() const;
  ::SolarUpgradeRequest* release_solarupgrade();
  ::SolarUpgradeRequest* mutable_solarupgrade();
  void set_allocated_solarupgrade(::SolarUpgradeRequest* solarupgrade);

  // .SkillUpgradeRequest SkillUpgrade = 27;
  bool has_skillupgrade() const;
  void clear_skillupgrade();
  static const int kSkillUpgradeFieldNumber = 27;
  const ::SkillUpgradeRequest& skillupgrade() const;
  ::SkillUpgradeRequest* release_skillupgrade();
  ::SkillUpgradeRequest* mutable_skillupgrade();
  void set_allocated_skillupgrade(::SkillUpgradeRequest* skillupgrade);

  // .TreeUpgradeRequest TreeUpgrade = 28;
  bool has_treeupgrade() const;
  void clear_treeupgrade();
  static const int kTreeUpgradeFieldNumber = 28;
  const ::TreeUpgradeRequest& treeupgrade() const;
  ::TreeUpgradeRequest* release_treeupgrade();
  ::TreeUpgradeRequest* mutable_treeupgrade();
  void set_allocated_treeupgrade(::TreeUpgradeRequest* treeupgrade);

  // .ElfinUpgradeRequest ElfinUpgrade = 29;
  bool has_elfinupgrade() const;
  void clear_elfinupgrade();
  static const int kElfinUpgradeFieldNumber = 29;
  const ::ElfinUpgradeRequest& elfinupgrade() const;
  ::ElfinUpgradeRequest* release_elfinupgrade();
  ::ElfinUpgradeRequest* mutable_elfinupgrade();
  void set_allocated_elfinupgrade(::ElfinUpgradeRequest* elfinupgrade);

  // @@protoc_insertion_point(class_scope:Request)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::LoginRequest* login_;
  ::ElfinRequest* elfin_;
  ::RollRequest* roll_;
  ::TreeRequest* tree_;
  ::ResourceRequest* resource_;
  ::TasksRequest* tasks_;
  ::MailsRequest* mails_;
  ::SunRequest* sun_;
  ::TreeEnchantmentRequest* treeenchantment_;
  ::StoreAllRequest* storeall_;
  ::StoreEquRequest* storeequ_;
  ::StoreWaterRequest* storewater_;
  ::StoreSpePropsRequest* storespeprops_;
  ::WarehouseRequest* warehouse_;
  ::DelMailRequest* delmail_;
  ::ClaimedTaskRequest* claimedtask_;
  ::RecTaskAwardRequest* rectaskaward_;
  ::FriendsRequest* friends_;
  ::EnemiesRequest* enemies_;
  ::PlunderRequest* plunder_;
  ::UseItemRequest* useitem_;
  ::SettleAccountRequest* settleaccount_;
  ::RankingRequest* ranking_;
  ::ForgetSkillRequest* forgetskill_;
  ::RegisterRequest* register__;
  ::SolarUpgradeRequest* solarupgrade_;
  ::SkillUpgradeRequest* skillupgrade_;
  ::TreeUpgradeRequest* treeupgrade_;
  ::ElfinUpgradeRequest* elfinupgrade_;
  mutable int _cached_size_;
  friend struct ::protobuf_Msg_2eproto::TableStruct;
  friend void ::protobuf_Msg_2eproto::InitDefaultsRequestImpl();
};
// -------------------------------------------------------------------

class Response : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:Response) */ {
 public:
  Response();
  virtual ~Response();

  Response(const Response& from);

  inline Response& operator=(const Response& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Response(Response&& from) noexcept
    : Response() {
    *this = ::std::move(from);
  }

  inline Response& operator=(Response&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const Response& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Response* internal_default_instance() {
    return reinterpret_cast<const Response*>(
               &_Response_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    60;

  void Swap(Response* other);
  friend void swap(Response& a, Response& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Response* New() const PROTOBUF_FINAL { return New(NULL); }

  Response* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const Response& from);
  void MergeFrom(const Response& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(Response* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .LoginResponse Login = 1;
  bool has_login() const;
  void clear_login();
  static const int kLoginFieldNumber = 1;
  const ::LoginResponse& login() const;
  ::LoginResponse* release_login();
  ::LoginResponse* mutable_login();
  void set_allocated_login(::LoginResponse* login);

  // .ElfinResponse Elfin = 2;
  bool has_elfin() const;
  void clear_elfin();
  static const int kElfinFieldNumber = 2;
  const ::ElfinResponse& elfin() const;
  ::ElfinResponse* release_elfin();
  ::ElfinResponse* mutable_elfin();
  void set_allocated_elfin(::ElfinResponse* elfin);

  // .RollResponse Roll = 3;
  bool has_roll() const;
  void clear_roll();
  static const int kRollFieldNumber = 3;
  const ::RollResponse& roll() const;
  ::RollResponse* release_roll();
  ::RollResponse* mutable_roll();
  void set_allocated_roll(::RollResponse* roll);

  // .TreeResponse Tree = 4;
  bool has_tree() const;
  void clear_tree();
  static const int kTreeFieldNumber = 4;
  const ::TreeResponse& tree() const;
  ::TreeResponse* release_tree();
  ::TreeResponse* mutable_tree();
  void set_allocated_tree(::TreeResponse* tree);

  // .ResourceResponse Resource = 5;
  bool has_resource() const;
  void clear_resource();
  static const int kResourceFieldNumber = 5;
  const ::ResourceResponse& resource() const;
  ::ResourceResponse* release_resource();
  ::ResourceResponse* mutable_resource();
  void set_allocated_resource(::ResourceResponse* resource);

  // .TasksResponse Tasks = 6;
  bool has_tasks() const;
  void clear_tasks();
  static const int kTasksFieldNumber = 6;
  const ::TasksResponse& tasks() const;
  ::TasksResponse* release_tasks();
  ::TasksResponse* mutable_tasks();
  void set_allocated_tasks(::TasksResponse* tasks);

  // .MailsResponse Mails = 7;
  bool has_mails() const;
  void clear_mails();
  static const int kMailsFieldNumber = 7;
  const ::MailsResponse& mails() const;
  ::MailsResponse* release_mails();
  ::MailsResponse* mutable_mails();
  void set_allocated_mails(::MailsResponse* mails);

  // .SunResponse Sun = 8;
  bool has_sun() const;
  void clear_sun();
  static const int kSunFieldNumber = 8;
  const ::SunResponse& sun() const;
  ::SunResponse* release_sun();
  ::SunResponse* mutable_sun();
  void set_allocated_sun(::SunResponse* sun);

  // .TreeEnchantmentResponse TreeEnchantment = 9;
  bool has_treeenchantment() const;
  void clear_treeenchantment();
  static const int kTreeEnchantmentFieldNumber = 9;
  const ::TreeEnchantmentResponse& treeenchantment() const;
  ::TreeEnchantmentResponse* release_treeenchantment();
  ::TreeEnchantmentResponse* mutable_treeenchantment();
  void set_allocated_treeenchantment(::TreeEnchantmentResponse* treeenchantment);

  // .StoreAllResponse StoreAll = 10;
  bool has_storeall() const;
  void clear_storeall();
  static const int kStoreAllFieldNumber = 10;
  const ::StoreAllResponse& storeall() const;
  ::StoreAllResponse* release_storeall();
  ::StoreAllResponse* mutable_storeall();
  void set_allocated_storeall(::StoreAllResponse* storeall);

  // .StoreEquResponse StoreEqu = 11;
  bool has_storeequ() const;
  void clear_storeequ();
  static const int kStoreEquFieldNumber = 11;
  const ::StoreEquResponse& storeequ() const;
  ::StoreEquResponse* release_storeequ();
  ::StoreEquResponse* mutable_storeequ();
  void set_allocated_storeequ(::StoreEquResponse* storeequ);

  // .StoreWaterResponse StoreWater = 12;
  bool has_storewater() const;
  void clear_storewater();
  static const int kStoreWaterFieldNumber = 12;
  const ::StoreWaterResponse& storewater() const;
  ::StoreWaterResponse* release_storewater();
  ::StoreWaterResponse* mutable_storewater();
  void set_allocated_storewater(::StoreWaterResponse* storewater);

  // .StoreSpePropsResponse StoreSpeProps = 13;
  bool has_storespeprops() const;
  void clear_storespeprops();
  static const int kStoreSpePropsFieldNumber = 13;
  const ::StoreSpePropsResponse& storespeprops() const;
  ::StoreSpePropsResponse* release_storespeprops();
  ::StoreSpePropsResponse* mutable_storespeprops();
  void set_allocated_storespeprops(::StoreSpePropsResponse* storespeprops);

  // .WarehouseResponse Warehouse = 14;
  bool has_warehouse() const;
  void clear_warehouse();
  static const int kWarehouseFieldNumber = 14;
  const ::WarehouseResponse& warehouse() const;
  ::WarehouseResponse* release_warehouse();
  ::WarehouseResponse* mutable_warehouse();
  void set_allocated_warehouse(::WarehouseResponse* warehouse);

  // .DelMailResponse DelMail = 15;
  bool has_delmail() const;
  void clear_delmail();
  static const int kDelMailFieldNumber = 15;
  const ::DelMailResponse& delmail() const;
  ::DelMailResponse* release_delmail();
  ::DelMailResponse* mutable_delmail();
  void set_allocated_delmail(::DelMailResponse* delmail);

  // .ClaimedTaskResponse ClaimedTask = 16;
  bool has_claimedtask() const;
  void clear_claimedtask();
  static const int kClaimedTaskFieldNumber = 16;
  const ::ClaimedTaskResponse& claimedtask() const;
  ::ClaimedTaskResponse* release_claimedtask();
  ::ClaimedTaskResponse* mutable_claimedtask();
  void set_allocated_claimedtask(::ClaimedTaskResponse* claimedtask);

  // .RecTaskAwardResponse RecTaskAward = 17;
  bool has_rectaskaward() const;
  void clear_rectaskaward();
  static const int kRecTaskAwardFieldNumber = 17;
  const ::RecTaskAwardResponse& rectaskaward() const;
  ::RecTaskAwardResponse* release_rectaskaward();
  ::RecTaskAwardResponse* mutable_rectaskaward();
  void set_allocated_rectaskaward(::RecTaskAwardResponse* rectaskaward);

  // .FriendsResponse Friends = 18;
  bool has_friends() const;
  void clear_friends();
  static const int kFriendsFieldNumber = 18;
  const ::FriendsResponse& friends() const;
  ::FriendsResponse* release_friends();
  ::FriendsResponse* mutable_friends();
  void set_allocated_friends(::FriendsResponse* friends);

  // .EnemiesResponse Enemies = 19;
  bool has_enemies() const;
  void clear_enemies();
  static const int kEnemiesFieldNumber = 19;
  const ::EnemiesResponse& enemies() const;
  ::EnemiesResponse* release_enemies();
  ::EnemiesResponse* mutable_enemies();
  void set_allocated_enemies(::EnemiesResponse* enemies);

  // .PlunderResponse Plunder = 20;
  bool has_plunder() const;
  void clear_plunder();
  static const int kPlunderFieldNumber = 20;
  const ::PlunderResponse& plunder() const;
  ::PlunderResponse* release_plunder();
  ::PlunderResponse* mutable_plunder();
  void set_allocated_plunder(::PlunderResponse* plunder);

  // .UseItemResponse UseItem = 21;
  bool has_useitem() const;
  void clear_useitem();
  static const int kUseItemFieldNumber = 21;
  const ::UseItemResponse& useitem() const;
  ::UseItemResponse* release_useitem();
  ::UseItemResponse* mutable_useitem();
  void set_allocated_useitem(::UseItemResponse* useitem);

  // .SettleAccountResponse SettleAccount = 22;
  bool has_settleaccount() const;
  void clear_settleaccount();
  static const int kSettleAccountFieldNumber = 22;
  const ::SettleAccountResponse& settleaccount() const;
  ::SettleAccountResponse* release_settleaccount();
  ::SettleAccountResponse* mutable_settleaccount();
  void set_allocated_settleaccount(::SettleAccountResponse* settleaccount);

  // .RankingResponse Ranking = 23;
  bool has_ranking() const;
  void clear_ranking();
  static const int kRankingFieldNumber = 23;
  const ::RankingResponse& ranking() const;
  ::RankingResponse* release_ranking();
  ::RankingResponse* mutable_ranking();
  void set_allocated_ranking(::RankingResponse* ranking);

  // .ForgetSkillResponse ForgetSkill = 24;
  bool has_forgetskill() const;
  void clear_forgetskill();
  static const int kForgetSkillFieldNumber = 24;
  const ::ForgetSkillResponse& forgetskill() const;
  ::ForgetSkillResponse* release_forgetskill();
  ::ForgetSkillResponse* mutable_forgetskill();
  void set_allocated_forgetskill(::ForgetSkillResponse* forgetskill);

  // .RegisterResponse Register = 25;
  bool has_register_() const;
  void clear_register_();
  static const int kRegisterFieldNumber = 25;
  const ::RegisterResponse& register_() const;
  ::RegisterResponse* release_register_();
  ::RegisterResponse* mutable_register_();
  void set_allocated_register_(::RegisterResponse* register_);

  // .SolarUpgradeResponse SolarUpgrade = 26;
  bool has_solarupgrade() const;
  void clear_solarupgrade();
  static const int kSolarUpgradeFieldNumber = 26;
  const ::SolarUpgradeResponse& solarupgrade() const;
  ::SolarUpgradeResponse* release_solarupgrade();
  ::SolarUpgradeResponse* mutable_solarupgrade();
  void set_allocated_solarupgrade(::SolarUpgradeResponse* solarupgrade);

  // .SkillUpgradeResponse SkillUpgrade = 27;
  bool has_skillupgrade() const;
  void clear_skillupgrade();
  static const int kSkillUpgradeFieldNumber = 27;
  const ::SkillUpgradeResponse& skillupgrade() const;
  ::SkillUpgradeResponse* release_skillupgrade();
  ::SkillUpgradeResponse* mutable_skillupgrade();
  void set_allocated_skillupgrade(::SkillUpgradeResponse* skillupgrade);

  // .TreeUpgradeResponse TreeUpgrade = 28;
  bool has_treeupgrade() const;
  void clear_treeupgrade();
  static const int kTreeUpgradeFieldNumber = 28;
  const ::TreeUpgradeResponse& treeupgrade() const;
  ::TreeUpgradeResponse* release_treeupgrade();
  ::TreeUpgradeResponse* mutable_treeupgrade();
  void set_allocated_treeupgrade(::TreeUpgradeResponse* treeupgrade);

  // .ElfinUpgradeResponse ElfinUpgrade = 29;
  bool has_elfinupgrade() const;
  void clear_elfinupgrade();
  static const int kElfinUpgradeFieldNumber = 29;
  const ::ElfinUpgradeResponse& elfinupgrade() const;
  ::ElfinUpgradeResponse* release_elfinupgrade();
  ::ElfinUpgradeResponse* mutable_elfinupgrade();
  void set_allocated_elfinupgrade(::ElfinUpgradeResponse* elfinupgrade);

  // @@protoc_insertion_point(class_scope:Response)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::LoginResponse* login_;
  ::ElfinResponse* elfin_;
  ::RollResponse* roll_;
  ::TreeResponse* tree_;
  ::ResourceResponse* resource_;
  ::TasksResponse* tasks_;
  ::MailsResponse* mails_;
  ::SunResponse* sun_;
  ::TreeEnchantmentResponse* treeenchantment_;
  ::StoreAllResponse* storeall_;
  ::StoreEquResponse* storeequ_;
  ::StoreWaterResponse* storewater_;
  ::StoreSpePropsResponse* storespeprops_;
  ::WarehouseResponse* warehouse_;
  ::DelMailResponse* delmail_;
  ::ClaimedTaskResponse* claimedtask_;
  ::RecTaskAwardResponse* rectaskaward_;
  ::FriendsResponse* friends_;
  ::EnemiesResponse* enemies_;
  ::PlunderResponse* plunder_;
  ::UseItemResponse* useitem_;
  ::SettleAccountResponse* settleaccount_;
  ::RankingResponse* ranking_;
  ::ForgetSkillResponse* forgetskill_;
  ::RegisterResponse* register__;
  ::SolarUpgradeResponse* solarupgrade_;
  ::SkillUpgradeResponse* skillupgrade_;
  ::TreeUpgradeResponse* treeupgrade_;
  ::ElfinUpgradeResponse* elfinupgrade_;
  mutable int _cached_size_;
  friend struct ::protobuf_Msg_2eproto::TableStruct;
  friend void ::protobuf_Msg_2eproto::InitDefaultsResponseImpl();
};
// -------------------------------------------------------------------

class GameMessage : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:GameMessage) */ {
 public:
  GameMessage();
  virtual ~GameMessage();

  GameMessage(const GameMessage& from);

  inline GameMessage& operator=(const GameMessage& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  GameMessage(GameMessage&& from) noexcept
    : GameMessage() {
    *this = ::std::move(from);
  }

  inline GameMessage& operator=(GameMessage&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const GameMessage& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GameMessage* internal_default_instance() {
    return reinterpret_cast<const GameMessage*>(
               &_GameMessage_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    61;

  void Swap(GameMessage* other);
  friend void swap(GameMessage& a, GameMessage& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline GameMessage* New() const PROTOBUF_FINAL { return New(NULL); }

  GameMessage* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const GameMessage& from);
  void MergeFrom(const GameMessage& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(GameMessage* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .Request req = 2;
  bool has_req() const;
  void clear_req();
  static const int kReqFieldNumber = 2;
  const ::Request& req() const;
  ::Request* release_req();
  ::Request* mutable_req();
  void set_allocated_req(::Request* req);

  // .Response res = 3;
  bool has_res() const;
  void clear_res();
  static const int kResFieldNumber = 3;
  const ::Response& res() const;
  ::Response* release_res();
  ::Response* mutable_res();
  void set_allocated_res(::Response* res);

  // .GameMsgCode msg = 1;
  void clear_msg();
  static const int kMsgFieldNumber = 1;
  ::GameMsgCode msg() const;
  void set_msg(::GameMsgCode value);

  // @@protoc_insertion_point(class_scope:GameMessage)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::Request* req_;
  ::Response* res_;
  int msg_;
  mutable int _cached_size_;
  friend struct ::protobuf_Msg_2eproto::TableStruct;
  friend void ::protobuf_Msg_2eproto::InitDefaultsGameMessageImpl();
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// LoginRequest

// string Account = 1;
inline void LoginRequest::clear_account() {
  account_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& LoginRequest::account() const {
  // @@protoc_insertion_point(field_get:LoginRequest.Account)
  return account_.GetNoArena();
}
inline void LoginRequest::set_account(const ::std::string& value) {
  
  account_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:LoginRequest.Account)
}
#if LANG_CXX11
inline void LoginRequest::set_account(::std::string&& value) {
  
  account_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:LoginRequest.Account)
}
#endif
inline void LoginRequest::set_account(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  account_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:LoginRequest.Account)
}
inline void LoginRequest::set_account(const char* value, size_t size) {
  
  account_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:LoginRequest.Account)
}
inline ::std::string* LoginRequest::mutable_account() {
  
  // @@protoc_insertion_point(field_mutable:LoginRequest.Account)
  return account_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* LoginRequest::release_account() {
  // @@protoc_insertion_point(field_release:LoginRequest.Account)
  
  return account_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void LoginRequest::set_allocated_account(::std::string* account) {
  if (account != NULL) {
    
  } else {
    
  }
  account_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), account);
  // @@protoc_insertion_point(field_set_allocated:LoginRequest.Account)
}

// string Passwd = 2;
inline void LoginRequest::clear_passwd() {
  passwd_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& LoginRequest::passwd() const {
  // @@protoc_insertion_point(field_get:LoginRequest.Passwd)
  return passwd_.GetNoArena();
}
inline void LoginRequest::set_passwd(const ::std::string& value) {
  
  passwd_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:LoginRequest.Passwd)
}
#if LANG_CXX11
inline void LoginRequest::set_passwd(::std::string&& value) {
  
  passwd_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:LoginRequest.Passwd)
}
#endif
inline void LoginRequest::set_passwd(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  passwd_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:LoginRequest.Passwd)
}
inline void LoginRequest::set_passwd(const char* value, size_t size) {
  
  passwd_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:LoginRequest.Passwd)
}
inline ::std::string* LoginRequest::mutable_passwd() {
  
  // @@protoc_insertion_point(field_mutable:LoginRequest.Passwd)
  return passwd_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* LoginRequest::release_passwd() {
  // @@protoc_insertion_point(field_release:LoginRequest.Passwd)
  
  return passwd_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void LoginRequest::set_allocated_passwd(::std::string* passwd) {
  if (passwd != NULL) {
    
  } else {
    
  }
  passwd_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), passwd);
  // @@protoc_insertion_point(field_set_allocated:LoginRequest.Passwd)
}

// -------------------------------------------------------------------

// LoginResponse

// .LoginResponse.ResultType result = 1;
inline void LoginResponse::clear_result() {
  result_ = 0;
}
inline ::LoginResponse_ResultType LoginResponse::result() const {
  // @@protoc_insertion_point(field_get:LoginResponse.result)
  return static_cast< ::LoginResponse_ResultType >(result_);
}
inline void LoginResponse::set_result(::LoginResponse_ResultType value) {
  
  result_ = value;
  // @@protoc_insertion_point(field_set:LoginResponse.result)
}

// -------------------------------------------------------------------

// ElfinRequest

// bool Elfin = 1;
inline void ElfinRequest::clear_elfin() {
  elfin_ = false;
}
inline bool ElfinRequest::elfin() const {
  // @@protoc_insertion_point(field_get:ElfinRequest.Elfin)
  return elfin_;
}
inline void ElfinRequest::set_elfin(bool value) {
  
  elfin_ = value;
  // @@protoc_insertion_point(field_set:ElfinRequest.Elfin)
}

// -------------------------------------------------------------------

// ElfinResponse

// uint32 Id = 1;
inline void ElfinResponse::clear_id() {
  id_ = 0u;
}
inline ::google::protobuf::uint32 ElfinResponse::id() const {
  // @@protoc_insertion_point(field_get:ElfinResponse.Id)
  return id_;
}
inline void ElfinResponse::set_id(::google::protobuf::uint32 value) {
  
  id_ = value;
  // @@protoc_insertion_point(field_set:ElfinResponse.Id)
}

// uint32 Level = 2;
inline void ElfinResponse::clear_level() {
  level_ = 0u;
}
inline ::google::protobuf::uint32 ElfinResponse::level() const {
  // @@protoc_insertion_point(field_get:ElfinResponse.Level)
  return level_;
}
inline void ElfinResponse::set_level(::google::protobuf::uint32 value) {
  
  level_ = value;
  // @@protoc_insertion_point(field_set:ElfinResponse.Level)
}

// uint32 Power = 3;
inline void ElfinResponse::clear_power() {
  power_ = 0u;
}
inline ::google::protobuf::uint32 ElfinResponse::power() const {
  // @@protoc_insertion_point(field_get:ElfinResponse.Power)
  return power_;
}
inline void ElfinResponse::set_power(::google::protobuf::uint32 value) {
  
  power_ = value;
  // @@protoc_insertion_point(field_set:ElfinResponse.Power)
}

// uint32 MaxPower = 4;
inline void ElfinResponse::clear_maxpower() {
  maxpower_ = 0u;
}
inline ::google::protobuf::uint32 ElfinResponse::maxpower() const {
  // @@protoc_insertion_point(field_get:ElfinResponse.MaxPower)
  return maxpower_;
}
inline void ElfinResponse::set_maxpower(::google::protobuf::uint32 value) {
  
  maxpower_ = value;
  // @@protoc_insertion_point(field_set:ElfinResponse.MaxPower)
}

// .ElfinResponse.Elfintype Etype = 5;
inline void ElfinResponse::clear_etype() {
  etype_ = 0;
}
inline ::ElfinResponse_Elfintype ElfinResponse::etype() const {
  // @@protoc_insertion_point(field_get:ElfinResponse.Etype)
  return static_cast< ::ElfinResponse_Elfintype >(etype_);
}
inline void ElfinResponse::set_etype(::ElfinResponse_Elfintype value) {
  
  etype_ = value;
  // @@protoc_insertion_point(field_set:ElfinResponse.Etype)
}

// -------------------------------------------------------------------

// RollRequest

// bool Roll = 1;
inline void RollRequest::clear_roll() {
  roll_ = false;
}
inline bool RollRequest::roll() const {
  // @@protoc_insertion_point(field_get:RollRequest.Roll)
  return roll_;
}
inline void RollRequest::set_roll(bool value) {
  
  roll_ = value;
  // @@protoc_insertion_point(field_set:RollRequest.Roll)
}

// -------------------------------------------------------------------

// RollResponse

// uint32 Id = 1;
inline void RollResponse::clear_id() {
  id_ = 0u;
}
inline ::google::protobuf::uint32 RollResponse::id() const {
  // @@protoc_insertion_point(field_get:RollResponse.Id)
  return id_;
}
inline void RollResponse::set_id(::google::protobuf::uint32 value) {
  
  id_ = value;
  // @@protoc_insertion_point(field_set:RollResponse.Id)
}

// string Name = 2;
inline void RollResponse::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& RollResponse::name() const {
  // @@protoc_insertion_point(field_get:RollResponse.Name)
  return name_.GetNoArena();
}
inline void RollResponse::set_name(const ::std::string& value) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:RollResponse.Name)
}
#if LANG_CXX11
inline void RollResponse::set_name(::std::string&& value) {
  
  name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:RollResponse.Name)
}
#endif
inline void RollResponse::set_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:RollResponse.Name)
}
inline void RollResponse::set_name(const char* value, size_t size) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:RollResponse.Name)
}
inline ::std::string* RollResponse::mutable_name() {
  
  // @@protoc_insertion_point(field_mutable:RollResponse.Name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* RollResponse::release_name() {
  // @@protoc_insertion_point(field_release:RollResponse.Name)
  
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void RollResponse::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    
  } else {
    
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:RollResponse.Name)
}

// uint32 GrowthValue = 3;
inline void RollResponse::clear_growthvalue() {
  growthvalue_ = 0u;
}
inline ::google::protobuf::uint32 RollResponse::growthvalue() const {
  // @@protoc_insertion_point(field_get:RollResponse.GrowthValue)
  return growthvalue_;
}
inline void RollResponse::set_growthvalue(::google::protobuf::uint32 value) {
  
  growthvalue_ = value;
  // @@protoc_insertion_point(field_set:RollResponse.GrowthValue)
}

// -------------------------------------------------------------------

// TreeRequest

// bool Tree = 1;
inline void TreeRequest::clear_tree() {
  tree_ = false;
}
inline bool TreeRequest::tree() const {
  // @@protoc_insertion_point(field_get:TreeRequest.Tree)
  return tree_;
}
inline void TreeRequest::set_tree(bool value) {
  
  tree_ = value;
  // @@protoc_insertion_point(field_set:TreeRequest.Tree)
}

// -------------------------------------------------------------------

// TreeResponse

// uint32 Level = 1;
inline void TreeResponse::clear_level() {
  level_ = 0u;
}
inline ::google::protobuf::uint32 TreeResponse::level() const {
  // @@protoc_insertion_point(field_get:TreeResponse.Level)
  return level_;
}
inline void TreeResponse::set_level(::google::protobuf::uint32 value) {
  
  level_ = value;
  // @@protoc_insertion_point(field_set:TreeResponse.Level)
}

// uint32 Hight = 2;
inline void TreeResponse::clear_hight() {
  hight_ = 0u;
}
inline ::google::protobuf::uint32 TreeResponse::hight() const {
  // @@protoc_insertion_point(field_get:TreeResponse.Hight)
  return hight_;
}
inline void TreeResponse::set_hight(::google::protobuf::uint32 value) {
  
  hight_ = value;
  // @@protoc_insertion_point(field_set:TreeResponse.Hight)
}

// uint32 ProdGold = 4;
inline void TreeResponse::clear_prodgold() {
  prodgold_ = 0u;
}
inline ::google::protobuf::uint32 TreeResponse::prodgold() const {
  // @@protoc_insertion_point(field_get:TreeResponse.ProdGold)
  return prodgold_;
}
inline void TreeResponse::set_prodgold(::google::protobuf::uint32 value) {
  
  prodgold_ = value;
  // @@protoc_insertion_point(field_set:TreeResponse.ProdGold)
}

// -------------------------------------------------------------------

// ResourceRequest

// bool resource = 1;
inline void ResourceRequest::clear_resource() {
  resource_ = false;
}
inline bool ResourceRequest::resource() const {
  // @@protoc_insertion_point(field_get:ResourceRequest.resource)
  return resource_;
}
inline void ResourceRequest::set_resource(bool value) {
  
  resource_ = value;
  // @@protoc_insertion_point(field_set:ResourceRequest.resource)
}

// -------------------------------------------------------------------

// ResourceResponse

// uint32 Gold = 1;
inline void ResourceResponse::clear_gold() {
  gold_ = 0u;
}
inline ::google::protobuf::uint32 ResourceResponse::gold() const {
  // @@protoc_insertion_point(field_get:ResourceResponse.Gold)
  return gold_;
}
inline void ResourceResponse::set_gold(::google::protobuf::uint32 value) {
  
  gold_ = value;
  // @@protoc_insertion_point(field_set:ResourceResponse.Gold)
}

// uint32 Water = 2;
inline void ResourceResponse::clear_water() {
  water_ = 0u;
}
inline ::google::protobuf::uint32 ResourceResponse::water() const {
  // @@protoc_insertion_point(field_get:ResourceResponse.Water)
  return water_;
}
inline void ResourceResponse::set_water(::google::protobuf::uint32 value) {
  
  water_ = value;
  // @@protoc_insertion_point(field_set:ResourceResponse.Water)
}

// uint32 SunShine = 3;
inline void ResourceResponse::clear_sunshine() {
  sunshine_ = 0u;
}
inline ::google::protobuf::uint32 ResourceResponse::sunshine() const {
  // @@protoc_insertion_point(field_get:ResourceResponse.SunShine)
  return sunshine_;
}
inline void ResourceResponse::set_sunshine(::google::protobuf::uint32 value) {
  
  sunshine_ = value;
  // @@protoc_insertion_point(field_set:ResourceResponse.SunShine)
}

// uint32 Diamond = 4;
inline void ResourceResponse::clear_diamond() {
  diamond_ = 0u;
}
inline ::google::protobuf::uint32 ResourceResponse::diamond() const {
  // @@protoc_insertion_point(field_get:ResourceResponse.Diamond)
  return diamond_;
}
inline void ResourceResponse::set_diamond(::google::protobuf::uint32 value) {
  
  diamond_ = value;
  // @@protoc_insertion_point(field_set:ResourceResponse.Diamond)
}

// -------------------------------------------------------------------

// TasksRequest

// bool Tasks = 1;
inline void TasksRequest::clear_tasks() {
  tasks_ = false;
}
inline bool TasksRequest::tasks() const {
  // @@protoc_insertion_point(field_get:TasksRequest.Tasks)
  return tasks_;
}
inline void TasksRequest::set_tasks(bool value) {
  
  tasks_ = value;
  // @@protoc_insertion_point(field_set:TasksRequest.Tasks)
}

// -------------------------------------------------------------------

// TasksResponse

// uint32 Id = 1;
inline void TasksResponse::clear_id() {
  id_ = 0u;
}
inline ::google::protobuf::uint32 TasksResponse::id() const {
  // @@protoc_insertion_point(field_get:TasksResponse.Id)
  return id_;
}
inline void TasksResponse::set_id(::google::protobuf::uint32 value) {
  
  id_ = value;
  // @@protoc_insertion_point(field_set:TasksResponse.Id)
}

// string Title = 2;
inline void TasksResponse::clear_title() {
  title_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& TasksResponse::title() const {
  // @@protoc_insertion_point(field_get:TasksResponse.Title)
  return title_.GetNoArena();
}
inline void TasksResponse::set_title(const ::std::string& value) {
  
  title_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:TasksResponse.Title)
}
#if LANG_CXX11
inline void TasksResponse::set_title(::std::string&& value) {
  
  title_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:TasksResponse.Title)
}
#endif
inline void TasksResponse::set_title(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  title_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:TasksResponse.Title)
}
inline void TasksResponse::set_title(const char* value, size_t size) {
  
  title_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:TasksResponse.Title)
}
inline ::std::string* TasksResponse::mutable_title() {
  
  // @@protoc_insertion_point(field_mutable:TasksResponse.Title)
  return title_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* TasksResponse::release_title() {
  // @@protoc_insertion_point(field_release:TasksResponse.Title)
  
  return title_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void TasksResponse::set_allocated_title(::std::string* title) {
  if (title != NULL) {
    
  } else {
    
  }
  title_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), title);
  // @@protoc_insertion_point(field_set_allocated:TasksResponse.Title)
}

// string Details = 3;
inline void TasksResponse::clear_details() {
  details_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& TasksResponse::details() const {
  // @@protoc_insertion_point(field_get:TasksResponse.Details)
  return details_.GetNoArena();
}
inline void TasksResponse::set_details(const ::std::string& value) {
  
  details_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:TasksResponse.Details)
}
#if LANG_CXX11
inline void TasksResponse::set_details(::std::string&& value) {
  
  details_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:TasksResponse.Details)
}
#endif
inline void TasksResponse::set_details(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  details_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:TasksResponse.Details)
}
inline void TasksResponse::set_details(const char* value, size_t size) {
  
  details_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:TasksResponse.Details)
}
inline ::std::string* TasksResponse::mutable_details() {
  
  // @@protoc_insertion_point(field_mutable:TasksResponse.Details)
  return details_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* TasksResponse::release_details() {
  // @@protoc_insertion_point(field_release:TasksResponse.Details)
  
  return details_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void TasksResponse::set_allocated_details(::std::string* details) {
  if (details != NULL) {
    
  } else {
    
  }
  details_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), details);
  // @@protoc_insertion_point(field_set_allocated:TasksResponse.Details)
}

// .TasksResponse.TaskType Type = 4;
inline void TasksResponse::clear_type() {
  type_ = 0;
}
inline ::TasksResponse_TaskType TasksResponse::type() const {
  // @@protoc_insertion_point(field_get:TasksResponse.Type)
  return static_cast< ::TasksResponse_TaskType >(type_);
}
inline void TasksResponse::set_type(::TasksResponse_TaskType value) {
  
  type_ = value;
  // @@protoc_insertion_point(field_set:TasksResponse.Type)
}

// .Prize Prize1 = 5;
inline bool TasksResponse::has_prize1() const {
  return this != internal_default_instance() && prize1_ != NULL;
}
inline void TasksResponse::clear_prize1() {
  if (GetArenaNoVirtual() == NULL && prize1_ != NULL) {
    delete prize1_;
  }
  prize1_ = NULL;
}
inline const ::Prize& TasksResponse::prize1() const {
  const ::Prize* p = prize1_;
  // @@protoc_insertion_point(field_get:TasksResponse.Prize1)
  return p != NULL ? *p : *reinterpret_cast<const ::Prize*>(
      &::_Prize_default_instance_);
}
inline ::Prize* TasksResponse::release_prize1() {
  // @@protoc_insertion_point(field_release:TasksResponse.Prize1)
  
  ::Prize* temp = prize1_;
  prize1_ = NULL;
  return temp;
}
inline ::Prize* TasksResponse::mutable_prize1() {
  
  if (prize1_ == NULL) {
    prize1_ = new ::Prize;
  }
  // @@protoc_insertion_point(field_mutable:TasksResponse.Prize1)
  return prize1_;
}
inline void TasksResponse::set_allocated_prize1(::Prize* prize1) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete prize1_;
  }
  if (prize1) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      prize1 = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, prize1, submessage_arena);
    }
    
  } else {
    
  }
  prize1_ = prize1;
  // @@protoc_insertion_point(field_set_allocated:TasksResponse.Prize1)
}

// .Prize Prize2 = 6;
inline bool TasksResponse::has_prize2() const {
  return this != internal_default_instance() && prize2_ != NULL;
}
inline void TasksResponse::clear_prize2() {
  if (GetArenaNoVirtual() == NULL && prize2_ != NULL) {
    delete prize2_;
  }
  prize2_ = NULL;
}
inline const ::Prize& TasksResponse::prize2() const {
  const ::Prize* p = prize2_;
  // @@protoc_insertion_point(field_get:TasksResponse.Prize2)
  return p != NULL ? *p : *reinterpret_cast<const ::Prize*>(
      &::_Prize_default_instance_);
}
inline ::Prize* TasksResponse::release_prize2() {
  // @@protoc_insertion_point(field_release:TasksResponse.Prize2)
  
  ::Prize* temp = prize2_;
  prize2_ = NULL;
  return temp;
}
inline ::Prize* TasksResponse::mutable_prize2() {
  
  if (prize2_ == NULL) {
    prize2_ = new ::Prize;
  }
  // @@protoc_insertion_point(field_mutable:TasksResponse.Prize2)
  return prize2_;
}
inline void TasksResponse::set_allocated_prize2(::Prize* prize2) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete prize2_;
  }
  if (prize2) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      prize2 = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, prize2, submessage_arena);
    }
    
  } else {
    
  }
  prize2_ = prize2;
  // @@protoc_insertion_point(field_set_allocated:TasksResponse.Prize2)
}

// .Prize Prize3 = 7;
inline bool TasksResponse::has_prize3() const {
  return this != internal_default_instance() && prize3_ != NULL;
}
inline void TasksResponse::clear_prize3() {
  if (GetArenaNoVirtual() == NULL && prize3_ != NULL) {
    delete prize3_;
  }
  prize3_ = NULL;
}
inline const ::Prize& TasksResponse::prize3() const {
  const ::Prize* p = prize3_;
  // @@protoc_insertion_point(field_get:TasksResponse.Prize3)
  return p != NULL ? *p : *reinterpret_cast<const ::Prize*>(
      &::_Prize_default_instance_);
}
inline ::Prize* TasksResponse::release_prize3() {
  // @@protoc_insertion_point(field_release:TasksResponse.Prize3)
  
  ::Prize* temp = prize3_;
  prize3_ = NULL;
  return temp;
}
inline ::Prize* TasksResponse::mutable_prize3() {
  
  if (prize3_ == NULL) {
    prize3_ = new ::Prize;
  }
  // @@protoc_insertion_point(field_mutable:TasksResponse.Prize3)
  return prize3_;
}
inline void TasksResponse::set_allocated_prize3(::Prize* prize3) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete prize3_;
  }
  if (prize3) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      prize3 = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, prize3, submessage_arena);
    }
    
  } else {
    
  }
  prize3_ = prize3;
  // @@protoc_insertion_point(field_set_allocated:TasksResponse.Prize3)
}

// -------------------------------------------------------------------

// Prize

// uint32 Id = 1;
inline void Prize::clear_id() {
  id_ = 0u;
}
inline ::google::protobuf::uint32 Prize::id() const {
  // @@protoc_insertion_point(field_get:Prize.Id)
  return id_;
}
inline void Prize::set_id(::google::protobuf::uint32 value) {
  
  id_ = value;
  // @@protoc_insertion_point(field_set:Prize.Id)
}

// uint32 Number = 2;
inline void Prize::clear_number() {
  number_ = 0u;
}
inline ::google::protobuf::uint32 Prize::number() const {
  // @@protoc_insertion_point(field_get:Prize.Number)
  return number_;
}
inline void Prize::set_number(::google::protobuf::uint32 value) {
  
  number_ = value;
  // @@protoc_insertion_point(field_set:Prize.Number)
}

// -------------------------------------------------------------------

// MailsRequest

// bool Mails = 1;
inline void MailsRequest::clear_mails() {
  mails_ = false;
}
inline bool MailsRequest::mails() const {
  // @@protoc_insertion_point(field_get:MailsRequest.Mails)
  return mails_;
}
inline void MailsRequest::set_mails(bool value) {
  
  mails_ = value;
  // @@protoc_insertion_point(field_set:MailsRequest.Mails)
}

// -------------------------------------------------------------------

// MailsResponse

// uint32 Id = 1;
inline void MailsResponse::clear_id() {
  id_ = 0u;
}
inline ::google::protobuf::uint32 MailsResponse::id() const {
  // @@protoc_insertion_point(field_get:MailsResponse.Id)
  return id_;
}
inline void MailsResponse::set_id(::google::protobuf::uint32 value) {
  
  id_ = value;
  // @@protoc_insertion_point(field_set:MailsResponse.Id)
}

// string Title = 2;
inline void MailsResponse::clear_title() {
  title_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& MailsResponse::title() const {
  // @@protoc_insertion_point(field_get:MailsResponse.Title)
  return title_.GetNoArena();
}
inline void MailsResponse::set_title(const ::std::string& value) {
  
  title_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:MailsResponse.Title)
}
#if LANG_CXX11
inline void MailsResponse::set_title(::std::string&& value) {
  
  title_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:MailsResponse.Title)
}
#endif
inline void MailsResponse::set_title(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  title_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:MailsResponse.Title)
}
inline void MailsResponse::set_title(const char* value, size_t size) {
  
  title_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:MailsResponse.Title)
}
inline ::std::string* MailsResponse::mutable_title() {
  
  // @@protoc_insertion_point(field_mutable:MailsResponse.Title)
  return title_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* MailsResponse::release_title() {
  // @@protoc_insertion_point(field_release:MailsResponse.Title)
  
  return title_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void MailsResponse::set_allocated_title(::std::string* title) {
  if (title != NULL) {
    
  } else {
    
  }
  title_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), title);
  // @@protoc_insertion_point(field_set_allocated:MailsResponse.Title)
}

// string Details = 3;
inline void MailsResponse::clear_details() {
  details_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& MailsResponse::details() const {
  // @@protoc_insertion_point(field_get:MailsResponse.Details)
  return details_.GetNoArena();
}
inline void MailsResponse::set_details(const ::std::string& value) {
  
  details_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:MailsResponse.Details)
}
#if LANG_CXX11
inline void MailsResponse::set_details(::std::string&& value) {
  
  details_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:MailsResponse.Details)
}
#endif
inline void MailsResponse::set_details(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  details_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:MailsResponse.Details)
}
inline void MailsResponse::set_details(const char* value, size_t size) {
  
  details_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:MailsResponse.Details)
}
inline ::std::string* MailsResponse::mutable_details() {
  
  // @@protoc_insertion_point(field_mutable:MailsResponse.Details)
  return details_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* MailsResponse::release_details() {
  // @@protoc_insertion_point(field_release:MailsResponse.Details)
  
  return details_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void MailsResponse::set_allocated_details(::std::string* details) {
  if (details != NULL) {
    
  } else {
    
  }
  details_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), details);
  // @@protoc_insertion_point(field_set_allocated:MailsResponse.Details)
}

// bool Received = 4;
inline void MailsResponse::clear_received() {
  received_ = false;
}
inline bool MailsResponse::received() const {
  // @@protoc_insertion_point(field_get:MailsResponse.Received)
  return received_;
}
inline void MailsResponse::set_received(bool value) {
  
  received_ = value;
  // @@protoc_insertion_point(field_set:MailsResponse.Received)
}

// .Prize Prize1 = 5;
inline bool MailsResponse::has_prize1() const {
  return this != internal_default_instance() && prize1_ != NULL;
}
inline void MailsResponse::clear_prize1() {
  if (GetArenaNoVirtual() == NULL && prize1_ != NULL) {
    delete prize1_;
  }
  prize1_ = NULL;
}
inline const ::Prize& MailsResponse::prize1() const {
  const ::Prize* p = prize1_;
  // @@protoc_insertion_point(field_get:MailsResponse.Prize1)
  return p != NULL ? *p : *reinterpret_cast<const ::Prize*>(
      &::_Prize_default_instance_);
}
inline ::Prize* MailsResponse::release_prize1() {
  // @@protoc_insertion_point(field_release:MailsResponse.Prize1)
  
  ::Prize* temp = prize1_;
  prize1_ = NULL;
  return temp;
}
inline ::Prize* MailsResponse::mutable_prize1() {
  
  if (prize1_ == NULL) {
    prize1_ = new ::Prize;
  }
  // @@protoc_insertion_point(field_mutable:MailsResponse.Prize1)
  return prize1_;
}
inline void MailsResponse::set_allocated_prize1(::Prize* prize1) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete prize1_;
  }
  if (prize1) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      prize1 = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, prize1, submessage_arena);
    }
    
  } else {
    
  }
  prize1_ = prize1;
  // @@protoc_insertion_point(field_set_allocated:MailsResponse.Prize1)
}

// .Prize Prize2 = 6;
inline bool MailsResponse::has_prize2() const {
  return this != internal_default_instance() && prize2_ != NULL;
}
inline void MailsResponse::clear_prize2() {
  if (GetArenaNoVirtual() == NULL && prize2_ != NULL) {
    delete prize2_;
  }
  prize2_ = NULL;
}
inline const ::Prize& MailsResponse::prize2() const {
  const ::Prize* p = prize2_;
  // @@protoc_insertion_point(field_get:MailsResponse.Prize2)
  return p != NULL ? *p : *reinterpret_cast<const ::Prize*>(
      &::_Prize_default_instance_);
}
inline ::Prize* MailsResponse::release_prize2() {
  // @@protoc_insertion_point(field_release:MailsResponse.Prize2)
  
  ::Prize* temp = prize2_;
  prize2_ = NULL;
  return temp;
}
inline ::Prize* MailsResponse::mutable_prize2() {
  
  if (prize2_ == NULL) {
    prize2_ = new ::Prize;
  }
  // @@protoc_insertion_point(field_mutable:MailsResponse.Prize2)
  return prize2_;
}
inline void MailsResponse::set_allocated_prize2(::Prize* prize2) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete prize2_;
  }
  if (prize2) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      prize2 = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, prize2, submessage_arena);
    }
    
  } else {
    
  }
  prize2_ = prize2;
  // @@protoc_insertion_point(field_set_allocated:MailsResponse.Prize2)
}

// .Prize Prize3 = 7;
inline bool MailsResponse::has_prize3() const {
  return this != internal_default_instance() && prize3_ != NULL;
}
inline void MailsResponse::clear_prize3() {
  if (GetArenaNoVirtual() == NULL && prize3_ != NULL) {
    delete prize3_;
  }
  prize3_ = NULL;
}
inline const ::Prize& MailsResponse::prize3() const {
  const ::Prize* p = prize3_;
  // @@protoc_insertion_point(field_get:MailsResponse.Prize3)
  return p != NULL ? *p : *reinterpret_cast<const ::Prize*>(
      &::_Prize_default_instance_);
}
inline ::Prize* MailsResponse::release_prize3() {
  // @@protoc_insertion_point(field_release:MailsResponse.Prize3)
  
  ::Prize* temp = prize3_;
  prize3_ = NULL;
  return temp;
}
inline ::Prize* MailsResponse::mutable_prize3() {
  
  if (prize3_ == NULL) {
    prize3_ = new ::Prize;
  }
  // @@protoc_insertion_point(field_mutable:MailsResponse.Prize3)
  return prize3_;
}
inline void MailsResponse::set_allocated_prize3(::Prize* prize3) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete prize3_;
  }
  if (prize3) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      prize3 = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, prize3, submessage_arena);
    }
    
  } else {
    
  }
  prize3_ = prize3;
  // @@protoc_insertion_point(field_set_allocated:MailsResponse.Prize3)
}

// -------------------------------------------------------------------

// SunRequest

// bool Sun = 1;
inline void SunRequest::clear_sun() {
  sun_ = false;
}
inline bool SunRequest::sun() const {
  // @@protoc_insertion_point(field_get:SunRequest.Sun)
  return sun_;
}
inline void SunRequest::set_sun(bool value) {
  
  sun_ = value;
  // @@protoc_insertion_point(field_set:SunRequest.Sun)
}

// -------------------------------------------------------------------

// SunResponse

// uint32 Level = 1;
inline void SunResponse::clear_level() {
  level_ = 0u;
}
inline ::google::protobuf::uint32 SunResponse::level() const {
  // @@protoc_insertion_point(field_get:SunResponse.Level)
  return level_;
}
inline void SunResponse::set_level(::google::protobuf::uint32 value) {
  
  level_ = value;
  // @@protoc_insertion_point(field_set:SunResponse.Level)
}

// uint32 SunShine = 2;
inline void SunResponse::clear_sunshine() {
  sunshine_ = 0u;
}
inline ::google::protobuf::uint32 SunResponse::sunshine() const {
  // @@protoc_insertion_point(field_get:SunResponse.SunShine)
  return sunshine_;
}
inline void SunResponse::set_sunshine(::google::protobuf::uint32 value) {
  
  sunshine_ = value;
  // @@protoc_insertion_point(field_set:SunResponse.SunShine)
}

// -------------------------------------------------------------------

// TreeEnchantmentRequest

// bool Well = 1;
inline void TreeEnchantmentRequest::clear_well() {
  well_ = false;
}
inline bool TreeEnchantmentRequest::well() const {
  // @@protoc_insertion_point(field_get:TreeEnchantmentRequest.Well)
  return well_;
}
inline void TreeEnchantmentRequest::set_well(bool value) {
  
  well_ = value;
  // @@protoc_insertion_point(field_set:TreeEnchantmentRequest.Well)
}

// -------------------------------------------------------------------

// TreeEnchantmentResponse

// uint32 Level = 1;
inline void TreeEnchantmentResponse::clear_level() {
  level_ = 0u;
}
inline ::google::protobuf::uint32 TreeEnchantmentResponse::level() const {
  // @@protoc_insertion_point(field_get:TreeEnchantmentResponse.Level)
  return level_;
}
inline void TreeEnchantmentResponse::set_level(::google::protobuf::uint32 value) {
  
  level_ = value;
  // @@protoc_insertion_point(field_set:TreeEnchantmentResponse.Level)
}

// uint32 DefenseLevel = 2;
inline void TreeEnchantmentResponse::clear_defenselevel() {
  defenselevel_ = 0u;
}
inline ::google::protobuf::uint32 TreeEnchantmentResponse::defenselevel() const {
  // @@protoc_insertion_point(field_get:TreeEnchantmentResponse.DefenseLevel)
  return defenselevel_;
}
inline void TreeEnchantmentResponse::set_defenselevel(::google::protobuf::uint32 value) {
  
  defenselevel_ = value;
  // @@protoc_insertion_point(field_set:TreeEnchantmentResponse.DefenseLevel)
}

// -------------------------------------------------------------------

// StoreAllRequest

// bool StoreAll = 1;
inline void StoreAllRequest::clear_storeall() {
  storeall_ = false;
}
inline bool StoreAllRequest::storeall() const {
  // @@protoc_insertion_point(field_get:StoreAllRequest.StoreAll)
  return storeall_;
}
inline void StoreAllRequest::set_storeall(bool value) {
  
  storeall_ = value;
  // @@protoc_insertion_point(field_set:StoreAllRequest.StoreAll)
}

// -------------------------------------------------------------------

// StoreAllResponse

// uint32 Id = 1;
inline void StoreAllResponse::clear_id() {
  id_ = 0u;
}
inline ::google::protobuf::uint32 StoreAllResponse::id() const {
  // @@protoc_insertion_point(field_get:StoreAllResponse.Id)
  return id_;
}
inline void StoreAllResponse::set_id(::google::protobuf::uint32 value) {
  
  id_ = value;
  // @@protoc_insertion_point(field_set:StoreAllResponse.Id)
}

// uint32 GoldPrice = 2;
inline void StoreAllResponse::clear_goldprice() {
  goldprice_ = 0u;
}
inline ::google::protobuf::uint32 StoreAllResponse::goldprice() const {
  // @@protoc_insertion_point(field_get:StoreAllResponse.GoldPrice)
  return goldprice_;
}
inline void StoreAllResponse::set_goldprice(::google::protobuf::uint32 value) {
  
  goldprice_ = value;
  // @@protoc_insertion_point(field_set:StoreAllResponse.GoldPrice)
}

// uint32 DiaPrice = 3;
inline void StoreAllResponse::clear_diaprice() {
  diaprice_ = 0u;
}
inline ::google::protobuf::uint32 StoreAllResponse::diaprice() const {
  // @@protoc_insertion_point(field_get:StoreAllResponse.DiaPrice)
  return diaprice_;
}
inline void StoreAllResponse::set_diaprice(::google::protobuf::uint32 value) {
  
  diaprice_ = value;
  // @@protoc_insertion_point(field_set:StoreAllResponse.DiaPrice)
}

// uint32 Discount = 4;
inline void StoreAllResponse::clear_discount() {
  discount_ = 0u;
}
inline ::google::protobuf::uint32 StoreAllResponse::discount() const {
  // @@protoc_insertion_point(field_get:StoreAllResponse.Discount)
  return discount_;
}
inline void StoreAllResponse::set_discount(::google::protobuf::uint32 value) {
  
  discount_ = value;
  // @@protoc_insertion_point(field_set:StoreAllResponse.Discount)
}

// .StdMode Type = 5;
inline void StoreAllResponse::clear_type() {
  type_ = 0;
}
inline ::StdMode StoreAllResponse::type() const {
  // @@protoc_insertion_point(field_get:StoreAllResponse.Type)
  return static_cast< ::StdMode >(type_);
}
inline void StoreAllResponse::set_type(::StdMode value) {
  
  type_ = value;
  // @@protoc_insertion_point(field_set:StoreAllResponse.Type)
}

// string Describe = 6;
inline void StoreAllResponse::clear_describe() {
  describe_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& StoreAllResponse::describe() const {
  // @@protoc_insertion_point(field_get:StoreAllResponse.Describe)
  return describe_.GetNoArena();
}
inline void StoreAllResponse::set_describe(const ::std::string& value) {
  
  describe_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:StoreAllResponse.Describe)
}
#if LANG_CXX11
inline void StoreAllResponse::set_describe(::std::string&& value) {
  
  describe_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:StoreAllResponse.Describe)
}
#endif
inline void StoreAllResponse::set_describe(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  describe_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:StoreAllResponse.Describe)
}
inline void StoreAllResponse::set_describe(const char* value, size_t size) {
  
  describe_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:StoreAllResponse.Describe)
}
inline ::std::string* StoreAllResponse::mutable_describe() {
  
  // @@protoc_insertion_point(field_mutable:StoreAllResponse.Describe)
  return describe_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* StoreAllResponse::release_describe() {
  // @@protoc_insertion_point(field_release:StoreAllResponse.Describe)
  
  return describe_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void StoreAllResponse::set_allocated_describe(::std::string* describe) {
  if (describe != NULL) {
    
  } else {
    
  }
  describe_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), describe);
  // @@protoc_insertion_point(field_set_allocated:StoreAllResponse.Describe)
}

// string Name = 7;
inline void StoreAllResponse::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& StoreAllResponse::name() const {
  // @@protoc_insertion_point(field_get:StoreAllResponse.Name)
  return name_.GetNoArena();
}
inline void StoreAllResponse::set_name(const ::std::string& value) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:StoreAllResponse.Name)
}
#if LANG_CXX11
inline void StoreAllResponse::set_name(::std::string&& value) {
  
  name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:StoreAllResponse.Name)
}
#endif
inline void StoreAllResponse::set_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:StoreAllResponse.Name)
}
inline void StoreAllResponse::set_name(const char* value, size_t size) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:StoreAllResponse.Name)
}
inline ::std::string* StoreAllResponse::mutable_name() {
  
  // @@protoc_insertion_point(field_mutable:StoreAllResponse.Name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* StoreAllResponse::release_name() {
  // @@protoc_insertion_point(field_release:StoreAllResponse.Name)
  
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void StoreAllResponse::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    
  } else {
    
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:StoreAllResponse.Name)
}

// -------------------------------------------------------------------

// StoreEquRequest

// bool StoreEqu = 1;
inline void StoreEquRequest::clear_storeequ() {
  storeequ_ = false;
}
inline bool StoreEquRequest::storeequ() const {
  // @@protoc_insertion_point(field_get:StoreEquRequest.StoreEqu)
  return storeequ_;
}
inline void StoreEquRequest::set_storeequ(bool value) {
  
  storeequ_ = value;
  // @@protoc_insertion_point(field_set:StoreEquRequest.StoreEqu)
}

// -------------------------------------------------------------------

// StoreEquResponse

// uint32 Id = 1;
inline void StoreEquResponse::clear_id() {
  id_ = 0u;
}
inline ::google::protobuf::uint32 StoreEquResponse::id() const {
  // @@protoc_insertion_point(field_get:StoreEquResponse.Id)
  return id_;
}
inline void StoreEquResponse::set_id(::google::protobuf::uint32 value) {
  
  id_ = value;
  // @@protoc_insertion_point(field_set:StoreEquResponse.Id)
}

// uint32 GoldPrice = 2;
inline void StoreEquResponse::clear_goldprice() {
  goldprice_ = 0u;
}
inline ::google::protobuf::uint32 StoreEquResponse::goldprice() const {
  // @@protoc_insertion_point(field_get:StoreEquResponse.GoldPrice)
  return goldprice_;
}
inline void StoreEquResponse::set_goldprice(::google::protobuf::uint32 value) {
  
  goldprice_ = value;
  // @@protoc_insertion_point(field_set:StoreEquResponse.GoldPrice)
}

// uint32 DiaPrice = 3;
inline void StoreEquResponse::clear_diaprice() {
  diaprice_ = 0u;
}
inline ::google::protobuf::uint32 StoreEquResponse::diaprice() const {
  // @@protoc_insertion_point(field_get:StoreEquResponse.DiaPrice)
  return diaprice_;
}
inline void StoreEquResponse::set_diaprice(::google::protobuf::uint32 value) {
  
  diaprice_ = value;
  // @@protoc_insertion_point(field_set:StoreEquResponse.DiaPrice)
}

// uint32 Discount = 4;
inline void StoreEquResponse::clear_discount() {
  discount_ = 0u;
}
inline ::google::protobuf::uint32 StoreEquResponse::discount() const {
  // @@protoc_insertion_point(field_get:StoreEquResponse.Discount)
  return discount_;
}
inline void StoreEquResponse::set_discount(::google::protobuf::uint32 value) {
  
  discount_ = value;
  // @@protoc_insertion_point(field_set:StoreEquResponse.Discount)
}

// .StdMode Type = 5;
inline void StoreEquResponse::clear_type() {
  type_ = 0;
}
inline ::StdMode StoreEquResponse::type() const {
  // @@protoc_insertion_point(field_get:StoreEquResponse.Type)
  return static_cast< ::StdMode >(type_);
}
inline void StoreEquResponse::set_type(::StdMode value) {
  
  type_ = value;
  // @@protoc_insertion_point(field_set:StoreEquResponse.Type)
}

// string Describe = 6;
inline void StoreEquResponse::clear_describe() {
  describe_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& StoreEquResponse::describe() const {
  // @@protoc_insertion_point(field_get:StoreEquResponse.Describe)
  return describe_.GetNoArena();
}
inline void StoreEquResponse::set_describe(const ::std::string& value) {
  
  describe_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:StoreEquResponse.Describe)
}
#if LANG_CXX11
inline void StoreEquResponse::set_describe(::std::string&& value) {
  
  describe_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:StoreEquResponse.Describe)
}
#endif
inline void StoreEquResponse::set_describe(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  describe_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:StoreEquResponse.Describe)
}
inline void StoreEquResponse::set_describe(const char* value, size_t size) {
  
  describe_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:StoreEquResponse.Describe)
}
inline ::std::string* StoreEquResponse::mutable_describe() {
  
  // @@protoc_insertion_point(field_mutable:StoreEquResponse.Describe)
  return describe_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* StoreEquResponse::release_describe() {
  // @@protoc_insertion_point(field_release:StoreEquResponse.Describe)
  
  return describe_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void StoreEquResponse::set_allocated_describe(::std::string* describe) {
  if (describe != NULL) {
    
  } else {
    
  }
  describe_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), describe);
  // @@protoc_insertion_point(field_set_allocated:StoreEquResponse.Describe)
}

// string Name = 7;
inline void StoreEquResponse::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& StoreEquResponse::name() const {
  // @@protoc_insertion_point(field_get:StoreEquResponse.Name)
  return name_.GetNoArena();
}
inline void StoreEquResponse::set_name(const ::std::string& value) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:StoreEquResponse.Name)
}
#if LANG_CXX11
inline void StoreEquResponse::set_name(::std::string&& value) {
  
  name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:StoreEquResponse.Name)
}
#endif
inline void StoreEquResponse::set_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:StoreEquResponse.Name)
}
inline void StoreEquResponse::set_name(const char* value, size_t size) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:StoreEquResponse.Name)
}
inline ::std::string* StoreEquResponse::mutable_name() {
  
  // @@protoc_insertion_point(field_mutable:StoreEquResponse.Name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* StoreEquResponse::release_name() {
  // @@protoc_insertion_point(field_release:StoreEquResponse.Name)
  
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void StoreEquResponse::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    
  } else {
    
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:StoreEquResponse.Name)
}

// -------------------------------------------------------------------

// StoreWaterRequest

// bool StoreWater = 1;
inline void StoreWaterRequest::clear_storewater() {
  storewater_ = false;
}
inline bool StoreWaterRequest::storewater() const {
  // @@protoc_insertion_point(field_get:StoreWaterRequest.StoreWater)
  return storewater_;
}
inline void StoreWaterRequest::set_storewater(bool value) {
  
  storewater_ = value;
  // @@protoc_insertion_point(field_set:StoreWaterRequest.StoreWater)
}

// -------------------------------------------------------------------

// StoreWaterResponse

// uint32 Id = 1;
inline void StoreWaterResponse::clear_id() {
  id_ = 0u;
}
inline ::google::protobuf::uint32 StoreWaterResponse::id() const {
  // @@protoc_insertion_point(field_get:StoreWaterResponse.Id)
  return id_;
}
inline void StoreWaterResponse::set_id(::google::protobuf::uint32 value) {
  
  id_ = value;
  // @@protoc_insertion_point(field_set:StoreWaterResponse.Id)
}

// uint32 GoldPrice = 2;
inline void StoreWaterResponse::clear_goldprice() {
  goldprice_ = 0u;
}
inline ::google::protobuf::uint32 StoreWaterResponse::goldprice() const {
  // @@protoc_insertion_point(field_get:StoreWaterResponse.GoldPrice)
  return goldprice_;
}
inline void StoreWaterResponse::set_goldprice(::google::protobuf::uint32 value) {
  
  goldprice_ = value;
  // @@protoc_insertion_point(field_set:StoreWaterResponse.GoldPrice)
}

// uint32 DiaPrice = 3;
inline void StoreWaterResponse::clear_diaprice() {
  diaprice_ = 0u;
}
inline ::google::protobuf::uint32 StoreWaterResponse::diaprice() const {
  // @@protoc_insertion_point(field_get:StoreWaterResponse.DiaPrice)
  return diaprice_;
}
inline void StoreWaterResponse::set_diaprice(::google::protobuf::uint32 value) {
  
  diaprice_ = value;
  // @@protoc_insertion_point(field_set:StoreWaterResponse.DiaPrice)
}

// uint32 Discount = 4;
inline void StoreWaterResponse::clear_discount() {
  discount_ = 0u;
}
inline ::google::protobuf::uint32 StoreWaterResponse::discount() const {
  // @@protoc_insertion_point(field_get:StoreWaterResponse.Discount)
  return discount_;
}
inline void StoreWaterResponse::set_discount(::google::protobuf::uint32 value) {
  
  discount_ = value;
  // @@protoc_insertion_point(field_set:StoreWaterResponse.Discount)
}

// .StdMode Type = 5;
inline void StoreWaterResponse::clear_type() {
  type_ = 0;
}
inline ::StdMode StoreWaterResponse::type() const {
  // @@protoc_insertion_point(field_get:StoreWaterResponse.Type)
  return static_cast< ::StdMode >(type_);
}
inline void StoreWaterResponse::set_type(::StdMode value) {
  
  type_ = value;
  // @@protoc_insertion_point(field_set:StoreWaterResponse.Type)
}

// string Describe = 6;
inline void StoreWaterResponse::clear_describe() {
  describe_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& StoreWaterResponse::describe() const {
  // @@protoc_insertion_point(field_get:StoreWaterResponse.Describe)
  return describe_.GetNoArena();
}
inline void StoreWaterResponse::set_describe(const ::std::string& value) {
  
  describe_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:StoreWaterResponse.Describe)
}
#if LANG_CXX11
inline void StoreWaterResponse::set_describe(::std::string&& value) {
  
  describe_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:StoreWaterResponse.Describe)
}
#endif
inline void StoreWaterResponse::set_describe(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  describe_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:StoreWaterResponse.Describe)
}
inline void StoreWaterResponse::set_describe(const char* value, size_t size) {
  
  describe_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:StoreWaterResponse.Describe)
}
inline ::std::string* StoreWaterResponse::mutable_describe() {
  
  // @@protoc_insertion_point(field_mutable:StoreWaterResponse.Describe)
  return describe_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* StoreWaterResponse::release_describe() {
  // @@protoc_insertion_point(field_release:StoreWaterResponse.Describe)
  
  return describe_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void StoreWaterResponse::set_allocated_describe(::std::string* describe) {
  if (describe != NULL) {
    
  } else {
    
  }
  describe_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), describe);
  // @@protoc_insertion_point(field_set_allocated:StoreWaterResponse.Describe)
}

// string Name = 7;
inline void StoreWaterResponse::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& StoreWaterResponse::name() const {
  // @@protoc_insertion_point(field_get:StoreWaterResponse.Name)
  return name_.GetNoArena();
}
inline void StoreWaterResponse::set_name(const ::std::string& value) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:StoreWaterResponse.Name)
}
#if LANG_CXX11
inline void StoreWaterResponse::set_name(::std::string&& value) {
  
  name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:StoreWaterResponse.Name)
}
#endif
inline void StoreWaterResponse::set_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:StoreWaterResponse.Name)
}
inline void StoreWaterResponse::set_name(const char* value, size_t size) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:StoreWaterResponse.Name)
}
inline ::std::string* StoreWaterResponse::mutable_name() {
  
  // @@protoc_insertion_point(field_mutable:StoreWaterResponse.Name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* StoreWaterResponse::release_name() {
  // @@protoc_insertion_point(field_release:StoreWaterResponse.Name)
  
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void StoreWaterResponse::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    
  } else {
    
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:StoreWaterResponse.Name)
}

// -------------------------------------------------------------------

// StoreSpePropsRequest

// bool StoreSpeprops = 1;
inline void StoreSpePropsRequest::clear_storespeprops() {
  storespeprops_ = false;
}
inline bool StoreSpePropsRequest::storespeprops() const {
  // @@protoc_insertion_point(field_get:StoreSpePropsRequest.StoreSpeprops)
  return storespeprops_;
}
inline void StoreSpePropsRequest::set_storespeprops(bool value) {
  
  storespeprops_ = value;
  // @@protoc_insertion_point(field_set:StoreSpePropsRequest.StoreSpeprops)
}

// -------------------------------------------------------------------

// StoreSpePropsResponse

// uint32 Id = 1;
inline void StoreSpePropsResponse::clear_id() {
  id_ = 0u;
}
inline ::google::protobuf::uint32 StoreSpePropsResponse::id() const {
  // @@protoc_insertion_point(field_get:StoreSpePropsResponse.Id)
  return id_;
}
inline void StoreSpePropsResponse::set_id(::google::protobuf::uint32 value) {
  
  id_ = value;
  // @@protoc_insertion_point(field_set:StoreSpePropsResponse.Id)
}

// uint32 GoldPrice = 2;
inline void StoreSpePropsResponse::clear_goldprice() {
  goldprice_ = 0u;
}
inline ::google::protobuf::uint32 StoreSpePropsResponse::goldprice() const {
  // @@protoc_insertion_point(field_get:StoreSpePropsResponse.GoldPrice)
  return goldprice_;
}
inline void StoreSpePropsResponse::set_goldprice(::google::protobuf::uint32 value) {
  
  goldprice_ = value;
  // @@protoc_insertion_point(field_set:StoreSpePropsResponse.GoldPrice)
}

// uint32 DiaPrice = 3;
inline void StoreSpePropsResponse::clear_diaprice() {
  diaprice_ = 0u;
}
inline ::google::protobuf::uint32 StoreSpePropsResponse::diaprice() const {
  // @@protoc_insertion_point(field_get:StoreSpePropsResponse.DiaPrice)
  return diaprice_;
}
inline void StoreSpePropsResponse::set_diaprice(::google::protobuf::uint32 value) {
  
  diaprice_ = value;
  // @@protoc_insertion_point(field_set:StoreSpePropsResponse.DiaPrice)
}

// uint32 Discount = 4;
inline void StoreSpePropsResponse::clear_discount() {
  discount_ = 0u;
}
inline ::google::protobuf::uint32 StoreSpePropsResponse::discount() const {
  // @@protoc_insertion_point(field_get:StoreSpePropsResponse.Discount)
  return discount_;
}
inline void StoreSpePropsResponse::set_discount(::google::protobuf::uint32 value) {
  
  discount_ = value;
  // @@protoc_insertion_point(field_set:StoreSpePropsResponse.Discount)
}

// .StdMode Type = 5;
inline void StoreSpePropsResponse::clear_type() {
  type_ = 0;
}
inline ::StdMode StoreSpePropsResponse::type() const {
  // @@protoc_insertion_point(field_get:StoreSpePropsResponse.Type)
  return static_cast< ::StdMode >(type_);
}
inline void StoreSpePropsResponse::set_type(::StdMode value) {
  
  type_ = value;
  // @@protoc_insertion_point(field_set:StoreSpePropsResponse.Type)
}

// string Describe = 6;
inline void StoreSpePropsResponse::clear_describe() {
  describe_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& StoreSpePropsResponse::describe() const {
  // @@protoc_insertion_point(field_get:StoreSpePropsResponse.Describe)
  return describe_.GetNoArena();
}
inline void StoreSpePropsResponse::set_describe(const ::std::string& value) {
  
  describe_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:StoreSpePropsResponse.Describe)
}
#if LANG_CXX11
inline void StoreSpePropsResponse::set_describe(::std::string&& value) {
  
  describe_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:StoreSpePropsResponse.Describe)
}
#endif
inline void StoreSpePropsResponse::set_describe(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  describe_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:StoreSpePropsResponse.Describe)
}
inline void StoreSpePropsResponse::set_describe(const char* value, size_t size) {
  
  describe_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:StoreSpePropsResponse.Describe)
}
inline ::std::string* StoreSpePropsResponse::mutable_describe() {
  
  // @@protoc_insertion_point(field_mutable:StoreSpePropsResponse.Describe)
  return describe_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* StoreSpePropsResponse::release_describe() {
  // @@protoc_insertion_point(field_release:StoreSpePropsResponse.Describe)
  
  return describe_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void StoreSpePropsResponse::set_allocated_describe(::std::string* describe) {
  if (describe != NULL) {
    
  } else {
    
  }
  describe_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), describe);
  // @@protoc_insertion_point(field_set_allocated:StoreSpePropsResponse.Describe)
}

// string Name = 7;
inline void StoreSpePropsResponse::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& StoreSpePropsResponse::name() const {
  // @@protoc_insertion_point(field_get:StoreSpePropsResponse.Name)
  return name_.GetNoArena();
}
inline void StoreSpePropsResponse::set_name(const ::std::string& value) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:StoreSpePropsResponse.Name)
}
#if LANG_CXX11
inline void StoreSpePropsResponse::set_name(::std::string&& value) {
  
  name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:StoreSpePropsResponse.Name)
}
#endif
inline void StoreSpePropsResponse::set_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:StoreSpePropsResponse.Name)
}
inline void StoreSpePropsResponse::set_name(const char* value, size_t size) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:StoreSpePropsResponse.Name)
}
inline ::std::string* StoreSpePropsResponse::mutable_name() {
  
  // @@protoc_insertion_point(field_mutable:StoreSpePropsResponse.Name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* StoreSpePropsResponse::release_name() {
  // @@protoc_insertion_point(field_release:StoreSpePropsResponse.Name)
  
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void StoreSpePropsResponse::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    
  } else {
    
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:StoreSpePropsResponse.Name)
}

// -------------------------------------------------------------------

// WarehouseRequest

// bool Warehouse = 1;
inline void WarehouseRequest::clear_warehouse() {
  warehouse_ = false;
}
inline bool WarehouseRequest::warehouse() const {
  // @@protoc_insertion_point(field_get:WarehouseRequest.Warehouse)
  return warehouse_;
}
inline void WarehouseRequest::set_warehouse(bool value) {
  
  warehouse_ = value;
  // @@protoc_insertion_point(field_set:WarehouseRequest.Warehouse)
}

// -------------------------------------------------------------------

// WarehouseResponse

// uint32 Id = 1;
inline void WarehouseResponse::clear_id() {
  id_ = 0u;
}
inline ::google::protobuf::uint32 WarehouseResponse::id() const {
  // @@protoc_insertion_point(field_get:WarehouseResponse.Id)
  return id_;
}
inline void WarehouseResponse::set_id(::google::protobuf::uint32 value) {
  
  id_ = value;
  // @@protoc_insertion_point(field_set:WarehouseResponse.Id)
}

// uint32 Number = 2;
inline void WarehouseResponse::clear_number() {
  number_ = 0u;
}
inline ::google::protobuf::uint32 WarehouseResponse::number() const {
  // @@protoc_insertion_point(field_get:WarehouseResponse.Number)
  return number_;
}
inline void WarehouseResponse::set_number(::google::protobuf::uint32 value) {
  
  number_ = value;
  // @@protoc_insertion_point(field_set:WarehouseResponse.Number)
}

// -------------------------------------------------------------------

// DelMailRequest

// uint32 Id = 1;
inline void DelMailRequest::clear_id() {
  id_ = 0u;
}
inline ::google::protobuf::uint32 DelMailRequest::id() const {
  // @@protoc_insertion_point(field_get:DelMailRequest.Id)
  return id_;
}
inline void DelMailRequest::set_id(::google::protobuf::uint32 value) {
  
  id_ = value;
  // @@protoc_insertion_point(field_set:DelMailRequest.Id)
}

// -------------------------------------------------------------------

// DelMailResponse

// bool Success = 1;
inline void DelMailResponse::clear_success() {
  success_ = false;
}
inline bool DelMailResponse::success() const {
  // @@protoc_insertion_point(field_get:DelMailResponse.Success)
  return success_;
}
inline void DelMailResponse::set_success(bool value) {
  
  success_ = value;
  // @@protoc_insertion_point(field_set:DelMailResponse.Success)
}

// uint32 Id = 2;
inline void DelMailResponse::clear_id() {
  id_ = 0u;
}
inline ::google::protobuf::uint32 DelMailResponse::id() const {
  // @@protoc_insertion_point(field_get:DelMailResponse.Id)
  return id_;
}
inline void DelMailResponse::set_id(::google::protobuf::uint32 value) {
  
  id_ = value;
  // @@protoc_insertion_point(field_set:DelMailResponse.Id)
}

// -------------------------------------------------------------------

// ClaimedTaskRequest

// uint32 Id = 1;
inline void ClaimedTaskRequest::clear_id() {
  id_ = 0u;
}
inline ::google::protobuf::uint32 ClaimedTaskRequest::id() const {
  // @@protoc_insertion_point(field_get:ClaimedTaskRequest.Id)
  return id_;
}
inline void ClaimedTaskRequest::set_id(::google::protobuf::uint32 value) {
  
  id_ = value;
  // @@protoc_insertion_point(field_set:ClaimedTaskRequest.Id)
}

// -------------------------------------------------------------------

// ClaimedTaskResponse

// bool Success = 1;
inline void ClaimedTaskResponse::clear_success() {
  success_ = false;
}
inline bool ClaimedTaskResponse::success() const {
  // @@protoc_insertion_point(field_get:ClaimedTaskResponse.Success)
  return success_;
}
inline void ClaimedTaskResponse::set_success(bool value) {
  
  success_ = value;
  // @@protoc_insertion_point(field_set:ClaimedTaskResponse.Success)
}

// uint32 Id = 2;
inline void ClaimedTaskResponse::clear_id() {
  id_ = 0u;
}
inline ::google::protobuf::uint32 ClaimedTaskResponse::id() const {
  // @@protoc_insertion_point(field_get:ClaimedTaskResponse.Id)
  return id_;
}
inline void ClaimedTaskResponse::set_id(::google::protobuf::uint32 value) {
  
  id_ = value;
  // @@protoc_insertion_point(field_set:ClaimedTaskResponse.Id)
}

// -------------------------------------------------------------------

// RecTaskAwardRequest

// uint32 Id = 1;
inline void RecTaskAwardRequest::clear_id() {
  id_ = 0u;
}
inline ::google::protobuf::uint32 RecTaskAwardRequest::id() const {
  // @@protoc_insertion_point(field_get:RecTaskAwardRequest.Id)
  return id_;
}
inline void RecTaskAwardRequest::set_id(::google::protobuf::uint32 value) {
  
  id_ = value;
  // @@protoc_insertion_point(field_set:RecTaskAwardRequest.Id)
}

// -------------------------------------------------------------------

// RecTaskAwardResponse

// .Prize prize1 = 1;
inline bool RecTaskAwardResponse::has_prize1() const {
  return this != internal_default_instance() && prize1_ != NULL;
}
inline void RecTaskAwardResponse::clear_prize1() {
  if (GetArenaNoVirtual() == NULL && prize1_ != NULL) {
    delete prize1_;
  }
  prize1_ = NULL;
}
inline const ::Prize& RecTaskAwardResponse::prize1() const {
  const ::Prize* p = prize1_;
  // @@protoc_insertion_point(field_get:RecTaskAwardResponse.prize1)
  return p != NULL ? *p : *reinterpret_cast<const ::Prize*>(
      &::_Prize_default_instance_);
}
inline ::Prize* RecTaskAwardResponse::release_prize1() {
  // @@protoc_insertion_point(field_release:RecTaskAwardResponse.prize1)
  
  ::Prize* temp = prize1_;
  prize1_ = NULL;
  return temp;
}
inline ::Prize* RecTaskAwardResponse::mutable_prize1() {
  
  if (prize1_ == NULL) {
    prize1_ = new ::Prize;
  }
  // @@protoc_insertion_point(field_mutable:RecTaskAwardResponse.prize1)
  return prize1_;
}
inline void RecTaskAwardResponse::set_allocated_prize1(::Prize* prize1) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete prize1_;
  }
  if (prize1) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      prize1 = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, prize1, submessage_arena);
    }
    
  } else {
    
  }
  prize1_ = prize1;
  // @@protoc_insertion_point(field_set_allocated:RecTaskAwardResponse.prize1)
}

// .Prize prize2 = 2;
inline bool RecTaskAwardResponse::has_prize2() const {
  return this != internal_default_instance() && prize2_ != NULL;
}
inline void RecTaskAwardResponse::clear_prize2() {
  if (GetArenaNoVirtual() == NULL && prize2_ != NULL) {
    delete prize2_;
  }
  prize2_ = NULL;
}
inline const ::Prize& RecTaskAwardResponse::prize2() const {
  const ::Prize* p = prize2_;
  // @@protoc_insertion_point(field_get:RecTaskAwardResponse.prize2)
  return p != NULL ? *p : *reinterpret_cast<const ::Prize*>(
      &::_Prize_default_instance_);
}
inline ::Prize* RecTaskAwardResponse::release_prize2() {
  // @@protoc_insertion_point(field_release:RecTaskAwardResponse.prize2)
  
  ::Prize* temp = prize2_;
  prize2_ = NULL;
  return temp;
}
inline ::Prize* RecTaskAwardResponse::mutable_prize2() {
  
  if (prize2_ == NULL) {
    prize2_ = new ::Prize;
  }
  // @@protoc_insertion_point(field_mutable:RecTaskAwardResponse.prize2)
  return prize2_;
}
inline void RecTaskAwardResponse::set_allocated_prize2(::Prize* prize2) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete prize2_;
  }
  if (prize2) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      prize2 = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, prize2, submessage_arena);
    }
    
  } else {
    
  }
  prize2_ = prize2;
  // @@protoc_insertion_point(field_set_allocated:RecTaskAwardResponse.prize2)
}

// .Prize prize3 = 3;
inline bool RecTaskAwardResponse::has_prize3() const {
  return this != internal_default_instance() && prize3_ != NULL;
}
inline void RecTaskAwardResponse::clear_prize3() {
  if (GetArenaNoVirtual() == NULL && prize3_ != NULL) {
    delete prize3_;
  }
  prize3_ = NULL;
}
inline const ::Prize& RecTaskAwardResponse::prize3() const {
  const ::Prize* p = prize3_;
  // @@protoc_insertion_point(field_get:RecTaskAwardResponse.prize3)
  return p != NULL ? *p : *reinterpret_cast<const ::Prize*>(
      &::_Prize_default_instance_);
}
inline ::Prize* RecTaskAwardResponse::release_prize3() {
  // @@protoc_insertion_point(field_release:RecTaskAwardResponse.prize3)
  
  ::Prize* temp = prize3_;
  prize3_ = NULL;
  return temp;
}
inline ::Prize* RecTaskAwardResponse::mutable_prize3() {
  
  if (prize3_ == NULL) {
    prize3_ = new ::Prize;
  }
  // @@protoc_insertion_point(field_mutable:RecTaskAwardResponse.prize3)
  return prize3_;
}
inline void RecTaskAwardResponse::set_allocated_prize3(::Prize* prize3) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete prize3_;
  }
  if (prize3) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      prize3 = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, prize3, submessage_arena);
    }
    
  } else {
    
  }
  prize3_ = prize3;
  // @@protoc_insertion_point(field_set_allocated:RecTaskAwardResponse.prize3)
}

// -------------------------------------------------------------------

// FriendsRequest

// bool Friends = 1;
inline void FriendsRequest::clear_friends() {
  friends_ = false;
}
inline bool FriendsRequest::friends() const {
  // @@protoc_insertion_point(field_get:FriendsRequest.Friends)
  return friends_;
}
inline void FriendsRequest::set_friends(bool value) {
  
  friends_ = value;
  // @@protoc_insertion_point(field_set:FriendsRequest.Friends)
}

// -------------------------------------------------------------------

// FriendsResponse

// uint32 Id = 1;
inline void FriendsResponse::clear_id() {
  id_ = 0u;
}
inline ::google::protobuf::uint32 FriendsResponse::id() const {
  // @@protoc_insertion_point(field_get:FriendsResponse.Id)
  return id_;
}
inline void FriendsResponse::set_id(::google::protobuf::uint32 value) {
  
  id_ = value;
  // @@protoc_insertion_point(field_set:FriendsResponse.Id)
}

// string Name = 2;
inline void FriendsResponse::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& FriendsResponse::name() const {
  // @@protoc_insertion_point(field_get:FriendsResponse.Name)
  return name_.GetNoArena();
}
inline void FriendsResponse::set_name(const ::std::string& value) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:FriendsResponse.Name)
}
#if LANG_CXX11
inline void FriendsResponse::set_name(::std::string&& value) {
  
  name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:FriendsResponse.Name)
}
#endif
inline void FriendsResponse::set_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:FriendsResponse.Name)
}
inline void FriendsResponse::set_name(const char* value, size_t size) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:FriendsResponse.Name)
}
inline ::std::string* FriendsResponse::mutable_name() {
  
  // @@protoc_insertion_point(field_mutable:FriendsResponse.Name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* FriendsResponse::release_name() {
  // @@protoc_insertion_point(field_release:FriendsResponse.Name)
  
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void FriendsResponse::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    
  } else {
    
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:FriendsResponse.Name)
}

// uint32 Level = 3;
inline void FriendsResponse::clear_level() {
  level_ = 0u;
}
inline ::google::protobuf::uint32 FriendsResponse::level() const {
  // @@protoc_insertion_point(field_get:FriendsResponse.Level)
  return level_;
}
inline void FriendsResponse::set_level(::google::protobuf::uint32 value) {
  
  level_ = value;
  // @@protoc_insertion_point(field_set:FriendsResponse.Level)
}

// -------------------------------------------------------------------

// EnemiesRequest

// bool Enemies = 1;
inline void EnemiesRequest::clear_enemies() {
  enemies_ = false;
}
inline bool EnemiesRequest::enemies() const {
  // @@protoc_insertion_point(field_get:EnemiesRequest.Enemies)
  return enemies_;
}
inline void EnemiesRequest::set_enemies(bool value) {
  
  enemies_ = value;
  // @@protoc_insertion_point(field_set:EnemiesRequest.Enemies)
}

// -------------------------------------------------------------------

// EnemiesResponse

// uint32 Id = 1;
inline void EnemiesResponse::clear_id() {
  id_ = 0u;
}
inline ::google::protobuf::uint32 EnemiesResponse::id() const {
  // @@protoc_insertion_point(field_get:EnemiesResponse.Id)
  return id_;
}
inline void EnemiesResponse::set_id(::google::protobuf::uint32 value) {
  
  id_ = value;
  // @@protoc_insertion_point(field_set:EnemiesResponse.Id)
}

// string Name = 2;
inline void EnemiesResponse::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& EnemiesResponse::name() const {
  // @@protoc_insertion_point(field_get:EnemiesResponse.Name)
  return name_.GetNoArena();
}
inline void EnemiesResponse::set_name(const ::std::string& value) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:EnemiesResponse.Name)
}
#if LANG_CXX11
inline void EnemiesResponse::set_name(::std::string&& value) {
  
  name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:EnemiesResponse.Name)
}
#endif
inline void EnemiesResponse::set_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:EnemiesResponse.Name)
}
inline void EnemiesResponse::set_name(const char* value, size_t size) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:EnemiesResponse.Name)
}
inline ::std::string* EnemiesResponse::mutable_name() {
  
  // @@protoc_insertion_point(field_mutable:EnemiesResponse.Name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* EnemiesResponse::release_name() {
  // @@protoc_insertion_point(field_release:EnemiesResponse.Name)
  
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void EnemiesResponse::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    
  } else {
    
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:EnemiesResponse.Name)
}

// uint32 Level = 3;
inline void EnemiesResponse::clear_level() {
  level_ = 0u;
}
inline ::google::protobuf::uint32 EnemiesResponse::level() const {
  // @@protoc_insertion_point(field_get:EnemiesResponse.Level)
  return level_;
}
inline void EnemiesResponse::set_level(::google::protobuf::uint32 value) {
  
  level_ = value;
  // @@protoc_insertion_point(field_set:EnemiesResponse.Level)
}

// -------------------------------------------------------------------

// PlunderRequest

// bool Plunder = 1;
inline void PlunderRequest::clear_plunder() {
  plunder_ = false;
}
inline bool PlunderRequest::plunder() const {
  // @@protoc_insertion_point(field_get:PlunderRequest.Plunder)
  return plunder_;
}
inline void PlunderRequest::set_plunder(bool value) {
  
  plunder_ = value;
  // @@protoc_insertion_point(field_set:PlunderRequest.Plunder)
}

// -------------------------------------------------------------------

// PlunderResponse

// bool Success = 1;
inline void PlunderResponse::clear_success() {
  success_ = false;
}
inline bool PlunderResponse::success() const {
  // @@protoc_insertion_point(field_get:PlunderResponse.Success)
  return success_;
}
inline void PlunderResponse::set_success(bool value) {
  
  success_ = value;
  // @@protoc_insertion_point(field_set:PlunderResponse.Success)
}

// uint32 Id = 2;
inline void PlunderResponse::clear_id() {
  id_ = 0u;
}
inline ::google::protobuf::uint32 PlunderResponse::id() const {
  // @@protoc_insertion_point(field_get:PlunderResponse.Id)
  return id_;
}
inline void PlunderResponse::set_id(::google::protobuf::uint32 value) {
  
  id_ = value;
  // @@protoc_insertion_point(field_set:PlunderResponse.Id)
}

// uint32 GoldNum = 3;
inline void PlunderResponse::clear_goldnum() {
  goldnum_ = 0u;
}
inline ::google::protobuf::uint32 PlunderResponse::goldnum() const {
  // @@protoc_insertion_point(field_get:PlunderResponse.GoldNum)
  return goldnum_;
}
inline void PlunderResponse::set_goldnum(::google::protobuf::uint32 value) {
  
  goldnum_ = value;
  // @@protoc_insertion_point(field_set:PlunderResponse.GoldNum)
}

// -------------------------------------------------------------------

// UseItemRequest

// uint32 Id = 1;
inline void UseItemRequest::clear_id() {
  id_ = 0u;
}
inline ::google::protobuf::uint32 UseItemRequest::id() const {
  // @@protoc_insertion_point(field_get:UseItemRequest.Id)
  return id_;
}
inline void UseItemRequest::set_id(::google::protobuf::uint32 value) {
  
  id_ = value;
  // @@protoc_insertion_point(field_set:UseItemRequest.Id)
}

// -------------------------------------------------------------------

// UseItemResponse

// bool Success = 1;
inline void UseItemResponse::clear_success() {
  success_ = false;
}
inline bool UseItemResponse::success() const {
  // @@protoc_insertion_point(field_get:UseItemResponse.Success)
  return success_;
}
inline void UseItemResponse::set_success(bool value) {
  
  success_ = value;
  // @@protoc_insertion_point(field_set:UseItemResponse.Success)
}

// uint32 Id = 2;
inline void UseItemResponse::clear_id() {
  id_ = 0u;
}
inline ::google::protobuf::uint32 UseItemResponse::id() const {
  // @@protoc_insertion_point(field_get:UseItemResponse.Id)
  return id_;
}
inline void UseItemResponse::set_id(::google::protobuf::uint32 value) {
  
  id_ = value;
  // @@protoc_insertion_point(field_set:UseItemResponse.Id)
}

// -------------------------------------------------------------------

// ForgetSkillRequest

// uint32 skillId = 1;
inline void ForgetSkillRequest::clear_skillid() {
  skillid_ = 0u;
}
inline ::google::protobuf::uint32 ForgetSkillRequest::skillid() const {
  // @@protoc_insertion_point(field_get:ForgetSkillRequest.skillId)
  return skillid_;
}
inline void ForgetSkillRequest::set_skillid(::google::protobuf::uint32 value) {
  
  skillid_ = value;
  // @@protoc_insertion_point(field_set:ForgetSkillRequest.skillId)
}

// uint32 elfinId = 2;
inline void ForgetSkillRequest::clear_elfinid() {
  elfinid_ = 0u;
}
inline ::google::protobuf::uint32 ForgetSkillRequest::elfinid() const {
  // @@protoc_insertion_point(field_get:ForgetSkillRequest.elfinId)
  return elfinid_;
}
inline void ForgetSkillRequest::set_elfinid(::google::protobuf::uint32 value) {
  
  elfinid_ = value;
  // @@protoc_insertion_point(field_set:ForgetSkillRequest.elfinId)
}

// -------------------------------------------------------------------

// ForgetSkillResponse

// bool Success = 1;
inline void ForgetSkillResponse::clear_success() {
  success_ = false;
}
inline bool ForgetSkillResponse::success() const {
  // @@protoc_insertion_point(field_get:ForgetSkillResponse.Success)
  return success_;
}
inline void ForgetSkillResponse::set_success(bool value) {
  
  success_ = value;
  // @@protoc_insertion_point(field_set:ForgetSkillResponse.Success)
}

// uint32 skillId = 2;
inline void ForgetSkillResponse::clear_skillid() {
  skillid_ = 0u;
}
inline ::google::protobuf::uint32 ForgetSkillResponse::skillid() const {
  // @@protoc_insertion_point(field_get:ForgetSkillResponse.skillId)
  return skillid_;
}
inline void ForgetSkillResponse::set_skillid(::google::protobuf::uint32 value) {
  
  skillid_ = value;
  // @@protoc_insertion_point(field_set:ForgetSkillResponse.skillId)
}

// uint32 elfinId = 3;
inline void ForgetSkillResponse::clear_elfinid() {
  elfinid_ = 0u;
}
inline ::google::protobuf::uint32 ForgetSkillResponse::elfinid() const {
  // @@protoc_insertion_point(field_get:ForgetSkillResponse.elfinId)
  return elfinid_;
}
inline void ForgetSkillResponse::set_elfinid(::google::protobuf::uint32 value) {
  
  elfinid_ = value;
  // @@protoc_insertion_point(field_set:ForgetSkillResponse.elfinId)
}

// -------------------------------------------------------------------

// SettleAccountRequest

// uint32 ItemNum = 1;
inline void SettleAccountRequest::clear_itemnum() {
  itemnum_ = 0u;
}
inline ::google::protobuf::uint32 SettleAccountRequest::itemnum() const {
  // @@protoc_insertion_point(field_get:SettleAccountRequest.ItemNum)
  return itemnum_;
}
inline void SettleAccountRequest::set_itemnum(::google::protobuf::uint32 value) {
  
  itemnum_ = value;
  // @@protoc_insertion_point(field_set:SettleAccountRequest.ItemNum)
}

// uint32 Number = 2;
inline void SettleAccountRequest::clear_number() {
  number_ = 0u;
}
inline ::google::protobuf::uint32 SettleAccountRequest::number() const {
  // @@protoc_insertion_point(field_get:SettleAccountRequest.Number)
  return number_;
}
inline void SettleAccountRequest::set_number(::google::protobuf::uint32 value) {
  
  number_ = value;
  // @@protoc_insertion_point(field_set:SettleAccountRequest.Number)
}

// -------------------------------------------------------------------

// SettleAccountResponse

// bool success = 1;
inline void SettleAccountResponse::clear_success() {
  success_ = false;
}
inline bool SettleAccountResponse::success() const {
  // @@protoc_insertion_point(field_get:SettleAccountResponse.success)
  return success_;
}
inline void SettleAccountResponse::set_success(bool value) {
  
  success_ = value;
  // @@protoc_insertion_point(field_set:SettleAccountResponse.success)
}

// uint32 Id = 2;
inline void SettleAccountResponse::clear_id() {
  id_ = 0u;
}
inline ::google::protobuf::uint32 SettleAccountResponse::id() const {
  // @@protoc_insertion_point(field_get:SettleAccountResponse.Id)
  return id_;
}
inline void SettleAccountResponse::set_id(::google::protobuf::uint32 value) {
  
  id_ = value;
  // @@protoc_insertion_point(field_set:SettleAccountResponse.Id)
}

// uint32 Number = 3;
inline void SettleAccountResponse::clear_number() {
  number_ = 0u;
}
inline ::google::protobuf::uint32 SettleAccountResponse::number() const {
  // @@protoc_insertion_point(field_get:SettleAccountResponse.Number)
  return number_;
}
inline void SettleAccountResponse::set_number(::google::protobuf::uint32 value) {
  
  number_ = value;
  // @@protoc_insertion_point(field_set:SettleAccountResponse.Number)
}

// uint32 price = 4;
inline void SettleAccountResponse::clear_price() {
  price_ = 0u;
}
inline ::google::protobuf::uint32 SettleAccountResponse::price() const {
  // @@protoc_insertion_point(field_get:SettleAccountResponse.price)
  return price_;
}
inline void SettleAccountResponse::set_price(::google::protobuf::uint32 value) {
  
  price_ = value;
  // @@protoc_insertion_point(field_set:SettleAccountResponse.price)
}

// -------------------------------------------------------------------

// RankingRequest

// bool Ranking = 1;
inline void RankingRequest::clear_ranking() {
  ranking_ = false;
}
inline bool RankingRequest::ranking() const {
  // @@protoc_insertion_point(field_get:RankingRequest.Ranking)
  return ranking_;
}
inline void RankingRequest::set_ranking(bool value) {
  
  ranking_ = value;
  // @@protoc_insertion_point(field_set:RankingRequest.Ranking)
}

// -------------------------------------------------------------------

// RankingResponse

// uint32 Id = 1;
inline void RankingResponse::clear_id() {
  id_ = 0u;
}
inline ::google::protobuf::uint32 RankingResponse::id() const {
  // @@protoc_insertion_point(field_get:RankingResponse.Id)
  return id_;
}
inline void RankingResponse::set_id(::google::protobuf::uint32 value) {
  
  id_ = value;
  // @@protoc_insertion_point(field_set:RankingResponse.Id)
}

// string Name = 2;
inline void RankingResponse::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& RankingResponse::name() const {
  // @@protoc_insertion_point(field_get:RankingResponse.Name)
  return name_.GetNoArena();
}
inline void RankingResponse::set_name(const ::std::string& value) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:RankingResponse.Name)
}
#if LANG_CXX11
inline void RankingResponse::set_name(::std::string&& value) {
  
  name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:RankingResponse.Name)
}
#endif
inline void RankingResponse::set_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:RankingResponse.Name)
}
inline void RankingResponse::set_name(const char* value, size_t size) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:RankingResponse.Name)
}
inline ::std::string* RankingResponse::mutable_name() {
  
  // @@protoc_insertion_point(field_mutable:RankingResponse.Name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* RankingResponse::release_name() {
  // @@protoc_insertion_point(field_release:RankingResponse.Name)
  
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void RankingResponse::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    
  } else {
    
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:RankingResponse.Name)
}

// uint32 Level = 3;
inline void RankingResponse::clear_level() {
  level_ = 0u;
}
inline ::google::protobuf::uint32 RankingResponse::level() const {
  // @@protoc_insertion_point(field_get:RankingResponse.Level)
  return level_;
}
inline void RankingResponse::set_level(::google::protobuf::uint32 value) {
  
  level_ = value;
  // @@protoc_insertion_point(field_set:RankingResponse.Level)
}

// uint32 Ranking = 4;
inline void RankingResponse::clear_ranking() {
  ranking_ = 0u;
}
inline ::google::protobuf::uint32 RankingResponse::ranking() const {
  // @@protoc_insertion_point(field_get:RankingResponse.Ranking)
  return ranking_;
}
inline void RankingResponse::set_ranking(::google::protobuf::uint32 value) {
  
  ranking_ = value;
  // @@protoc_insertion_point(field_set:RankingResponse.Ranking)
}

// -------------------------------------------------------------------

// RegisterRequest

// string Account = 1;
inline void RegisterRequest::clear_account() {
  account_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& RegisterRequest::account() const {
  // @@protoc_insertion_point(field_get:RegisterRequest.Account)
  return account_.GetNoArena();
}
inline void RegisterRequest::set_account(const ::std::string& value) {
  
  account_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:RegisterRequest.Account)
}
#if LANG_CXX11
inline void RegisterRequest::set_account(::std::string&& value) {
  
  account_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:RegisterRequest.Account)
}
#endif
inline void RegisterRequest::set_account(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  account_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:RegisterRequest.Account)
}
inline void RegisterRequest::set_account(const char* value, size_t size) {
  
  account_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:RegisterRequest.Account)
}
inline ::std::string* RegisterRequest::mutable_account() {
  
  // @@protoc_insertion_point(field_mutable:RegisterRequest.Account)
  return account_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* RegisterRequest::release_account() {
  // @@protoc_insertion_point(field_release:RegisterRequest.Account)
  
  return account_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void RegisterRequest::set_allocated_account(::std::string* account) {
  if (account != NULL) {
    
  } else {
    
  }
  account_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), account);
  // @@protoc_insertion_point(field_set_allocated:RegisterRequest.Account)
}

// string Passwd = 2;
inline void RegisterRequest::clear_passwd() {
  passwd_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& RegisterRequest::passwd() const {
  // @@protoc_insertion_point(field_get:RegisterRequest.Passwd)
  return passwd_.GetNoArena();
}
inline void RegisterRequest::set_passwd(const ::std::string& value) {
  
  passwd_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:RegisterRequest.Passwd)
}
#if LANG_CXX11
inline void RegisterRequest::set_passwd(::std::string&& value) {
  
  passwd_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:RegisterRequest.Passwd)
}
#endif
inline void RegisterRequest::set_passwd(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  passwd_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:RegisterRequest.Passwd)
}
inline void RegisterRequest::set_passwd(const char* value, size_t size) {
  
  passwd_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:RegisterRequest.Passwd)
}
inline ::std::string* RegisterRequest::mutable_passwd() {
  
  // @@protoc_insertion_point(field_mutable:RegisterRequest.Passwd)
  return passwd_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* RegisterRequest::release_passwd() {
  // @@protoc_insertion_point(field_release:RegisterRequest.Passwd)
  
  return passwd_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void RegisterRequest::set_allocated_passwd(::std::string* passwd) {
  if (passwd != NULL) {
    
  } else {
    
  }
  passwd_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), passwd);
  // @@protoc_insertion_point(field_set_allocated:RegisterRequest.Passwd)
}

// string Name = 3;
inline void RegisterRequest::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& RegisterRequest::name() const {
  // @@protoc_insertion_point(field_get:RegisterRequest.Name)
  return name_.GetNoArena();
}
inline void RegisterRequest::set_name(const ::std::string& value) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:RegisterRequest.Name)
}
#if LANG_CXX11
inline void RegisterRequest::set_name(::std::string&& value) {
  
  name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:RegisterRequest.Name)
}
#endif
inline void RegisterRequest::set_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:RegisterRequest.Name)
}
inline void RegisterRequest::set_name(const char* value, size_t size) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:RegisterRequest.Name)
}
inline ::std::string* RegisterRequest::mutable_name() {
  
  // @@protoc_insertion_point(field_mutable:RegisterRequest.Name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* RegisterRequest::release_name() {
  // @@protoc_insertion_point(field_release:RegisterRequest.Name)
  
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void RegisterRequest::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    
  } else {
    
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:RegisterRequest.Name)
}

// -------------------------------------------------------------------

// RegisterResponse

// bool Success = 1;
inline void RegisterResponse::clear_success() {
  success_ = false;
}
inline bool RegisterResponse::success() const {
  // @@protoc_insertion_point(field_get:RegisterResponse.Success)
  return success_;
}
inline void RegisterResponse::set_success(bool value) {
  
  success_ = value;
  // @@protoc_insertion_point(field_set:RegisterResponse.Success)
}

// -------------------------------------------------------------------

// SolarUpgradeRequest

// bool Solar = 1;
inline void SolarUpgradeRequest::clear_solar() {
  solar_ = false;
}
inline bool SolarUpgradeRequest::solar() const {
  // @@protoc_insertion_point(field_get:SolarUpgradeRequest.Solar)
  return solar_;
}
inline void SolarUpgradeRequest::set_solar(bool value) {
  
  solar_ = value;
  // @@protoc_insertion_point(field_set:SolarUpgradeRequest.Solar)
}

// -------------------------------------------------------------------

// SolarUpgradeResponse

// bool Solar = 1;
inline void SolarUpgradeResponse::clear_solar() {
  solar_ = false;
}
inline bool SolarUpgradeResponse::solar() const {
  // @@protoc_insertion_point(field_get:SolarUpgradeResponse.Solar)
  return solar_;
}
inline void SolarUpgradeResponse::set_solar(bool value) {
  
  solar_ = value;
  // @@protoc_insertion_point(field_set:SolarUpgradeResponse.Solar)
}

// -------------------------------------------------------------------

// SkillUpgradeRequest

// uint32 ElfinID = 1;
inline void SkillUpgradeRequest::clear_elfinid() {
  elfinid_ = 0u;
}
inline ::google::protobuf::uint32 SkillUpgradeRequest::elfinid() const {
  // @@protoc_insertion_point(field_get:SkillUpgradeRequest.ElfinID)
  return elfinid_;
}
inline void SkillUpgradeRequest::set_elfinid(::google::protobuf::uint32 value) {
  
  elfinid_ = value;
  // @@protoc_insertion_point(field_set:SkillUpgradeRequest.ElfinID)
}

// uint32 SkillID = 2;
inline void SkillUpgradeRequest::clear_skillid() {
  skillid_ = 0u;
}
inline ::google::protobuf::uint32 SkillUpgradeRequest::skillid() const {
  // @@protoc_insertion_point(field_get:SkillUpgradeRequest.SkillID)
  return skillid_;
}
inline void SkillUpgradeRequest::set_skillid(::google::protobuf::uint32 value) {
  
  skillid_ = value;
  // @@protoc_insertion_point(field_set:SkillUpgradeRequest.SkillID)
}

// -------------------------------------------------------------------

// SkillUpgradeResponse

// bool Success = 1;
inline void SkillUpgradeResponse::clear_success() {
  success_ = false;
}
inline bool SkillUpgradeResponse::success() const {
  // @@protoc_insertion_point(field_get:SkillUpgradeResponse.Success)
  return success_;
}
inline void SkillUpgradeResponse::set_success(bool value) {
  
  success_ = value;
  // @@protoc_insertion_point(field_set:SkillUpgradeResponse.Success)
}

// uint32 ElfinID = 2;
inline void SkillUpgradeResponse::clear_elfinid() {
  elfinid_ = 0u;
}
inline ::google::protobuf::uint32 SkillUpgradeResponse::elfinid() const {
  // @@protoc_insertion_point(field_get:SkillUpgradeResponse.ElfinID)
  return elfinid_;
}
inline void SkillUpgradeResponse::set_elfinid(::google::protobuf::uint32 value) {
  
  elfinid_ = value;
  // @@protoc_insertion_point(field_set:SkillUpgradeResponse.ElfinID)
}

// uint32 SkillID = 3;
inline void SkillUpgradeResponse::clear_skillid() {
  skillid_ = 0u;
}
inline ::google::protobuf::uint32 SkillUpgradeResponse::skillid() const {
  // @@protoc_insertion_point(field_get:SkillUpgradeResponse.SkillID)
  return skillid_;
}
inline void SkillUpgradeResponse::set_skillid(::google::protobuf::uint32 value) {
  
  skillid_ = value;
  // @@protoc_insertion_point(field_set:SkillUpgradeResponse.SkillID)
}

// -------------------------------------------------------------------

// TreeUpgradeRequest

// bool Tree = 1;
inline void TreeUpgradeRequest::clear_tree() {
  tree_ = false;
}
inline bool TreeUpgradeRequest::tree() const {
  // @@protoc_insertion_point(field_get:TreeUpgradeRequest.Tree)
  return tree_;
}
inline void TreeUpgradeRequest::set_tree(bool value) {
  
  tree_ = value;
  // @@protoc_insertion_point(field_set:TreeUpgradeRequest.Tree)
}

// -------------------------------------------------------------------

// TreeUpgradeResponse

// bool Success = 1;
inline void TreeUpgradeResponse::clear_success() {
  success_ = false;
}
inline bool TreeUpgradeResponse::success() const {
  // @@protoc_insertion_point(field_get:TreeUpgradeResponse.Success)
  return success_;
}
inline void TreeUpgradeResponse::set_success(bool value) {
  
  success_ = value;
  // @@protoc_insertion_point(field_set:TreeUpgradeResponse.Success)
}

// -------------------------------------------------------------------

// ElfinUpgradeRequest

// uint32 ElfinID = 1;
inline void ElfinUpgradeRequest::clear_elfinid() {
  elfinid_ = 0u;
}
inline ::google::protobuf::uint32 ElfinUpgradeRequest::elfinid() const {
  // @@protoc_insertion_point(field_get:ElfinUpgradeRequest.ElfinID)
  return elfinid_;
}
inline void ElfinUpgradeRequest::set_elfinid(::google::protobuf::uint32 value) {
  
  elfinid_ = value;
  // @@protoc_insertion_point(field_set:ElfinUpgradeRequest.ElfinID)
}

// -------------------------------------------------------------------

// ElfinUpgradeResponse

// bool Success = 1;
inline void ElfinUpgradeResponse::clear_success() {
  success_ = false;
}
inline bool ElfinUpgradeResponse::success() const {
  // @@protoc_insertion_point(field_get:ElfinUpgradeResponse.Success)
  return success_;
}
inline void ElfinUpgradeResponse::set_success(bool value) {
  
  success_ = value;
  // @@protoc_insertion_point(field_set:ElfinUpgradeResponse.Success)
}

// uint32 ElfinID = 2;
inline void ElfinUpgradeResponse::clear_elfinid() {
  elfinid_ = 0u;
}
inline ::google::protobuf::uint32 ElfinUpgradeResponse::elfinid() const {
  // @@protoc_insertion_point(field_get:ElfinUpgradeResponse.ElfinID)
  return elfinid_;
}
inline void ElfinUpgradeResponse::set_elfinid(::google::protobuf::uint32 value) {
  
  elfinid_ = value;
  // @@protoc_insertion_point(field_set:ElfinUpgradeResponse.ElfinID)
}

// -------------------------------------------------------------------

// Request

// .LoginRequest Login = 1;
inline bool Request::has_login() const {
  return this != internal_default_instance() && login_ != NULL;
}
inline void Request::clear_login() {
  if (GetArenaNoVirtual() == NULL && login_ != NULL) {
    delete login_;
  }
  login_ = NULL;
}
inline const ::LoginRequest& Request::login() const {
  const ::LoginRequest* p = login_;
  // @@protoc_insertion_point(field_get:Request.Login)
  return p != NULL ? *p : *reinterpret_cast<const ::LoginRequest*>(
      &::_LoginRequest_default_instance_);
}
inline ::LoginRequest* Request::release_login() {
  // @@protoc_insertion_point(field_release:Request.Login)
  
  ::LoginRequest* temp = login_;
  login_ = NULL;
  return temp;
}
inline ::LoginRequest* Request::mutable_login() {
  
  if (login_ == NULL) {
    login_ = new ::LoginRequest;
  }
  // @@protoc_insertion_point(field_mutable:Request.Login)
  return login_;
}
inline void Request::set_allocated_login(::LoginRequest* login) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete login_;
  }
  if (login) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      login = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, login, submessage_arena);
    }
    
  } else {
    
  }
  login_ = login;
  // @@protoc_insertion_point(field_set_allocated:Request.Login)
}

// .ElfinRequest Elfin = 2;
inline bool Request::has_elfin() const {
  return this != internal_default_instance() && elfin_ != NULL;
}
inline void Request::clear_elfin() {
  if (GetArenaNoVirtual() == NULL && elfin_ != NULL) {
    delete elfin_;
  }
  elfin_ = NULL;
}
inline const ::ElfinRequest& Request::elfin() const {
  const ::ElfinRequest* p = elfin_;
  // @@protoc_insertion_point(field_get:Request.Elfin)
  return p != NULL ? *p : *reinterpret_cast<const ::ElfinRequest*>(
      &::_ElfinRequest_default_instance_);
}
inline ::ElfinRequest* Request::release_elfin() {
  // @@protoc_insertion_point(field_release:Request.Elfin)
  
  ::ElfinRequest* temp = elfin_;
  elfin_ = NULL;
  return temp;
}
inline ::ElfinRequest* Request::mutable_elfin() {
  
  if (elfin_ == NULL) {
    elfin_ = new ::ElfinRequest;
  }
  // @@protoc_insertion_point(field_mutable:Request.Elfin)
  return elfin_;
}
inline void Request::set_allocated_elfin(::ElfinRequest* elfin) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete elfin_;
  }
  if (elfin) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      elfin = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, elfin, submessage_arena);
    }
    
  } else {
    
  }
  elfin_ = elfin;
  // @@protoc_insertion_point(field_set_allocated:Request.Elfin)
}

// .RollRequest Roll = 3;
inline bool Request::has_roll() const {
  return this != internal_default_instance() && roll_ != NULL;
}
inline void Request::clear_roll() {
  if (GetArenaNoVirtual() == NULL && roll_ != NULL) {
    delete roll_;
  }
  roll_ = NULL;
}
inline const ::RollRequest& Request::roll() const {
  const ::RollRequest* p = roll_;
  // @@protoc_insertion_point(field_get:Request.Roll)
  return p != NULL ? *p : *reinterpret_cast<const ::RollRequest*>(
      &::_RollRequest_default_instance_);
}
inline ::RollRequest* Request::release_roll() {
  // @@protoc_insertion_point(field_release:Request.Roll)
  
  ::RollRequest* temp = roll_;
  roll_ = NULL;
  return temp;
}
inline ::RollRequest* Request::mutable_roll() {
  
  if (roll_ == NULL) {
    roll_ = new ::RollRequest;
  }
  // @@protoc_insertion_point(field_mutable:Request.Roll)
  return roll_;
}
inline void Request::set_allocated_roll(::RollRequest* roll) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete roll_;
  }
  if (roll) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      roll = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, roll, submessage_arena);
    }
    
  } else {
    
  }
  roll_ = roll;
  // @@protoc_insertion_point(field_set_allocated:Request.Roll)
}

// .TreeRequest Tree = 4;
inline bool Request::has_tree() const {
  return this != internal_default_instance() && tree_ != NULL;
}
inline void Request::clear_tree() {
  if (GetArenaNoVirtual() == NULL && tree_ != NULL) {
    delete tree_;
  }
  tree_ = NULL;
}
inline const ::TreeRequest& Request::tree() const {
  const ::TreeRequest* p = tree_;
  // @@protoc_insertion_point(field_get:Request.Tree)
  return p != NULL ? *p : *reinterpret_cast<const ::TreeRequest*>(
      &::_TreeRequest_default_instance_);
}
inline ::TreeRequest* Request::release_tree() {
  // @@protoc_insertion_point(field_release:Request.Tree)
  
  ::TreeRequest* temp = tree_;
  tree_ = NULL;
  return temp;
}
inline ::TreeRequest* Request::mutable_tree() {
  
  if (tree_ == NULL) {
    tree_ = new ::TreeRequest;
  }
  // @@protoc_insertion_point(field_mutable:Request.Tree)
  return tree_;
}
inline void Request::set_allocated_tree(::TreeRequest* tree) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete tree_;
  }
  if (tree) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      tree = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, tree, submessage_arena);
    }
    
  } else {
    
  }
  tree_ = tree;
  // @@protoc_insertion_point(field_set_allocated:Request.Tree)
}

// .ResourceRequest Resource = 5;
inline bool Request::has_resource() const {
  return this != internal_default_instance() && resource_ != NULL;
}
inline void Request::clear_resource() {
  if (GetArenaNoVirtual() == NULL && resource_ != NULL) {
    delete resource_;
  }
  resource_ = NULL;
}
inline const ::ResourceRequest& Request::resource() const {
  const ::ResourceRequest* p = resource_;
  // @@protoc_insertion_point(field_get:Request.Resource)
  return p != NULL ? *p : *reinterpret_cast<const ::ResourceRequest*>(
      &::_ResourceRequest_default_instance_);
}
inline ::ResourceRequest* Request::release_resource() {
  // @@protoc_insertion_point(field_release:Request.Resource)
  
  ::ResourceRequest* temp = resource_;
  resource_ = NULL;
  return temp;
}
inline ::ResourceRequest* Request::mutable_resource() {
  
  if (resource_ == NULL) {
    resource_ = new ::ResourceRequest;
  }
  // @@protoc_insertion_point(field_mutable:Request.Resource)
  return resource_;
}
inline void Request::set_allocated_resource(::ResourceRequest* resource) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete resource_;
  }
  if (resource) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      resource = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, resource, submessage_arena);
    }
    
  } else {
    
  }
  resource_ = resource;
  // @@protoc_insertion_point(field_set_allocated:Request.Resource)
}

// .TasksRequest Tasks = 6;
inline bool Request::has_tasks() const {
  return this != internal_default_instance() && tasks_ != NULL;
}
inline void Request::clear_tasks() {
  if (GetArenaNoVirtual() == NULL && tasks_ != NULL) {
    delete tasks_;
  }
  tasks_ = NULL;
}
inline const ::TasksRequest& Request::tasks() const {
  const ::TasksRequest* p = tasks_;
  // @@protoc_insertion_point(field_get:Request.Tasks)
  return p != NULL ? *p : *reinterpret_cast<const ::TasksRequest*>(
      &::_TasksRequest_default_instance_);
}
inline ::TasksRequest* Request::release_tasks() {
  // @@protoc_insertion_point(field_release:Request.Tasks)
  
  ::TasksRequest* temp = tasks_;
  tasks_ = NULL;
  return temp;
}
inline ::TasksRequest* Request::mutable_tasks() {
  
  if (tasks_ == NULL) {
    tasks_ = new ::TasksRequest;
  }
  // @@protoc_insertion_point(field_mutable:Request.Tasks)
  return tasks_;
}
inline void Request::set_allocated_tasks(::TasksRequest* tasks) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete tasks_;
  }
  if (tasks) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      tasks = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, tasks, submessage_arena);
    }
    
  } else {
    
  }
  tasks_ = tasks;
  // @@protoc_insertion_point(field_set_allocated:Request.Tasks)
}

// .MailsRequest Mails = 7;
inline bool Request::has_mails() const {
  return this != internal_default_instance() && mails_ != NULL;
}
inline void Request::clear_mails() {
  if (GetArenaNoVirtual() == NULL && mails_ != NULL) {
    delete mails_;
  }
  mails_ = NULL;
}
inline const ::MailsRequest& Request::mails() const {
  const ::MailsRequest* p = mails_;
  // @@protoc_insertion_point(field_get:Request.Mails)
  return p != NULL ? *p : *reinterpret_cast<const ::MailsRequest*>(
      &::_MailsRequest_default_instance_);
}
inline ::MailsRequest* Request::release_mails() {
  // @@protoc_insertion_point(field_release:Request.Mails)
  
  ::MailsRequest* temp = mails_;
  mails_ = NULL;
  return temp;
}
inline ::MailsRequest* Request::mutable_mails() {
  
  if (mails_ == NULL) {
    mails_ = new ::MailsRequest;
  }
  // @@protoc_insertion_point(field_mutable:Request.Mails)
  return mails_;
}
inline void Request::set_allocated_mails(::MailsRequest* mails) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete mails_;
  }
  if (mails) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      mails = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, mails, submessage_arena);
    }
    
  } else {
    
  }
  mails_ = mails;
  // @@protoc_insertion_point(field_set_allocated:Request.Mails)
}

// .SunRequest Sun = 8;
inline bool Request::has_sun() const {
  return this != internal_default_instance() && sun_ != NULL;
}
inline void Request::clear_sun() {
  if (GetArenaNoVirtual() == NULL && sun_ != NULL) {
    delete sun_;
  }
  sun_ = NULL;
}
inline const ::SunRequest& Request::sun() const {
  const ::SunRequest* p = sun_;
  // @@protoc_insertion_point(field_get:Request.Sun)
  return p != NULL ? *p : *reinterpret_cast<const ::SunRequest*>(
      &::_SunRequest_default_instance_);
}
inline ::SunRequest* Request::release_sun() {
  // @@protoc_insertion_point(field_release:Request.Sun)
  
  ::SunRequest* temp = sun_;
  sun_ = NULL;
  return temp;
}
inline ::SunRequest* Request::mutable_sun() {
  
  if (sun_ == NULL) {
    sun_ = new ::SunRequest;
  }
  // @@protoc_insertion_point(field_mutable:Request.Sun)
  return sun_;
}
inline void Request::set_allocated_sun(::SunRequest* sun) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete sun_;
  }
  if (sun) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      sun = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, sun, submessage_arena);
    }
    
  } else {
    
  }
  sun_ = sun;
  // @@protoc_insertion_point(field_set_allocated:Request.Sun)
}

// .TreeEnchantmentRequest TreeEnchantment = 9;
inline bool Request::has_treeenchantment() const {
  return this != internal_default_instance() && treeenchantment_ != NULL;
}
inline void Request::clear_treeenchantment() {
  if (GetArenaNoVirtual() == NULL && treeenchantment_ != NULL) {
    delete treeenchantment_;
  }
  treeenchantment_ = NULL;
}
inline const ::TreeEnchantmentRequest& Request::treeenchantment() const {
  const ::TreeEnchantmentRequest* p = treeenchantment_;
  // @@protoc_insertion_point(field_get:Request.TreeEnchantment)
  return p != NULL ? *p : *reinterpret_cast<const ::TreeEnchantmentRequest*>(
      &::_TreeEnchantmentRequest_default_instance_);
}
inline ::TreeEnchantmentRequest* Request::release_treeenchantment() {
  // @@protoc_insertion_point(field_release:Request.TreeEnchantment)
  
  ::TreeEnchantmentRequest* temp = treeenchantment_;
  treeenchantment_ = NULL;
  return temp;
}
inline ::TreeEnchantmentRequest* Request::mutable_treeenchantment() {
  
  if (treeenchantment_ == NULL) {
    treeenchantment_ = new ::TreeEnchantmentRequest;
  }
  // @@protoc_insertion_point(field_mutable:Request.TreeEnchantment)
  return treeenchantment_;
}
inline void Request::set_allocated_treeenchantment(::TreeEnchantmentRequest* treeenchantment) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete treeenchantment_;
  }
  if (treeenchantment) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      treeenchantment = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, treeenchantment, submessage_arena);
    }
    
  } else {
    
  }
  treeenchantment_ = treeenchantment;
  // @@protoc_insertion_point(field_set_allocated:Request.TreeEnchantment)
}

// .StoreAllRequest StoreAll = 10;
inline bool Request::has_storeall() const {
  return this != internal_default_instance() && storeall_ != NULL;
}
inline void Request::clear_storeall() {
  if (GetArenaNoVirtual() == NULL && storeall_ != NULL) {
    delete storeall_;
  }
  storeall_ = NULL;
}
inline const ::StoreAllRequest& Request::storeall() const {
  const ::StoreAllRequest* p = storeall_;
  // @@protoc_insertion_point(field_get:Request.StoreAll)
  return p != NULL ? *p : *reinterpret_cast<const ::StoreAllRequest*>(
      &::_StoreAllRequest_default_instance_);
}
inline ::StoreAllRequest* Request::release_storeall() {
  // @@protoc_insertion_point(field_release:Request.StoreAll)
  
  ::StoreAllRequest* temp = storeall_;
  storeall_ = NULL;
  return temp;
}
inline ::StoreAllRequest* Request::mutable_storeall() {
  
  if (storeall_ == NULL) {
    storeall_ = new ::StoreAllRequest;
  }
  // @@protoc_insertion_point(field_mutable:Request.StoreAll)
  return storeall_;
}
inline void Request::set_allocated_storeall(::StoreAllRequest* storeall) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete storeall_;
  }
  if (storeall) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      storeall = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, storeall, submessage_arena);
    }
    
  } else {
    
  }
  storeall_ = storeall;
  // @@protoc_insertion_point(field_set_allocated:Request.StoreAll)
}

// .StoreEquRequest StoreEqu = 11;
inline bool Request::has_storeequ() const {
  return this != internal_default_instance() && storeequ_ != NULL;
}
inline void Request::clear_storeequ() {
  if (GetArenaNoVirtual() == NULL && storeequ_ != NULL) {
    delete storeequ_;
  }
  storeequ_ = NULL;
}
inline const ::StoreEquRequest& Request::storeequ() const {
  const ::StoreEquRequest* p = storeequ_;
  // @@protoc_insertion_point(field_get:Request.StoreEqu)
  return p != NULL ? *p : *reinterpret_cast<const ::StoreEquRequest*>(
      &::_StoreEquRequest_default_instance_);
}
inline ::StoreEquRequest* Request::release_storeequ() {
  // @@protoc_insertion_point(field_release:Request.StoreEqu)
  
  ::StoreEquRequest* temp = storeequ_;
  storeequ_ = NULL;
  return temp;
}
inline ::StoreEquRequest* Request::mutable_storeequ() {
  
  if (storeequ_ == NULL) {
    storeequ_ = new ::StoreEquRequest;
  }
  // @@protoc_insertion_point(field_mutable:Request.StoreEqu)
  return storeequ_;
}
inline void Request::set_allocated_storeequ(::StoreEquRequest* storeequ) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete storeequ_;
  }
  if (storeequ) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      storeequ = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, storeequ, submessage_arena);
    }
    
  } else {
    
  }
  storeequ_ = storeequ;
  // @@protoc_insertion_point(field_set_allocated:Request.StoreEqu)
}

// .StoreWaterRequest StoreWater = 12;
inline bool Request::has_storewater() const {
  return this != internal_default_instance() && storewater_ != NULL;
}
inline void Request::clear_storewater() {
  if (GetArenaNoVirtual() == NULL && storewater_ != NULL) {
    delete storewater_;
  }
  storewater_ = NULL;
}
inline const ::StoreWaterRequest& Request::storewater() const {
  const ::StoreWaterRequest* p = storewater_;
  // @@protoc_insertion_point(field_get:Request.StoreWater)
  return p != NULL ? *p : *reinterpret_cast<const ::StoreWaterRequest*>(
      &::_StoreWaterRequest_default_instance_);
}
inline ::StoreWaterRequest* Request::release_storewater() {
  // @@protoc_insertion_point(field_release:Request.StoreWater)
  
  ::StoreWaterRequest* temp = storewater_;
  storewater_ = NULL;
  return temp;
}
inline ::StoreWaterRequest* Request::mutable_storewater() {
  
  if (storewater_ == NULL) {
    storewater_ = new ::StoreWaterRequest;
  }
  // @@protoc_insertion_point(field_mutable:Request.StoreWater)
  return storewater_;
}
inline void Request::set_allocated_storewater(::StoreWaterRequest* storewater) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete storewater_;
  }
  if (storewater) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      storewater = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, storewater, submessage_arena);
    }
    
  } else {
    
  }
  storewater_ = storewater;
  // @@protoc_insertion_point(field_set_allocated:Request.StoreWater)
}

// .StoreSpePropsRequest StoreSpeProps = 13;
inline bool Request::has_storespeprops() const {
  return this != internal_default_instance() && storespeprops_ != NULL;
}
inline void Request::clear_storespeprops() {
  if (GetArenaNoVirtual() == NULL && storespeprops_ != NULL) {
    delete storespeprops_;
  }
  storespeprops_ = NULL;
}
inline const ::StoreSpePropsRequest& Request::storespeprops() const {
  const ::StoreSpePropsRequest* p = storespeprops_;
  // @@protoc_insertion_point(field_get:Request.StoreSpeProps)
  return p != NULL ? *p : *reinterpret_cast<const ::StoreSpePropsRequest*>(
      &::_StoreSpePropsRequest_default_instance_);
}
inline ::StoreSpePropsRequest* Request::release_storespeprops() {
  // @@protoc_insertion_point(field_release:Request.StoreSpeProps)
  
  ::StoreSpePropsRequest* temp = storespeprops_;
  storespeprops_ = NULL;
  return temp;
}
inline ::StoreSpePropsRequest* Request::mutable_storespeprops() {
  
  if (storespeprops_ == NULL) {
    storespeprops_ = new ::StoreSpePropsRequest;
  }
  // @@protoc_insertion_point(field_mutable:Request.StoreSpeProps)
  return storespeprops_;
}
inline void Request::set_allocated_storespeprops(::StoreSpePropsRequest* storespeprops) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete storespeprops_;
  }
  if (storespeprops) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      storespeprops = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, storespeprops, submessage_arena);
    }
    
  } else {
    
  }
  storespeprops_ = storespeprops;
  // @@protoc_insertion_point(field_set_allocated:Request.StoreSpeProps)
}

// .WarehouseRequest Warehouse = 14;
inline bool Request::has_warehouse() const {
  return this != internal_default_instance() && warehouse_ != NULL;
}
inline void Request::clear_warehouse() {
  if (GetArenaNoVirtual() == NULL && warehouse_ != NULL) {
    delete warehouse_;
  }
  warehouse_ = NULL;
}
inline const ::WarehouseRequest& Request::warehouse() const {
  const ::WarehouseRequest* p = warehouse_;
  // @@protoc_insertion_point(field_get:Request.Warehouse)
  return p != NULL ? *p : *reinterpret_cast<const ::WarehouseRequest*>(
      &::_WarehouseRequest_default_instance_);
}
inline ::WarehouseRequest* Request::release_warehouse() {
  // @@protoc_insertion_point(field_release:Request.Warehouse)
  
  ::WarehouseRequest* temp = warehouse_;
  warehouse_ = NULL;
  return temp;
}
inline ::WarehouseRequest* Request::mutable_warehouse() {
  
  if (warehouse_ == NULL) {
    warehouse_ = new ::WarehouseRequest;
  }
  // @@protoc_insertion_point(field_mutable:Request.Warehouse)
  return warehouse_;
}
inline void Request::set_allocated_warehouse(::WarehouseRequest* warehouse) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete warehouse_;
  }
  if (warehouse) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      warehouse = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, warehouse, submessage_arena);
    }
    
  } else {
    
  }
  warehouse_ = warehouse;
  // @@protoc_insertion_point(field_set_allocated:Request.Warehouse)
}

// .DelMailRequest DelMail = 15;
inline bool Request::has_delmail() const {
  return this != internal_default_instance() && delmail_ != NULL;
}
inline void Request::clear_delmail() {
  if (GetArenaNoVirtual() == NULL && delmail_ != NULL) {
    delete delmail_;
  }
  delmail_ = NULL;
}
inline const ::DelMailRequest& Request::delmail() const {
  const ::DelMailRequest* p = delmail_;
  // @@protoc_insertion_point(field_get:Request.DelMail)
  return p != NULL ? *p : *reinterpret_cast<const ::DelMailRequest*>(
      &::_DelMailRequest_default_instance_);
}
inline ::DelMailRequest* Request::release_delmail() {
  // @@protoc_insertion_point(field_release:Request.DelMail)
  
  ::DelMailRequest* temp = delmail_;
  delmail_ = NULL;
  return temp;
}
inline ::DelMailRequest* Request::mutable_delmail() {
  
  if (delmail_ == NULL) {
    delmail_ = new ::DelMailRequest;
  }
  // @@protoc_insertion_point(field_mutable:Request.DelMail)
  return delmail_;
}
inline void Request::set_allocated_delmail(::DelMailRequest* delmail) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete delmail_;
  }
  if (delmail) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      delmail = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, delmail, submessage_arena);
    }
    
  } else {
    
  }
  delmail_ = delmail;
  // @@protoc_insertion_point(field_set_allocated:Request.DelMail)
}

// .ClaimedTaskRequest ClaimedTask = 16;
inline bool Request::has_claimedtask() const {
  return this != internal_default_instance() && claimedtask_ != NULL;
}
inline void Request::clear_claimedtask() {
  if (GetArenaNoVirtual() == NULL && claimedtask_ != NULL) {
    delete claimedtask_;
  }
  claimedtask_ = NULL;
}
inline const ::ClaimedTaskRequest& Request::claimedtask() const {
  const ::ClaimedTaskRequest* p = claimedtask_;
  // @@protoc_insertion_point(field_get:Request.ClaimedTask)
  return p != NULL ? *p : *reinterpret_cast<const ::ClaimedTaskRequest*>(
      &::_ClaimedTaskRequest_default_instance_);
}
inline ::ClaimedTaskRequest* Request::release_claimedtask() {
  // @@protoc_insertion_point(field_release:Request.ClaimedTask)
  
  ::ClaimedTaskRequest* temp = claimedtask_;
  claimedtask_ = NULL;
  return temp;
}
inline ::ClaimedTaskRequest* Request::mutable_claimedtask() {
  
  if (claimedtask_ == NULL) {
    claimedtask_ = new ::ClaimedTaskRequest;
  }
  // @@protoc_insertion_point(field_mutable:Request.ClaimedTask)
  return claimedtask_;
}
inline void Request::set_allocated_claimedtask(::ClaimedTaskRequest* claimedtask) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete claimedtask_;
  }
  if (claimedtask) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      claimedtask = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, claimedtask, submessage_arena);
    }
    
  } else {
    
  }
  claimedtask_ = claimedtask;
  // @@protoc_insertion_point(field_set_allocated:Request.ClaimedTask)
}

// .RecTaskAwardRequest RecTaskAward = 17;
inline bool Request::has_rectaskaward() const {
  return this != internal_default_instance() && rectaskaward_ != NULL;
}
inline void Request::clear_rectaskaward() {
  if (GetArenaNoVirtual() == NULL && rectaskaward_ != NULL) {
    delete rectaskaward_;
  }
  rectaskaward_ = NULL;
}
inline const ::RecTaskAwardRequest& Request::rectaskaward() const {
  const ::RecTaskAwardRequest* p = rectaskaward_;
  // @@protoc_insertion_point(field_get:Request.RecTaskAward)
  return p != NULL ? *p : *reinterpret_cast<const ::RecTaskAwardRequest*>(
      &::_RecTaskAwardRequest_default_instance_);
}
inline ::RecTaskAwardRequest* Request::release_rectaskaward() {
  // @@protoc_insertion_point(field_release:Request.RecTaskAward)
  
  ::RecTaskAwardRequest* temp = rectaskaward_;
  rectaskaward_ = NULL;
  return temp;
}
inline ::RecTaskAwardRequest* Request::mutable_rectaskaward() {
  
  if (rectaskaward_ == NULL) {
    rectaskaward_ = new ::RecTaskAwardRequest;
  }
  // @@protoc_insertion_point(field_mutable:Request.RecTaskAward)
  return rectaskaward_;
}
inline void Request::set_allocated_rectaskaward(::RecTaskAwardRequest* rectaskaward) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete rectaskaward_;
  }
  if (rectaskaward) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      rectaskaward = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, rectaskaward, submessage_arena);
    }
    
  } else {
    
  }
  rectaskaward_ = rectaskaward;
  // @@protoc_insertion_point(field_set_allocated:Request.RecTaskAward)
}

// .FriendsRequest Friends = 18;
inline bool Request::has_friends() const {
  return this != internal_default_instance() && friends_ != NULL;
}
inline void Request::clear_friends() {
  if (GetArenaNoVirtual() == NULL && friends_ != NULL) {
    delete friends_;
  }
  friends_ = NULL;
}
inline const ::FriendsRequest& Request::friends() const {
  const ::FriendsRequest* p = friends_;
  // @@protoc_insertion_point(field_get:Request.Friends)
  return p != NULL ? *p : *reinterpret_cast<const ::FriendsRequest*>(
      &::_FriendsRequest_default_instance_);
}
inline ::FriendsRequest* Request::release_friends() {
  // @@protoc_insertion_point(field_release:Request.Friends)
  
  ::FriendsRequest* temp = friends_;
  friends_ = NULL;
  return temp;
}
inline ::FriendsRequest* Request::mutable_friends() {
  
  if (friends_ == NULL) {
    friends_ = new ::FriendsRequest;
  }
  // @@protoc_insertion_point(field_mutable:Request.Friends)
  return friends_;
}
inline void Request::set_allocated_friends(::FriendsRequest* friends) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete friends_;
  }
  if (friends) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      friends = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, friends, submessage_arena);
    }
    
  } else {
    
  }
  friends_ = friends;
  // @@protoc_insertion_point(field_set_allocated:Request.Friends)
}

// .EnemiesRequest Enemies = 19;
inline bool Request::has_enemies() const {
  return this != internal_default_instance() && enemies_ != NULL;
}
inline void Request::clear_enemies() {
  if (GetArenaNoVirtual() == NULL && enemies_ != NULL) {
    delete enemies_;
  }
  enemies_ = NULL;
}
inline const ::EnemiesRequest& Request::enemies() const {
  const ::EnemiesRequest* p = enemies_;
  // @@protoc_insertion_point(field_get:Request.Enemies)
  return p != NULL ? *p : *reinterpret_cast<const ::EnemiesRequest*>(
      &::_EnemiesRequest_default_instance_);
}
inline ::EnemiesRequest* Request::release_enemies() {
  // @@protoc_insertion_point(field_release:Request.Enemies)
  
  ::EnemiesRequest* temp = enemies_;
  enemies_ = NULL;
  return temp;
}
inline ::EnemiesRequest* Request::mutable_enemies() {
  
  if (enemies_ == NULL) {
    enemies_ = new ::EnemiesRequest;
  }
  // @@protoc_insertion_point(field_mutable:Request.Enemies)
  return enemies_;
}
inline void Request::set_allocated_enemies(::EnemiesRequest* enemies) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete enemies_;
  }
  if (enemies) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      enemies = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, enemies, submessage_arena);
    }
    
  } else {
    
  }
  enemies_ = enemies;
  // @@protoc_insertion_point(field_set_allocated:Request.Enemies)
}

// .PlunderRequest Plunder = 20;
inline bool Request::has_plunder() const {
  return this != internal_default_instance() && plunder_ != NULL;
}
inline void Request::clear_plunder() {
  if (GetArenaNoVirtual() == NULL && plunder_ != NULL) {
    delete plunder_;
  }
  plunder_ = NULL;
}
inline const ::PlunderRequest& Request::plunder() const {
  const ::PlunderRequest* p = plunder_;
  // @@protoc_insertion_point(field_get:Request.Plunder)
  return p != NULL ? *p : *reinterpret_cast<const ::PlunderRequest*>(
      &::_PlunderRequest_default_instance_);
}
inline ::PlunderRequest* Request::release_plunder() {
  // @@protoc_insertion_point(field_release:Request.Plunder)
  
  ::PlunderRequest* temp = plunder_;
  plunder_ = NULL;
  return temp;
}
inline ::PlunderRequest* Request::mutable_plunder() {
  
  if (plunder_ == NULL) {
    plunder_ = new ::PlunderRequest;
  }
  // @@protoc_insertion_point(field_mutable:Request.Plunder)
  return plunder_;
}
inline void Request::set_allocated_plunder(::PlunderRequest* plunder) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete plunder_;
  }
  if (plunder) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      plunder = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, plunder, submessage_arena);
    }
    
  } else {
    
  }
  plunder_ = plunder;
  // @@protoc_insertion_point(field_set_allocated:Request.Plunder)
}

// .UseItemRequest UseItem = 21;
inline bool Request::has_useitem() const {
  return this != internal_default_instance() && useitem_ != NULL;
}
inline void Request::clear_useitem() {
  if (GetArenaNoVirtual() == NULL && useitem_ != NULL) {
    delete useitem_;
  }
  useitem_ = NULL;
}
inline const ::UseItemRequest& Request::useitem() const {
  const ::UseItemRequest* p = useitem_;
  // @@protoc_insertion_point(field_get:Request.UseItem)
  return p != NULL ? *p : *reinterpret_cast<const ::UseItemRequest*>(
      &::_UseItemRequest_default_instance_);
}
inline ::UseItemRequest* Request::release_useitem() {
  // @@protoc_insertion_point(field_release:Request.UseItem)
  
  ::UseItemRequest* temp = useitem_;
  useitem_ = NULL;
  return temp;
}
inline ::UseItemRequest* Request::mutable_useitem() {
  
  if (useitem_ == NULL) {
    useitem_ = new ::UseItemRequest;
  }
  // @@protoc_insertion_point(field_mutable:Request.UseItem)
  return useitem_;
}
inline void Request::set_allocated_useitem(::UseItemRequest* useitem) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete useitem_;
  }
  if (useitem) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      useitem = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, useitem, submessage_arena);
    }
    
  } else {
    
  }
  useitem_ = useitem;
  // @@protoc_insertion_point(field_set_allocated:Request.UseItem)
}

// .SettleAccountRequest SettleAccount = 22;
inline bool Request::has_settleaccount() const {
  return this != internal_default_instance() && settleaccount_ != NULL;
}
inline void Request::clear_settleaccount() {
  if (GetArenaNoVirtual() == NULL && settleaccount_ != NULL) {
    delete settleaccount_;
  }
  settleaccount_ = NULL;
}
inline const ::SettleAccountRequest& Request::settleaccount() const {
  const ::SettleAccountRequest* p = settleaccount_;
  // @@protoc_insertion_point(field_get:Request.SettleAccount)
  return p != NULL ? *p : *reinterpret_cast<const ::SettleAccountRequest*>(
      &::_SettleAccountRequest_default_instance_);
}
inline ::SettleAccountRequest* Request::release_settleaccount() {
  // @@protoc_insertion_point(field_release:Request.SettleAccount)
  
  ::SettleAccountRequest* temp = settleaccount_;
  settleaccount_ = NULL;
  return temp;
}
inline ::SettleAccountRequest* Request::mutable_settleaccount() {
  
  if (settleaccount_ == NULL) {
    settleaccount_ = new ::SettleAccountRequest;
  }
  // @@protoc_insertion_point(field_mutable:Request.SettleAccount)
  return settleaccount_;
}
inline void Request::set_allocated_settleaccount(::SettleAccountRequest* settleaccount) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete settleaccount_;
  }
  if (settleaccount) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      settleaccount = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, settleaccount, submessage_arena);
    }
    
  } else {
    
  }
  settleaccount_ = settleaccount;
  // @@protoc_insertion_point(field_set_allocated:Request.SettleAccount)
}

// .RankingRequest Ranking = 23;
inline bool Request::has_ranking() const {
  return this != internal_default_instance() && ranking_ != NULL;
}
inline void Request::clear_ranking() {
  if (GetArenaNoVirtual() == NULL && ranking_ != NULL) {
    delete ranking_;
  }
  ranking_ = NULL;
}
inline const ::RankingRequest& Request::ranking() const {
  const ::RankingRequest* p = ranking_;
  // @@protoc_insertion_point(field_get:Request.Ranking)
  return p != NULL ? *p : *reinterpret_cast<const ::RankingRequest*>(
      &::_RankingRequest_default_instance_);
}
inline ::RankingRequest* Request::release_ranking() {
  // @@protoc_insertion_point(field_release:Request.Ranking)
  
  ::RankingRequest* temp = ranking_;
  ranking_ = NULL;
  return temp;
}
inline ::RankingRequest* Request::mutable_ranking() {
  
  if (ranking_ == NULL) {
    ranking_ = new ::RankingRequest;
  }
  // @@protoc_insertion_point(field_mutable:Request.Ranking)
  return ranking_;
}
inline void Request::set_allocated_ranking(::RankingRequest* ranking) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete ranking_;
  }
  if (ranking) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      ranking = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, ranking, submessage_arena);
    }
    
  } else {
    
  }
  ranking_ = ranking;
  // @@protoc_insertion_point(field_set_allocated:Request.Ranking)
}

// .ForgetSkillRequest ForgetSkill = 24;
inline bool Request::has_forgetskill() const {
  return this != internal_default_instance() && forgetskill_ != NULL;
}
inline void Request::clear_forgetskill() {
  if (GetArenaNoVirtual() == NULL && forgetskill_ != NULL) {
    delete forgetskill_;
  }
  forgetskill_ = NULL;
}
inline const ::ForgetSkillRequest& Request::forgetskill() const {
  const ::ForgetSkillRequest* p = forgetskill_;
  // @@protoc_insertion_point(field_get:Request.ForgetSkill)
  return p != NULL ? *p : *reinterpret_cast<const ::ForgetSkillRequest*>(
      &::_ForgetSkillRequest_default_instance_);
}
inline ::ForgetSkillRequest* Request::release_forgetskill() {
  // @@protoc_insertion_point(field_release:Request.ForgetSkill)
  
  ::ForgetSkillRequest* temp = forgetskill_;
  forgetskill_ = NULL;
  return temp;
}
inline ::ForgetSkillRequest* Request::mutable_forgetskill() {
  
  if (forgetskill_ == NULL) {
    forgetskill_ = new ::ForgetSkillRequest;
  }
  // @@protoc_insertion_point(field_mutable:Request.ForgetSkill)
  return forgetskill_;
}
inline void Request::set_allocated_forgetskill(::ForgetSkillRequest* forgetskill) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete forgetskill_;
  }
  if (forgetskill) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      forgetskill = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, forgetskill, submessage_arena);
    }
    
  } else {
    
  }
  forgetskill_ = forgetskill;
  // @@protoc_insertion_point(field_set_allocated:Request.ForgetSkill)
}

// .RegisterRequest Register = 25;
inline bool Request::has_register_() const {
  return this != internal_default_instance() && register__ != NULL;
}
inline void Request::clear_register_() {
  if (GetArenaNoVirtual() == NULL && register__ != NULL) {
    delete register__;
  }
  register__ = NULL;
}
inline const ::RegisterRequest& Request::register_() const {
  const ::RegisterRequest* p = register__;
  // @@protoc_insertion_point(field_get:Request.Register)
  return p != NULL ? *p : *reinterpret_cast<const ::RegisterRequest*>(
      &::_RegisterRequest_default_instance_);
}
inline ::RegisterRequest* Request::release_register_() {
  // @@protoc_insertion_point(field_release:Request.Register)
  
  ::RegisterRequest* temp = register__;
  register__ = NULL;
  return temp;
}
inline ::RegisterRequest* Request::mutable_register_() {
  
  if (register__ == NULL) {
    register__ = new ::RegisterRequest;
  }
  // @@protoc_insertion_point(field_mutable:Request.Register)
  return register__;
}
inline void Request::set_allocated_register_(::RegisterRequest* register_) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete register__;
  }
  if (register_) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      register_ = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, register_, submessage_arena);
    }
    
  } else {
    
  }
  register__ = register_;
  // @@protoc_insertion_point(field_set_allocated:Request.Register)
}

// .SolarUpgradeRequest SolarUpgrade = 26;
inline bool Request::has_solarupgrade() const {
  return this != internal_default_instance() && solarupgrade_ != NULL;
}
inline void Request::clear_solarupgrade() {
  if (GetArenaNoVirtual() == NULL && solarupgrade_ != NULL) {
    delete solarupgrade_;
  }
  solarupgrade_ = NULL;
}
inline const ::SolarUpgradeRequest& Request::solarupgrade() const {
  const ::SolarUpgradeRequest* p = solarupgrade_;
  // @@protoc_insertion_point(field_get:Request.SolarUpgrade)
  return p != NULL ? *p : *reinterpret_cast<const ::SolarUpgradeRequest*>(
      &::_SolarUpgradeRequest_default_instance_);
}
inline ::SolarUpgradeRequest* Request::release_solarupgrade() {
  // @@protoc_insertion_point(field_release:Request.SolarUpgrade)
  
  ::SolarUpgradeRequest* temp = solarupgrade_;
  solarupgrade_ = NULL;
  return temp;
}
inline ::SolarUpgradeRequest* Request::mutable_solarupgrade() {
  
  if (solarupgrade_ == NULL) {
    solarupgrade_ = new ::SolarUpgradeRequest;
  }
  // @@protoc_insertion_point(field_mutable:Request.SolarUpgrade)
  return solarupgrade_;
}
inline void Request::set_allocated_solarupgrade(::SolarUpgradeRequest* solarupgrade) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete solarupgrade_;
  }
  if (solarupgrade) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      solarupgrade = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, solarupgrade, submessage_arena);
    }
    
  } else {
    
  }
  solarupgrade_ = solarupgrade;
  // @@protoc_insertion_point(field_set_allocated:Request.SolarUpgrade)
}

// .SkillUpgradeRequest SkillUpgrade = 27;
inline bool Request::has_skillupgrade() const {
  return this != internal_default_instance() && skillupgrade_ != NULL;
}
inline void Request::clear_skillupgrade() {
  if (GetArenaNoVirtual() == NULL && skillupgrade_ != NULL) {
    delete skillupgrade_;
  }
  skillupgrade_ = NULL;
}
inline const ::SkillUpgradeRequest& Request::skillupgrade() const {
  const ::SkillUpgradeRequest* p = skillupgrade_;
  // @@protoc_insertion_point(field_get:Request.SkillUpgrade)
  return p != NULL ? *p : *reinterpret_cast<const ::SkillUpgradeRequest*>(
      &::_SkillUpgradeRequest_default_instance_);
}
inline ::SkillUpgradeRequest* Request::release_skillupgrade() {
  // @@protoc_insertion_point(field_release:Request.SkillUpgrade)
  
  ::SkillUpgradeRequest* temp = skillupgrade_;
  skillupgrade_ = NULL;
  return temp;
}
inline ::SkillUpgradeRequest* Request::mutable_skillupgrade() {
  
  if (skillupgrade_ == NULL) {
    skillupgrade_ = new ::SkillUpgradeRequest;
  }
  // @@protoc_insertion_point(field_mutable:Request.SkillUpgrade)
  return skillupgrade_;
}
inline void Request::set_allocated_skillupgrade(::SkillUpgradeRequest* skillupgrade) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete skillupgrade_;
  }
  if (skillupgrade) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      skillupgrade = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, skillupgrade, submessage_arena);
    }
    
  } else {
    
  }
  skillupgrade_ = skillupgrade;
  // @@protoc_insertion_point(field_set_allocated:Request.SkillUpgrade)
}

// .TreeUpgradeRequest TreeUpgrade = 28;
inline bool Request::has_treeupgrade() const {
  return this != internal_default_instance() && treeupgrade_ != NULL;
}
inline void Request::clear_treeupgrade() {
  if (GetArenaNoVirtual() == NULL && treeupgrade_ != NULL) {
    delete treeupgrade_;
  }
  treeupgrade_ = NULL;
}
inline const ::TreeUpgradeRequest& Request::treeupgrade() const {
  const ::TreeUpgradeRequest* p = treeupgrade_;
  // @@protoc_insertion_point(field_get:Request.TreeUpgrade)
  return p != NULL ? *p : *reinterpret_cast<const ::TreeUpgradeRequest*>(
      &::_TreeUpgradeRequest_default_instance_);
}
inline ::TreeUpgradeRequest* Request::release_treeupgrade() {
  // @@protoc_insertion_point(field_release:Request.TreeUpgrade)
  
  ::TreeUpgradeRequest* temp = treeupgrade_;
  treeupgrade_ = NULL;
  return temp;
}
inline ::TreeUpgradeRequest* Request::mutable_treeupgrade() {
  
  if (treeupgrade_ == NULL) {
    treeupgrade_ = new ::TreeUpgradeRequest;
  }
  // @@protoc_insertion_point(field_mutable:Request.TreeUpgrade)
  return treeupgrade_;
}
inline void Request::set_allocated_treeupgrade(::TreeUpgradeRequest* treeupgrade) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete treeupgrade_;
  }
  if (treeupgrade) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      treeupgrade = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, treeupgrade, submessage_arena);
    }
    
  } else {
    
  }
  treeupgrade_ = treeupgrade;
  // @@protoc_insertion_point(field_set_allocated:Request.TreeUpgrade)
}

// .ElfinUpgradeRequest ElfinUpgrade = 29;
inline bool Request::has_elfinupgrade() const {
  return this != internal_default_instance() && elfinupgrade_ != NULL;
}
inline void Request::clear_elfinupgrade() {
  if (GetArenaNoVirtual() == NULL && elfinupgrade_ != NULL) {
    delete elfinupgrade_;
  }
  elfinupgrade_ = NULL;
}
inline const ::ElfinUpgradeRequest& Request::elfinupgrade() const {
  const ::ElfinUpgradeRequest* p = elfinupgrade_;
  // @@protoc_insertion_point(field_get:Request.ElfinUpgrade)
  return p != NULL ? *p : *reinterpret_cast<const ::ElfinUpgradeRequest*>(
      &::_ElfinUpgradeRequest_default_instance_);
}
inline ::ElfinUpgradeRequest* Request::release_elfinupgrade() {
  // @@protoc_insertion_point(field_release:Request.ElfinUpgrade)
  
  ::ElfinUpgradeRequest* temp = elfinupgrade_;
  elfinupgrade_ = NULL;
  return temp;
}
inline ::ElfinUpgradeRequest* Request::mutable_elfinupgrade() {
  
  if (elfinupgrade_ == NULL) {
    elfinupgrade_ = new ::ElfinUpgradeRequest;
  }
  // @@protoc_insertion_point(field_mutable:Request.ElfinUpgrade)
  return elfinupgrade_;
}
inline void Request::set_allocated_elfinupgrade(::ElfinUpgradeRequest* elfinupgrade) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete elfinupgrade_;
  }
  if (elfinupgrade) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      elfinupgrade = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, elfinupgrade, submessage_arena);
    }
    
  } else {
    
  }
  elfinupgrade_ = elfinupgrade;
  // @@protoc_insertion_point(field_set_allocated:Request.ElfinUpgrade)
}

// -------------------------------------------------------------------

// Response

// .LoginResponse Login = 1;
inline bool Response::has_login() const {
  return this != internal_default_instance() && login_ != NULL;
}
inline void Response::clear_login() {
  if (GetArenaNoVirtual() == NULL && login_ != NULL) {
    delete login_;
  }
  login_ = NULL;
}
inline const ::LoginResponse& Response::login() const {
  const ::LoginResponse* p = login_;
  // @@protoc_insertion_point(field_get:Response.Login)
  return p != NULL ? *p : *reinterpret_cast<const ::LoginResponse*>(
      &::_LoginResponse_default_instance_);
}
inline ::LoginResponse* Response::release_login() {
  // @@protoc_insertion_point(field_release:Response.Login)
  
  ::LoginResponse* temp = login_;
  login_ = NULL;
  return temp;
}
inline ::LoginResponse* Response::mutable_login() {
  
  if (login_ == NULL) {
    login_ = new ::LoginResponse;
  }
  // @@protoc_insertion_point(field_mutable:Response.Login)
  return login_;
}
inline void Response::set_allocated_login(::LoginResponse* login) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete login_;
  }
  if (login) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      login = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, login, submessage_arena);
    }
    
  } else {
    
  }
  login_ = login;
  // @@protoc_insertion_point(field_set_allocated:Response.Login)
}

// .ElfinResponse Elfin = 2;
inline bool Response::has_elfin() const {
  return this != internal_default_instance() && elfin_ != NULL;
}
inline void Response::clear_elfin() {
  if (GetArenaNoVirtual() == NULL && elfin_ != NULL) {
    delete elfin_;
  }
  elfin_ = NULL;
}
inline const ::ElfinResponse& Response::elfin() const {
  const ::ElfinResponse* p = elfin_;
  // @@protoc_insertion_point(field_get:Response.Elfin)
  return p != NULL ? *p : *reinterpret_cast<const ::ElfinResponse*>(
      &::_ElfinResponse_default_instance_);
}
inline ::ElfinResponse* Response::release_elfin() {
  // @@protoc_insertion_point(field_release:Response.Elfin)
  
  ::ElfinResponse* temp = elfin_;
  elfin_ = NULL;
  return temp;
}
inline ::ElfinResponse* Response::mutable_elfin() {
  
  if (elfin_ == NULL) {
    elfin_ = new ::ElfinResponse;
  }
  // @@protoc_insertion_point(field_mutable:Response.Elfin)
  return elfin_;
}
inline void Response::set_allocated_elfin(::ElfinResponse* elfin) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete elfin_;
  }
  if (elfin) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      elfin = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, elfin, submessage_arena);
    }
    
  } else {
    
  }
  elfin_ = elfin;
  // @@protoc_insertion_point(field_set_allocated:Response.Elfin)
}

// .RollResponse Roll = 3;
inline bool Response::has_roll() const {
  return this != internal_default_instance() && roll_ != NULL;
}
inline void Response::clear_roll() {
  if (GetArenaNoVirtual() == NULL && roll_ != NULL) {
    delete roll_;
  }
  roll_ = NULL;
}
inline const ::RollResponse& Response::roll() const {
  const ::RollResponse* p = roll_;
  // @@protoc_insertion_point(field_get:Response.Roll)
  return p != NULL ? *p : *reinterpret_cast<const ::RollResponse*>(
      &::_RollResponse_default_instance_);
}
inline ::RollResponse* Response::release_roll() {
  // @@protoc_insertion_point(field_release:Response.Roll)
  
  ::RollResponse* temp = roll_;
  roll_ = NULL;
  return temp;
}
inline ::RollResponse* Response::mutable_roll() {
  
  if (roll_ == NULL) {
    roll_ = new ::RollResponse;
  }
  // @@protoc_insertion_point(field_mutable:Response.Roll)
  return roll_;
}
inline void Response::set_allocated_roll(::RollResponse* roll) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete roll_;
  }
  if (roll) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      roll = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, roll, submessage_arena);
    }
    
  } else {
    
  }
  roll_ = roll;
  // @@protoc_insertion_point(field_set_allocated:Response.Roll)
}

// .TreeResponse Tree = 4;
inline bool Response::has_tree() const {
  return this != internal_default_instance() && tree_ != NULL;
}
inline void Response::clear_tree() {
  if (GetArenaNoVirtual() == NULL && tree_ != NULL) {
    delete tree_;
  }
  tree_ = NULL;
}
inline const ::TreeResponse& Response::tree() const {
  const ::TreeResponse* p = tree_;
  // @@protoc_insertion_point(field_get:Response.Tree)
  return p != NULL ? *p : *reinterpret_cast<const ::TreeResponse*>(
      &::_TreeResponse_default_instance_);
}
inline ::TreeResponse* Response::release_tree() {
  // @@protoc_insertion_point(field_release:Response.Tree)
  
  ::TreeResponse* temp = tree_;
  tree_ = NULL;
  return temp;
}
inline ::TreeResponse* Response::mutable_tree() {
  
  if (tree_ == NULL) {
    tree_ = new ::TreeResponse;
  }
  // @@protoc_insertion_point(field_mutable:Response.Tree)
  return tree_;
}
inline void Response::set_allocated_tree(::TreeResponse* tree) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete tree_;
  }
  if (tree) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      tree = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, tree, submessage_arena);
    }
    
  } else {
    
  }
  tree_ = tree;
  // @@protoc_insertion_point(field_set_allocated:Response.Tree)
}

// .ResourceResponse Resource = 5;
inline bool Response::has_resource() const {
  return this != internal_default_instance() && resource_ != NULL;
}
inline void Response::clear_resource() {
  if (GetArenaNoVirtual() == NULL && resource_ != NULL) {
    delete resource_;
  }
  resource_ = NULL;
}
inline const ::ResourceResponse& Response::resource() const {
  const ::ResourceResponse* p = resource_;
  // @@protoc_insertion_point(field_get:Response.Resource)
  return p != NULL ? *p : *reinterpret_cast<const ::ResourceResponse*>(
      &::_ResourceResponse_default_instance_);
}
inline ::ResourceResponse* Response::release_resource() {
  // @@protoc_insertion_point(field_release:Response.Resource)
  
  ::ResourceResponse* temp = resource_;
  resource_ = NULL;
  return temp;
}
inline ::ResourceResponse* Response::mutable_resource() {
  
  if (resource_ == NULL) {
    resource_ = new ::ResourceResponse;
  }
  // @@protoc_insertion_point(field_mutable:Response.Resource)
  return resource_;
}
inline void Response::set_allocated_resource(::ResourceResponse* resource) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete resource_;
  }
  if (resource) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      resource = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, resource, submessage_arena);
    }
    
  } else {
    
  }
  resource_ = resource;
  // @@protoc_insertion_point(field_set_allocated:Response.Resource)
}

// .TasksResponse Tasks = 6;
inline bool Response::has_tasks() const {
  return this != internal_default_instance() && tasks_ != NULL;
}
inline void Response::clear_tasks() {
  if (GetArenaNoVirtual() == NULL && tasks_ != NULL) {
    delete tasks_;
  }
  tasks_ = NULL;
}
inline const ::TasksResponse& Response::tasks() const {
  const ::TasksResponse* p = tasks_;
  // @@protoc_insertion_point(field_get:Response.Tasks)
  return p != NULL ? *p : *reinterpret_cast<const ::TasksResponse*>(
      &::_TasksResponse_default_instance_);
}
inline ::TasksResponse* Response::release_tasks() {
  // @@protoc_insertion_point(field_release:Response.Tasks)
  
  ::TasksResponse* temp = tasks_;
  tasks_ = NULL;
  return temp;
}
inline ::TasksResponse* Response::mutable_tasks() {
  
  if (tasks_ == NULL) {
    tasks_ = new ::TasksResponse;
  }
  // @@protoc_insertion_point(field_mutable:Response.Tasks)
  return tasks_;
}
inline void Response::set_allocated_tasks(::TasksResponse* tasks) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete tasks_;
  }
  if (tasks) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      tasks = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, tasks, submessage_arena);
    }
    
  } else {
    
  }
  tasks_ = tasks;
  // @@protoc_insertion_point(field_set_allocated:Response.Tasks)
}

// .MailsResponse Mails = 7;
inline bool Response::has_mails() const {
  return this != internal_default_instance() && mails_ != NULL;
}
inline void Response::clear_mails() {
  if (GetArenaNoVirtual() == NULL && mails_ != NULL) {
    delete mails_;
  }
  mails_ = NULL;
}
inline const ::MailsResponse& Response::mails() const {
  const ::MailsResponse* p = mails_;
  // @@protoc_insertion_point(field_get:Response.Mails)
  return p != NULL ? *p : *reinterpret_cast<const ::MailsResponse*>(
      &::_MailsResponse_default_instance_);
}
inline ::MailsResponse* Response::release_mails() {
  // @@protoc_insertion_point(field_release:Response.Mails)
  
  ::MailsResponse* temp = mails_;
  mails_ = NULL;
  return temp;
}
inline ::MailsResponse* Response::mutable_mails() {
  
  if (mails_ == NULL) {
    mails_ = new ::MailsResponse;
  }
  // @@protoc_insertion_point(field_mutable:Response.Mails)
  return mails_;
}
inline void Response::set_allocated_mails(::MailsResponse* mails) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete mails_;
  }
  if (mails) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      mails = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, mails, submessage_arena);
    }
    
  } else {
    
  }
  mails_ = mails;
  // @@protoc_insertion_point(field_set_allocated:Response.Mails)
}

// .SunResponse Sun = 8;
inline bool Response::has_sun() const {
  return this != internal_default_instance() && sun_ != NULL;
}
inline void Response::clear_sun() {
  if (GetArenaNoVirtual() == NULL && sun_ != NULL) {
    delete sun_;
  }
  sun_ = NULL;
}
inline const ::SunResponse& Response::sun() const {
  const ::SunResponse* p = sun_;
  // @@protoc_insertion_point(field_get:Response.Sun)
  return p != NULL ? *p : *reinterpret_cast<const ::SunResponse*>(
      &::_SunResponse_default_instance_);
}
inline ::SunResponse* Response::release_sun() {
  // @@protoc_insertion_point(field_release:Response.Sun)
  
  ::SunResponse* temp = sun_;
  sun_ = NULL;
  return temp;
}
inline ::SunResponse* Response::mutable_sun() {
  
  if (sun_ == NULL) {
    sun_ = new ::SunResponse;
  }
  // @@protoc_insertion_point(field_mutable:Response.Sun)
  return sun_;
}
inline void Response::set_allocated_sun(::SunResponse* sun) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete sun_;
  }
  if (sun) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      sun = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, sun, submessage_arena);
    }
    
  } else {
    
  }
  sun_ = sun;
  // @@protoc_insertion_point(field_set_allocated:Response.Sun)
}

// .TreeEnchantmentResponse TreeEnchantment = 9;
inline bool Response::has_treeenchantment() const {
  return this != internal_default_instance() && treeenchantment_ != NULL;
}
inline void Response::clear_treeenchantment() {
  if (GetArenaNoVirtual() == NULL && treeenchantment_ != NULL) {
    delete treeenchantment_;
  }
  treeenchantment_ = NULL;
}
inline const ::TreeEnchantmentResponse& Response::treeenchantment() const {
  const ::TreeEnchantmentResponse* p = treeenchantment_;
  // @@protoc_insertion_point(field_get:Response.TreeEnchantment)
  return p != NULL ? *p : *reinterpret_cast<const ::TreeEnchantmentResponse*>(
      &::_TreeEnchantmentResponse_default_instance_);
}
inline ::TreeEnchantmentResponse* Response::release_treeenchantment() {
  // @@protoc_insertion_point(field_release:Response.TreeEnchantment)
  
  ::TreeEnchantmentResponse* temp = treeenchantment_;
  treeenchantment_ = NULL;
  return temp;
}
inline ::TreeEnchantmentResponse* Response::mutable_treeenchantment() {
  
  if (treeenchantment_ == NULL) {
    treeenchantment_ = new ::TreeEnchantmentResponse;
  }
  // @@protoc_insertion_point(field_mutable:Response.TreeEnchantment)
  return treeenchantment_;
}
inline void Response::set_allocated_treeenchantment(::TreeEnchantmentResponse* treeenchantment) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete treeenchantment_;
  }
  if (treeenchantment) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      treeenchantment = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, treeenchantment, submessage_arena);
    }
    
  } else {
    
  }
  treeenchantment_ = treeenchantment;
  // @@protoc_insertion_point(field_set_allocated:Response.TreeEnchantment)
}

// .StoreAllResponse StoreAll = 10;
inline bool Response::has_storeall() const {
  return this != internal_default_instance() && storeall_ != NULL;
}
inline void Response::clear_storeall() {
  if (GetArenaNoVirtual() == NULL && storeall_ != NULL) {
    delete storeall_;
  }
  storeall_ = NULL;
}
inline const ::StoreAllResponse& Response::storeall() const {
  const ::StoreAllResponse* p = storeall_;
  // @@protoc_insertion_point(field_get:Response.StoreAll)
  return p != NULL ? *p : *reinterpret_cast<const ::StoreAllResponse*>(
      &::_StoreAllResponse_default_instance_);
}
inline ::StoreAllResponse* Response::release_storeall() {
  // @@protoc_insertion_point(field_release:Response.StoreAll)
  
  ::StoreAllResponse* temp = storeall_;
  storeall_ = NULL;
  return temp;
}
inline ::StoreAllResponse* Response::mutable_storeall() {
  
  if (storeall_ == NULL) {
    storeall_ = new ::StoreAllResponse;
  }
  // @@protoc_insertion_point(field_mutable:Response.StoreAll)
  return storeall_;
}
inline void Response::set_allocated_storeall(::StoreAllResponse* storeall) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete storeall_;
  }
  if (storeall) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      storeall = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, storeall, submessage_arena);
    }
    
  } else {
    
  }
  storeall_ = storeall;
  // @@protoc_insertion_point(field_set_allocated:Response.StoreAll)
}

// .StoreEquResponse StoreEqu = 11;
inline bool Response::has_storeequ() const {
  return this != internal_default_instance() && storeequ_ != NULL;
}
inline void Response::clear_storeequ() {
  if (GetArenaNoVirtual() == NULL && storeequ_ != NULL) {
    delete storeequ_;
  }
  storeequ_ = NULL;
}
inline const ::StoreEquResponse& Response::storeequ() const {
  const ::StoreEquResponse* p = storeequ_;
  // @@protoc_insertion_point(field_get:Response.StoreEqu)
  return p != NULL ? *p : *reinterpret_cast<const ::StoreEquResponse*>(
      &::_StoreEquResponse_default_instance_);
}
inline ::StoreEquResponse* Response::release_storeequ() {
  // @@protoc_insertion_point(field_release:Response.StoreEqu)
  
  ::StoreEquResponse* temp = storeequ_;
  storeequ_ = NULL;
  return temp;
}
inline ::StoreEquResponse* Response::mutable_storeequ() {
  
  if (storeequ_ == NULL) {
    storeequ_ = new ::StoreEquResponse;
  }
  // @@protoc_insertion_point(field_mutable:Response.StoreEqu)
  return storeequ_;
}
inline void Response::set_allocated_storeequ(::StoreEquResponse* storeequ) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete storeequ_;
  }
  if (storeequ) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      storeequ = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, storeequ, submessage_arena);
    }
    
  } else {
    
  }
  storeequ_ = storeequ;
  // @@protoc_insertion_point(field_set_allocated:Response.StoreEqu)
}

// .StoreWaterResponse StoreWater = 12;
inline bool Response::has_storewater() const {
  return this != internal_default_instance() && storewater_ != NULL;
}
inline void Response::clear_storewater() {
  if (GetArenaNoVirtual() == NULL && storewater_ != NULL) {
    delete storewater_;
  }
  storewater_ = NULL;
}
inline const ::StoreWaterResponse& Response::storewater() const {
  const ::StoreWaterResponse* p = storewater_;
  // @@protoc_insertion_point(field_get:Response.StoreWater)
  return p != NULL ? *p : *reinterpret_cast<const ::StoreWaterResponse*>(
      &::_StoreWaterResponse_default_instance_);
}
inline ::StoreWaterResponse* Response::release_storewater() {
  // @@protoc_insertion_point(field_release:Response.StoreWater)
  
  ::StoreWaterResponse* temp = storewater_;
  storewater_ = NULL;
  return temp;
}
inline ::StoreWaterResponse* Response::mutable_storewater() {
  
  if (storewater_ == NULL) {
    storewater_ = new ::StoreWaterResponse;
  }
  // @@protoc_insertion_point(field_mutable:Response.StoreWater)
  return storewater_;
}
inline void Response::set_allocated_storewater(::StoreWaterResponse* storewater) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete storewater_;
  }
  if (storewater) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      storewater = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, storewater, submessage_arena);
    }
    
  } else {
    
  }
  storewater_ = storewater;
  // @@protoc_insertion_point(field_set_allocated:Response.StoreWater)
}

// .StoreSpePropsResponse StoreSpeProps = 13;
inline bool Response::has_storespeprops() const {
  return this != internal_default_instance() && storespeprops_ != NULL;
}
inline void Response::clear_storespeprops() {
  if (GetArenaNoVirtual() == NULL && storespeprops_ != NULL) {
    delete storespeprops_;
  }
  storespeprops_ = NULL;
}
inline const ::StoreSpePropsResponse& Response::storespeprops() const {
  const ::StoreSpePropsResponse* p = storespeprops_;
  // @@protoc_insertion_point(field_get:Response.StoreSpeProps)
  return p != NULL ? *p : *reinterpret_cast<const ::StoreSpePropsResponse*>(
      &::_StoreSpePropsResponse_default_instance_);
}
inline ::StoreSpePropsResponse* Response::release_storespeprops() {
  // @@protoc_insertion_point(field_release:Response.StoreSpeProps)
  
  ::StoreSpePropsResponse* temp = storespeprops_;
  storespeprops_ = NULL;
  return temp;
}
inline ::StoreSpePropsResponse* Response::mutable_storespeprops() {
  
  if (storespeprops_ == NULL) {
    storespeprops_ = new ::StoreSpePropsResponse;
  }
  // @@protoc_insertion_point(field_mutable:Response.StoreSpeProps)
  return storespeprops_;
}
inline void Response::set_allocated_storespeprops(::StoreSpePropsResponse* storespeprops) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete storespeprops_;
  }
  if (storespeprops) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      storespeprops = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, storespeprops, submessage_arena);
    }
    
  } else {
    
  }
  storespeprops_ = storespeprops;
  // @@protoc_insertion_point(field_set_allocated:Response.StoreSpeProps)
}

// .WarehouseResponse Warehouse = 14;
inline bool Response::has_warehouse() const {
  return this != internal_default_instance() && warehouse_ != NULL;
}
inline void Response::clear_warehouse() {
  if (GetArenaNoVirtual() == NULL && warehouse_ != NULL) {
    delete warehouse_;
  }
  warehouse_ = NULL;
}
inline const ::WarehouseResponse& Response::warehouse() const {
  const ::WarehouseResponse* p = warehouse_;
  // @@protoc_insertion_point(field_get:Response.Warehouse)
  return p != NULL ? *p : *reinterpret_cast<const ::WarehouseResponse*>(
      &::_WarehouseResponse_default_instance_);
}
inline ::WarehouseResponse* Response::release_warehouse() {
  // @@protoc_insertion_point(field_release:Response.Warehouse)
  
  ::WarehouseResponse* temp = warehouse_;
  warehouse_ = NULL;
  return temp;
}
inline ::WarehouseResponse* Response::mutable_warehouse() {
  
  if (warehouse_ == NULL) {
    warehouse_ = new ::WarehouseResponse;
  }
  // @@protoc_insertion_point(field_mutable:Response.Warehouse)
  return warehouse_;
}
inline void Response::set_allocated_warehouse(::WarehouseResponse* warehouse) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete warehouse_;
  }
  if (warehouse) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      warehouse = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, warehouse, submessage_arena);
    }
    
  } else {
    
  }
  warehouse_ = warehouse;
  // @@protoc_insertion_point(field_set_allocated:Response.Warehouse)
}

// .DelMailResponse DelMail = 15;
inline bool Response::has_delmail() const {
  return this != internal_default_instance() && delmail_ != NULL;
}
inline void Response::clear_delmail() {
  if (GetArenaNoVirtual() == NULL && delmail_ != NULL) {
    delete delmail_;
  }
  delmail_ = NULL;
}
inline const ::DelMailResponse& Response::delmail() const {
  const ::DelMailResponse* p = delmail_;
  // @@protoc_insertion_point(field_get:Response.DelMail)
  return p != NULL ? *p : *reinterpret_cast<const ::DelMailResponse*>(
      &::_DelMailResponse_default_instance_);
}
inline ::DelMailResponse* Response::release_delmail() {
  // @@protoc_insertion_point(field_release:Response.DelMail)
  
  ::DelMailResponse* temp = delmail_;
  delmail_ = NULL;
  return temp;
}
inline ::DelMailResponse* Response::mutable_delmail() {
  
  if (delmail_ == NULL) {
    delmail_ = new ::DelMailResponse;
  }
  // @@protoc_insertion_point(field_mutable:Response.DelMail)
  return delmail_;
}
inline void Response::set_allocated_delmail(::DelMailResponse* delmail) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete delmail_;
  }
  if (delmail) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      delmail = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, delmail, submessage_arena);
    }
    
  } else {
    
  }
  delmail_ = delmail;
  // @@protoc_insertion_point(field_set_allocated:Response.DelMail)
}

// .ClaimedTaskResponse ClaimedTask = 16;
inline bool Response::has_claimedtask() const {
  return this != internal_default_instance() && claimedtask_ != NULL;
}
inline void Response::clear_claimedtask() {
  if (GetArenaNoVirtual() == NULL && claimedtask_ != NULL) {
    delete claimedtask_;
  }
  claimedtask_ = NULL;
}
inline const ::ClaimedTaskResponse& Response::claimedtask() const {
  const ::ClaimedTaskResponse* p = claimedtask_;
  // @@protoc_insertion_point(field_get:Response.ClaimedTask)
  return p != NULL ? *p : *reinterpret_cast<const ::ClaimedTaskResponse*>(
      &::_ClaimedTaskResponse_default_instance_);
}
inline ::ClaimedTaskResponse* Response::release_claimedtask() {
  // @@protoc_insertion_point(field_release:Response.ClaimedTask)
  
  ::ClaimedTaskResponse* temp = claimedtask_;
  claimedtask_ = NULL;
  return temp;
}
inline ::ClaimedTaskResponse* Response::mutable_claimedtask() {
  
  if (claimedtask_ == NULL) {
    claimedtask_ = new ::ClaimedTaskResponse;
  }
  // @@protoc_insertion_point(field_mutable:Response.ClaimedTask)
  return claimedtask_;
}
inline void Response::set_allocated_claimedtask(::ClaimedTaskResponse* claimedtask) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete claimedtask_;
  }
  if (claimedtask) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      claimedtask = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, claimedtask, submessage_arena);
    }
    
  } else {
    
  }
  claimedtask_ = claimedtask;
  // @@protoc_insertion_point(field_set_allocated:Response.ClaimedTask)
}

// .RecTaskAwardResponse RecTaskAward = 17;
inline bool Response::has_rectaskaward() const {
  return this != internal_default_instance() && rectaskaward_ != NULL;
}
inline void Response::clear_rectaskaward() {
  if (GetArenaNoVirtual() == NULL && rectaskaward_ != NULL) {
    delete rectaskaward_;
  }
  rectaskaward_ = NULL;
}
inline const ::RecTaskAwardResponse& Response::rectaskaward() const {
  const ::RecTaskAwardResponse* p = rectaskaward_;
  // @@protoc_insertion_point(field_get:Response.RecTaskAward)
  return p != NULL ? *p : *reinterpret_cast<const ::RecTaskAwardResponse*>(
      &::_RecTaskAwardResponse_default_instance_);
}
inline ::RecTaskAwardResponse* Response::release_rectaskaward() {
  // @@protoc_insertion_point(field_release:Response.RecTaskAward)
  
  ::RecTaskAwardResponse* temp = rectaskaward_;
  rectaskaward_ = NULL;
  return temp;
}
inline ::RecTaskAwardResponse* Response::mutable_rectaskaward() {
  
  if (rectaskaward_ == NULL) {
    rectaskaward_ = new ::RecTaskAwardResponse;
  }
  // @@protoc_insertion_point(field_mutable:Response.RecTaskAward)
  return rectaskaward_;
}
inline void Response::set_allocated_rectaskaward(::RecTaskAwardResponse* rectaskaward) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete rectaskaward_;
  }
  if (rectaskaward) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      rectaskaward = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, rectaskaward, submessage_arena);
    }
    
  } else {
    
  }
  rectaskaward_ = rectaskaward;
  // @@protoc_insertion_point(field_set_allocated:Response.RecTaskAward)
}

// .FriendsResponse Friends = 18;
inline bool Response::has_friends() const {
  return this != internal_default_instance() && friends_ != NULL;
}
inline void Response::clear_friends() {
  if (GetArenaNoVirtual() == NULL && friends_ != NULL) {
    delete friends_;
  }
  friends_ = NULL;
}
inline const ::FriendsResponse& Response::friends() const {
  const ::FriendsResponse* p = friends_;
  // @@protoc_insertion_point(field_get:Response.Friends)
  return p != NULL ? *p : *reinterpret_cast<const ::FriendsResponse*>(
      &::_FriendsResponse_default_instance_);
}
inline ::FriendsResponse* Response::release_friends() {
  // @@protoc_insertion_point(field_release:Response.Friends)
  
  ::FriendsResponse* temp = friends_;
  friends_ = NULL;
  return temp;
}
inline ::FriendsResponse* Response::mutable_friends() {
  
  if (friends_ == NULL) {
    friends_ = new ::FriendsResponse;
  }
  // @@protoc_insertion_point(field_mutable:Response.Friends)
  return friends_;
}
inline void Response::set_allocated_friends(::FriendsResponse* friends) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete friends_;
  }
  if (friends) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      friends = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, friends, submessage_arena);
    }
    
  } else {
    
  }
  friends_ = friends;
  // @@protoc_insertion_point(field_set_allocated:Response.Friends)
}

// .EnemiesResponse Enemies = 19;
inline bool Response::has_enemies() const {
  return this != internal_default_instance() && enemies_ != NULL;
}
inline void Response::clear_enemies() {
  if (GetArenaNoVirtual() == NULL && enemies_ != NULL) {
    delete enemies_;
  }
  enemies_ = NULL;
}
inline const ::EnemiesResponse& Response::enemies() const {
  const ::EnemiesResponse* p = enemies_;
  // @@protoc_insertion_point(field_get:Response.Enemies)
  return p != NULL ? *p : *reinterpret_cast<const ::EnemiesResponse*>(
      &::_EnemiesResponse_default_instance_);
}
inline ::EnemiesResponse* Response::release_enemies() {
  // @@protoc_insertion_point(field_release:Response.Enemies)
  
  ::EnemiesResponse* temp = enemies_;
  enemies_ = NULL;
  return temp;
}
inline ::EnemiesResponse* Response::mutable_enemies() {
  
  if (enemies_ == NULL) {
    enemies_ = new ::EnemiesResponse;
  }
  // @@protoc_insertion_point(field_mutable:Response.Enemies)
  return enemies_;
}
inline void Response::set_allocated_enemies(::EnemiesResponse* enemies) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete enemies_;
  }
  if (enemies) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      enemies = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, enemies, submessage_arena);
    }
    
  } else {
    
  }
  enemies_ = enemies;
  // @@protoc_insertion_point(field_set_allocated:Response.Enemies)
}

// .PlunderResponse Plunder = 20;
inline bool Response::has_plunder() const {
  return this != internal_default_instance() && plunder_ != NULL;
}
inline void Response::clear_plunder() {
  if (GetArenaNoVirtual() == NULL && plunder_ != NULL) {
    delete plunder_;
  }
  plunder_ = NULL;
}
inline const ::PlunderResponse& Response::plunder() const {
  const ::PlunderResponse* p = plunder_;
  // @@protoc_insertion_point(field_get:Response.Plunder)
  return p != NULL ? *p : *reinterpret_cast<const ::PlunderResponse*>(
      &::_PlunderResponse_default_instance_);
}
inline ::PlunderResponse* Response::release_plunder() {
  // @@protoc_insertion_point(field_release:Response.Plunder)
  
  ::PlunderResponse* temp = plunder_;
  plunder_ = NULL;
  return temp;
}
inline ::PlunderResponse* Response::mutable_plunder() {
  
  if (plunder_ == NULL) {
    plunder_ = new ::PlunderResponse;
  }
  // @@protoc_insertion_point(field_mutable:Response.Plunder)
  return plunder_;
}
inline void Response::set_allocated_plunder(::PlunderResponse* plunder) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete plunder_;
  }
  if (plunder) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      plunder = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, plunder, submessage_arena);
    }
    
  } else {
    
  }
  plunder_ = plunder;
  // @@protoc_insertion_point(field_set_allocated:Response.Plunder)
}

// .UseItemResponse UseItem = 21;
inline bool Response::has_useitem() const {
  return this != internal_default_instance() && useitem_ != NULL;
}
inline void Response::clear_useitem() {
  if (GetArenaNoVirtual() == NULL && useitem_ != NULL) {
    delete useitem_;
  }
  useitem_ = NULL;
}
inline const ::UseItemResponse& Response::useitem() const {
  const ::UseItemResponse* p = useitem_;
  // @@protoc_insertion_point(field_get:Response.UseItem)
  return p != NULL ? *p : *reinterpret_cast<const ::UseItemResponse*>(
      &::_UseItemResponse_default_instance_);
}
inline ::UseItemResponse* Response::release_useitem() {
  // @@protoc_insertion_point(field_release:Response.UseItem)
  
  ::UseItemResponse* temp = useitem_;
  useitem_ = NULL;
  return temp;
}
inline ::UseItemResponse* Response::mutable_useitem() {
  
  if (useitem_ == NULL) {
    useitem_ = new ::UseItemResponse;
  }
  // @@protoc_insertion_point(field_mutable:Response.UseItem)
  return useitem_;
}
inline void Response::set_allocated_useitem(::UseItemResponse* useitem) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete useitem_;
  }
  if (useitem) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      useitem = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, useitem, submessage_arena);
    }
    
  } else {
    
  }
  useitem_ = useitem;
  // @@protoc_insertion_point(field_set_allocated:Response.UseItem)
}

// .SettleAccountResponse SettleAccount = 22;
inline bool Response::has_settleaccount() const {
  return this != internal_default_instance() && settleaccount_ != NULL;
}
inline void Response::clear_settleaccount() {
  if (GetArenaNoVirtual() == NULL && settleaccount_ != NULL) {
    delete settleaccount_;
  }
  settleaccount_ = NULL;
}
inline const ::SettleAccountResponse& Response::settleaccount() const {
  const ::SettleAccountResponse* p = settleaccount_;
  // @@protoc_insertion_point(field_get:Response.SettleAccount)
  return p != NULL ? *p : *reinterpret_cast<const ::SettleAccountResponse*>(
      &::_SettleAccountResponse_default_instance_);
}
inline ::SettleAccountResponse* Response::release_settleaccount() {
  // @@protoc_insertion_point(field_release:Response.SettleAccount)
  
  ::SettleAccountResponse* temp = settleaccount_;
  settleaccount_ = NULL;
  return temp;
}
inline ::SettleAccountResponse* Response::mutable_settleaccount() {
  
  if (settleaccount_ == NULL) {
    settleaccount_ = new ::SettleAccountResponse;
  }
  // @@protoc_insertion_point(field_mutable:Response.SettleAccount)
  return settleaccount_;
}
inline void Response::set_allocated_settleaccount(::SettleAccountResponse* settleaccount) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete settleaccount_;
  }
  if (settleaccount) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      settleaccount = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, settleaccount, submessage_arena);
    }
    
  } else {
    
  }
  settleaccount_ = settleaccount;
  // @@protoc_insertion_point(field_set_allocated:Response.SettleAccount)
}

// .RankingResponse Ranking = 23;
inline bool Response::has_ranking() const {
  return this != internal_default_instance() && ranking_ != NULL;
}
inline void Response::clear_ranking() {
  if (GetArenaNoVirtual() == NULL && ranking_ != NULL) {
    delete ranking_;
  }
  ranking_ = NULL;
}
inline const ::RankingResponse& Response::ranking() const {
  const ::RankingResponse* p = ranking_;
  // @@protoc_insertion_point(field_get:Response.Ranking)
  return p != NULL ? *p : *reinterpret_cast<const ::RankingResponse*>(
      &::_RankingResponse_default_instance_);
}
inline ::RankingResponse* Response::release_ranking() {
  // @@protoc_insertion_point(field_release:Response.Ranking)
  
  ::RankingResponse* temp = ranking_;
  ranking_ = NULL;
  return temp;
}
inline ::RankingResponse* Response::mutable_ranking() {
  
  if (ranking_ == NULL) {
    ranking_ = new ::RankingResponse;
  }
  // @@protoc_insertion_point(field_mutable:Response.Ranking)
  return ranking_;
}
inline void Response::set_allocated_ranking(::RankingResponse* ranking) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete ranking_;
  }
  if (ranking) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      ranking = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, ranking, submessage_arena);
    }
    
  } else {
    
  }
  ranking_ = ranking;
  // @@protoc_insertion_point(field_set_allocated:Response.Ranking)
}

// .ForgetSkillResponse ForgetSkill = 24;
inline bool Response::has_forgetskill() const {
  return this != internal_default_instance() && forgetskill_ != NULL;
}
inline void Response::clear_forgetskill() {
  if (GetArenaNoVirtual() == NULL && forgetskill_ != NULL) {
    delete forgetskill_;
  }
  forgetskill_ = NULL;
}
inline const ::ForgetSkillResponse& Response::forgetskill() const {
  const ::ForgetSkillResponse* p = forgetskill_;
  // @@protoc_insertion_point(field_get:Response.ForgetSkill)
  return p != NULL ? *p : *reinterpret_cast<const ::ForgetSkillResponse*>(
      &::_ForgetSkillResponse_default_instance_);
}
inline ::ForgetSkillResponse* Response::release_forgetskill() {
  // @@protoc_insertion_point(field_release:Response.ForgetSkill)
  
  ::ForgetSkillResponse* temp = forgetskill_;
  forgetskill_ = NULL;
  return temp;
}
inline ::ForgetSkillResponse* Response::mutable_forgetskill() {
  
  if (forgetskill_ == NULL) {
    forgetskill_ = new ::ForgetSkillResponse;
  }
  // @@protoc_insertion_point(field_mutable:Response.ForgetSkill)
  return forgetskill_;
}
inline void Response::set_allocated_forgetskill(::ForgetSkillResponse* forgetskill) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete forgetskill_;
  }
  if (forgetskill) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      forgetskill = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, forgetskill, submessage_arena);
    }
    
  } else {
    
  }
  forgetskill_ = forgetskill;
  // @@protoc_insertion_point(field_set_allocated:Response.ForgetSkill)
}

// .RegisterResponse Register = 25;
inline bool Response::has_register_() const {
  return this != internal_default_instance() && register__ != NULL;
}
inline void Response::clear_register_() {
  if (GetArenaNoVirtual() == NULL && register__ != NULL) {
    delete register__;
  }
  register__ = NULL;
}
inline const ::RegisterResponse& Response::register_() const {
  const ::RegisterResponse* p = register__;
  // @@protoc_insertion_point(field_get:Response.Register)
  return p != NULL ? *p : *reinterpret_cast<const ::RegisterResponse*>(
      &::_RegisterResponse_default_instance_);
}
inline ::RegisterResponse* Response::release_register_() {
  // @@protoc_insertion_point(field_release:Response.Register)
  
  ::RegisterResponse* temp = register__;
  register__ = NULL;
  return temp;
}
inline ::RegisterResponse* Response::mutable_register_() {
  
  if (register__ == NULL) {
    register__ = new ::RegisterResponse;
  }
  // @@protoc_insertion_point(field_mutable:Response.Register)
  return register__;
}
inline void Response::set_allocated_register_(::RegisterResponse* register_) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete register__;
  }
  if (register_) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      register_ = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, register_, submessage_arena);
    }
    
  } else {
    
  }
  register__ = register_;
  // @@protoc_insertion_point(field_set_allocated:Response.Register)
}

// .SolarUpgradeResponse SolarUpgrade = 26;
inline bool Response::has_solarupgrade() const {
  return this != internal_default_instance() && solarupgrade_ != NULL;
}
inline void Response::clear_solarupgrade() {
  if (GetArenaNoVirtual() == NULL && solarupgrade_ != NULL) {
    delete solarupgrade_;
  }
  solarupgrade_ = NULL;
}
inline const ::SolarUpgradeResponse& Response::solarupgrade() const {
  const ::SolarUpgradeResponse* p = solarupgrade_;
  // @@protoc_insertion_point(field_get:Response.SolarUpgrade)
  return p != NULL ? *p : *reinterpret_cast<const ::SolarUpgradeResponse*>(
      &::_SolarUpgradeResponse_default_instance_);
}
inline ::SolarUpgradeResponse* Response::release_solarupgrade() {
  // @@protoc_insertion_point(field_release:Response.SolarUpgrade)
  
  ::SolarUpgradeResponse* temp = solarupgrade_;
  solarupgrade_ = NULL;
  return temp;
}
inline ::SolarUpgradeResponse* Response::mutable_solarupgrade() {
  
  if (solarupgrade_ == NULL) {
    solarupgrade_ = new ::SolarUpgradeResponse;
  }
  // @@protoc_insertion_point(field_mutable:Response.SolarUpgrade)
  return solarupgrade_;
}
inline void Response::set_allocated_solarupgrade(::SolarUpgradeResponse* solarupgrade) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete solarupgrade_;
  }
  if (solarupgrade) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      solarupgrade = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, solarupgrade, submessage_arena);
    }
    
  } else {
    
  }
  solarupgrade_ = solarupgrade;
  // @@protoc_insertion_point(field_set_allocated:Response.SolarUpgrade)
}

// .SkillUpgradeResponse SkillUpgrade = 27;
inline bool Response::has_skillupgrade() const {
  return this != internal_default_instance() && skillupgrade_ != NULL;
}
inline void Response::clear_skillupgrade() {
  if (GetArenaNoVirtual() == NULL && skillupgrade_ != NULL) {
    delete skillupgrade_;
  }
  skillupgrade_ = NULL;
}
inline const ::SkillUpgradeResponse& Response::skillupgrade() const {
  const ::SkillUpgradeResponse* p = skillupgrade_;
  // @@protoc_insertion_point(field_get:Response.SkillUpgrade)
  return p != NULL ? *p : *reinterpret_cast<const ::SkillUpgradeResponse*>(
      &::_SkillUpgradeResponse_default_instance_);
}
inline ::SkillUpgradeResponse* Response::release_skillupgrade() {
  // @@protoc_insertion_point(field_release:Response.SkillUpgrade)
  
  ::SkillUpgradeResponse* temp = skillupgrade_;
  skillupgrade_ = NULL;
  return temp;
}
inline ::SkillUpgradeResponse* Response::mutable_skillupgrade() {
  
  if (skillupgrade_ == NULL) {
    skillupgrade_ = new ::SkillUpgradeResponse;
  }
  // @@protoc_insertion_point(field_mutable:Response.SkillUpgrade)
  return skillupgrade_;
}
inline void Response::set_allocated_skillupgrade(::SkillUpgradeResponse* skillupgrade) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete skillupgrade_;
  }
  if (skillupgrade) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      skillupgrade = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, skillupgrade, submessage_arena);
    }
    
  } else {
    
  }
  skillupgrade_ = skillupgrade;
  // @@protoc_insertion_point(field_set_allocated:Response.SkillUpgrade)
}

// .TreeUpgradeResponse TreeUpgrade = 28;
inline bool Response::has_treeupgrade() const {
  return this != internal_default_instance() && treeupgrade_ != NULL;
}
inline void Response::clear_treeupgrade() {
  if (GetArenaNoVirtual() == NULL && treeupgrade_ != NULL) {
    delete treeupgrade_;
  }
  treeupgrade_ = NULL;
}
inline const ::TreeUpgradeResponse& Response::treeupgrade() const {
  const ::TreeUpgradeResponse* p = treeupgrade_;
  // @@protoc_insertion_point(field_get:Response.TreeUpgrade)
  return p != NULL ? *p : *reinterpret_cast<const ::TreeUpgradeResponse*>(
      &::_TreeUpgradeResponse_default_instance_);
}
inline ::TreeUpgradeResponse* Response::release_treeupgrade() {
  // @@protoc_insertion_point(field_release:Response.TreeUpgrade)
  
  ::TreeUpgradeResponse* temp = treeupgrade_;
  treeupgrade_ = NULL;
  return temp;
}
inline ::TreeUpgradeResponse* Response::mutable_treeupgrade() {
  
  if (treeupgrade_ == NULL) {
    treeupgrade_ = new ::TreeUpgradeResponse;
  }
  // @@protoc_insertion_point(field_mutable:Response.TreeUpgrade)
  return treeupgrade_;
}
inline void Response::set_allocated_treeupgrade(::TreeUpgradeResponse* treeupgrade) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete treeupgrade_;
  }
  if (treeupgrade) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      treeupgrade = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, treeupgrade, submessage_arena);
    }
    
  } else {
    
  }
  treeupgrade_ = treeupgrade;
  // @@protoc_insertion_point(field_set_allocated:Response.TreeUpgrade)
}

// .ElfinUpgradeResponse ElfinUpgrade = 29;
inline bool Response::has_elfinupgrade() const {
  return this != internal_default_instance() && elfinupgrade_ != NULL;
}
inline void Response::clear_elfinupgrade() {
  if (GetArenaNoVirtual() == NULL && elfinupgrade_ != NULL) {
    delete elfinupgrade_;
  }
  elfinupgrade_ = NULL;
}
inline const ::ElfinUpgradeResponse& Response::elfinupgrade() const {
  const ::ElfinUpgradeResponse* p = elfinupgrade_;
  // @@protoc_insertion_point(field_get:Response.ElfinUpgrade)
  return p != NULL ? *p : *reinterpret_cast<const ::ElfinUpgradeResponse*>(
      &::_ElfinUpgradeResponse_default_instance_);
}
inline ::ElfinUpgradeResponse* Response::release_elfinupgrade() {
  // @@protoc_insertion_point(field_release:Response.ElfinUpgrade)
  
  ::ElfinUpgradeResponse* temp = elfinupgrade_;
  elfinupgrade_ = NULL;
  return temp;
}
inline ::ElfinUpgradeResponse* Response::mutable_elfinupgrade() {
  
  if (elfinupgrade_ == NULL) {
    elfinupgrade_ = new ::ElfinUpgradeResponse;
  }
  // @@protoc_insertion_point(field_mutable:Response.ElfinUpgrade)
  return elfinupgrade_;
}
inline void Response::set_allocated_elfinupgrade(::ElfinUpgradeResponse* elfinupgrade) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete elfinupgrade_;
  }
  if (elfinupgrade) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      elfinupgrade = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, elfinupgrade, submessage_arena);
    }
    
  } else {
    
  }
  elfinupgrade_ = elfinupgrade;
  // @@protoc_insertion_point(field_set_allocated:Response.ElfinUpgrade)
}

// -------------------------------------------------------------------

// GameMessage

// .GameMsgCode msg = 1;
inline void GameMessage::clear_msg() {
  msg_ = 0;
}
inline ::GameMsgCode GameMessage::msg() const {
  // @@protoc_insertion_point(field_get:GameMessage.msg)
  return static_cast< ::GameMsgCode >(msg_);
}
inline void GameMessage::set_msg(::GameMsgCode value) {
  
  msg_ = value;
  // @@protoc_insertion_point(field_set:GameMessage.msg)
}

// .Request req = 2;
inline bool GameMessage::has_req() const {
  return this != internal_default_instance() && req_ != NULL;
}
inline void GameMessage::clear_req() {
  if (GetArenaNoVirtual() == NULL && req_ != NULL) {
    delete req_;
  }
  req_ = NULL;
}
inline const ::Request& GameMessage::req() const {
  const ::Request* p = req_;
  // @@protoc_insertion_point(field_get:GameMessage.req)
  return p != NULL ? *p : *reinterpret_cast<const ::Request*>(
      &::_Request_default_instance_);
}
inline ::Request* GameMessage::release_req() {
  // @@protoc_insertion_point(field_release:GameMessage.req)
  
  ::Request* temp = req_;
  req_ = NULL;
  return temp;
}
inline ::Request* GameMessage::mutable_req() {
  
  if (req_ == NULL) {
    req_ = new ::Request;
  }
  // @@protoc_insertion_point(field_mutable:GameMessage.req)
  return req_;
}
inline void GameMessage::set_allocated_req(::Request* req) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete req_;
  }
  if (req) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      req = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, req, submessage_arena);
    }
    
  } else {
    
  }
  req_ = req;
  // @@protoc_insertion_point(field_set_allocated:GameMessage.req)
}

// .Response res = 3;
inline bool GameMessage::has_res() const {
  return this != internal_default_instance() && res_ != NULL;
}
inline void GameMessage::clear_res() {
  if (GetArenaNoVirtual() == NULL && res_ != NULL) {
    delete res_;
  }
  res_ = NULL;
}
inline const ::Response& GameMessage::res() const {
  const ::Response* p = res_;
  // @@protoc_insertion_point(field_get:GameMessage.res)
  return p != NULL ? *p : *reinterpret_cast<const ::Response*>(
      &::_Response_default_instance_);
}
inline ::Response* GameMessage::release_res() {
  // @@protoc_insertion_point(field_release:GameMessage.res)
  
  ::Response* temp = res_;
  res_ = NULL;
  return temp;
}
inline ::Response* GameMessage::mutable_res() {
  
  if (res_ == NULL) {
    res_ = new ::Response;
  }
  // @@protoc_insertion_point(field_mutable:GameMessage.res)
  return res_;
}
inline void GameMessage::set_allocated_res(::Response* res) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete res_;
  }
  if (res) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      res = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, res, submessage_arena);
    }
    
  } else {
    
  }
  res_ = res;
  // @@protoc_insertion_point(field_set_allocated:GameMessage.res)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)


namespace google {
namespace protobuf {

template <> struct is_proto_enum< ::LoginResponse_ResultType> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::LoginResponse_ResultType>() {
  return ::LoginResponse_ResultType_descriptor();
}
template <> struct is_proto_enum< ::ElfinResponse_Elfintype> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::ElfinResponse_Elfintype>() {
  return ::ElfinResponse_Elfintype_descriptor();
}
template <> struct is_proto_enum< ::TasksResponse_TaskType> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::TasksResponse_TaskType>() {
  return ::TasksResponse_TaskType_descriptor();
}
template <> struct is_proto_enum< ::GameMsgCode> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::GameMsgCode>() {
  return ::GameMsgCode_descriptor();
}
template <> struct is_proto_enum< ::StdMode> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::StdMode>() {
  return ::StdMode_descriptor();
}

}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_Msg_2eproto__INCLUDED
